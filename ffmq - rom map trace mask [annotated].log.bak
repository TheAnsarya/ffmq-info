

; TODO: where do these addresses come from? running code from RAM?

000030 mvn $03,$00
000033 rts				; exit routine

; These are "jump from stack" thanks to interupt return?
000117 jml $00b82a
000117 jml $00b86c
000117 jml $00b898
000117 jml $00b8da
00011f jsl $00969f
000123 jsl $0180fb
000127 jsl $02d0fe
00012b jml $00825c
00012f jsl $00969f
000133 jsl $018336
000137 jsl $02eee7
00013b jsl $008337
00013f jsl $00969f
000143 jsl $018527
000147 jsl $02f0f5
00014b jml $008784
00014f jsl $00969f
000153 jsl $01831f
000157 jsl $02f120
00015b jml $008966





; START OF BANK $00

; game entry point (everything starts here)
008000 clc				; 
008001 xce				; set native mode
008002 jsr $8247		; call routine "Screen off, no interupts, AXY => 8bit ($00:8247)"
008005 jsl $0d8000
008009 lda #$00
00800b sta $7e3667
00800f dec
008010 sta $7e3668
008014 bra $8023

; restart titlescreen & demo sequnce
008016 jsr $8247		; call routine "Screen off, no interupts, AXY => 8bit ($00:8247)"
008019 lda #$f0
00801b sta $000600
00801f jsl $0d8004

008023 rep #$30			; set A,X,Y => 16bit
008025 ldx #$1fff
008028 txs
008029 jsr $81f0
00802c lda #$0040
00802f and $00da
008032 bne $806e
008034 jsl $0c8080
008038 bra $804d
00803a jsr $8247		; call routine "Screen off, no interupts, AXY => 8bit ($00:8247)"
00803d lda #$f0
00803f sta $000600
008043 jsl $0d8004
008047 rep #$30			; set A,X,Y => 16bit
008049 ldx #$1fff
00804c txs
00804d jsr $81f0
008050 sep #$20			; set A => 8bit
008052 ldx #$1809
008055 stx $4300
008058 ldx #$8252
00805b stx $4302
00805e lda #$00
008060 sta $4304
008063 ldx #$0000		; clear X
008066 stx $4305
008069 lda #$01
00806b sta $420b
00806e jsl $00011f
008072 rep #$30			; set A,X,Y => 16bit
008074 lda #$0000
008077 tcd
008078 sep #$20			; set A => 8bit
00807a lda $0112
00807d sta $4200
008080 cli
008081 lda #$0f
008083 sta $00aa
008086 jsl $0c8000
00808a jsl $0c8000
00808e lda $7e3665
008092 bne $80a8
008094 lda $700000
008098 ora $70038c
00809c ora $700718
0080a0 beq $80ad
0080a2 jsl $00b950
0080a6 bra $80b0
0080a8 jsr $8166
0080ab bra $80dc
0080ad jsr $8117
0080b0 lda #$80
0080b2 trb $00de
0080b5 lda #$e0
0080b7 trb $0111
0080ba jsl $0c8000
0080be lda #$e0
0080c0 sta $2132
0080c3 ldx #$0000		; clear X
0080c6 stx $2130
0080c9 stz $210e
0080cc stz $210e
0080cf stz $2110
0080d2 stz $2110
0080d5 jsr $bd30
0080d8 jsl $0c8000
0080dc jsr $9014
0080df lda #$00
0080e1 jsr $91d4
0080e4 lda #$01
0080e6 jsr $91d4
0080e9 ldx #$81ed
0080ec jsr $9bc4
0080ef lda #$04
0080f1 tsb $00d4
0080f4 lda #$80
0080f6 trb $00d6
0080f9 stz $0110
0080fc lda #$01
0080fe tsb $00e2
008101 lda #$10
008103 tsb $00d6
008106 ldx #$fff0
008109 stx $008e
00810c jsl $009b2f
008110 jsr $8230

; This is the VBLANK interupt handler
008113 jml $018271
008117 lda #$14
008119 sta $212c
00811c rep #$30
00811e lda #$0000
008121 sta $7e31b5
008125 jsr $bd64
008128 sep #$20
00812a jsl $0c8000
00812e ldx #$0000
008131 stx $2102
008134 ldx #$0400
008137 stx $4350
00813a ldx #$0c00
00813d stx $4352
008140 lda #$00
008142 sta $4354
008145 ldx #$0220
008148 stx $4355
00814b lda #$20
00814d sta $420b
008150 rep #$30
008152 lda #$ffff
008155 sta $010e
008158 jsl $00c7b5
00815c jsr $ba1a
00815f jsl $00c7d8
008163 sep #$20
008165 rts



008166 rep #$30			; set A,X,Y => 16bit
008168 ldx #$a9c2
00816b ldy #$1010
00816e lda #$003f
008171 mvn $0c,$00
008174 ldy #$0e9e
008177 lda #$0009
00817a mvn $0c,$00
00817d sep #$20			; set A => 8bit
00817f lda #$02
008181 sta $0fe7
008184 lda $7e3668
008188 cmp #$02
00818a bcc $818e
00818c lda #$ff
00818e inc
00818f sta $7e3668
008193 rep #$30			; set A,X,Y => 16bit
008195 and #$0003
008198 asl a
008199 asl a
00819a asl a
00819b tax
00819c sep #$20			; set A => 8bit
00819e stz $19
0081a0 lda $81d5,x
0081a3 sta $0e88
0081a6 ldy $81d6,x
0081a9 sty $0e89
0081ac lda $81d8,x
0081af sta $0e92
0081b2 ldy $81db,x
0081b5 sty $53
0081b7 ldy $81d9,x
0081ba tyx
0081bb rep #$30			; set A,X,Y => 16bit
0081bd ldy #$0ea8
0081c0 lda #$001f
0081c3 mvn $0c,$00
0081c6 ldx #$0e92
0081c9 stx $17
0081cb jsr $a236
0081ce sep #$20			; set A => 8bit
0081d0 jsl $009319
0081d4 rts				; exit routine



0081f0 lda #$0000
0081f3 tcd
0081f4 stz $00
0081f6 ldx #$0000		; clear X
0081f9 ldy #$0002
0081fc lda #$05fd
0081ff mvn $00,$00
008202 stz $0800
008205 ldx #$0800
008208 ldy #$0802
00820b lda #$17f8
00820e mvn $00,$00
008211 lda #$3369
008214 sta $7e3367
008218 ldx #$822a
00821b lda $7e3667
00821f and #$00ff
008222 beq $8227
008227 jmp $9bc4
008230 rep #$30			; set A,X,Y => 16bit
008232 pea $007e
008235 plb
008236 lda #$0170
008239 ldy #$3007
00823c jsr $9a08
00823f lda #$0098
008242 sta $31b5
008245 plb
008246 rts				; exit routine



; {{ NO GAP }}



; ROUTINE: Screen off, no interupts, AXY => 8bit ($00:8247)
008247 sep #$30			; set A,X,Y => 8bit
008249 stz $4200		; disable interupts and joypad
00824c lda #$80			; 
00824e sta $2100		; turn screen off, set brightness to $0
008251 rts				; exit routine



00825c rep #$30			; set A,X,Y => 16bit
00825e lda #$0000
008261 tcd
008262 ldx #$ff08
008265 stx $0503
008268 stx $0501
00826b ldx #$880f
00826e stx $0508
008271 stx $0506
008274 lda #$00ff
008277 sep #$20			; set A => 8bit
008279 sta $0500
00827c sta $0505
00827f lda #$00
008281 sta $050a
008284 sta $7e3659
008288 sta $7e365e
00828c sta $7e3663
008290 rep #$30			; set A,X,Y => 16bit
008292 sta $7e365a
008296 sta $7e365c
00829a sta $7e365f
00829e sta $7e3661
0082a2 ldx #$8334
0082a5 jsr $9bc4
0082a8 lda #$0040
0082ab sta $01f0
0082ae lda #$0004
0082b1 sta $01f2
0082b4 ldx #$b81b
0082b7 ldy #$3000
0082ba lda #$0006
0082bd mvn $00,$7e
0082c0 ldy #$4340
0082c3 lda #$0007
0082c6 mvn $00,$00
0082c9 lda #$0010
0082cc tsb $0111
0082cf lda #$0000
0082d2 jsr $ca83
0082d5 lda #$0001
0082d8 jsr $ca83
0082db lda #$0002
0082de jsr $ca83
0082e1 ldx #$d380
0082e4 ldy #$0e84
0082e7 lda #$017b
0082ea mvn $0c,$00
0082ed ldx #$d0b0
0082f0 ldy #$1000
0082f3 lda #$004f
0082f6 mvn $0c,$00
0082f9 lda #$00ff
0082fc sta $1090
0082ff sta $10a1
008302 sta $10a0
008305 lda $07800a
008309 and #$739c
00830c sta $0e9c
00830f jsr $8ec4
008312 jsr $8c3d
008315 jsr $8d29
008318 lda #$2100
00831b tcd
00831c stz $00f0
00831f ldx #$6080
008322 stx $16
008324 pea $0004
008327 plb
008328 ldx #$99c0
00832b ldy #$0004
00832e jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
008332 plb
008333 rtl				; exit routine
008337 rep #$30
008339 lda #$4300
00833c tcd
00833d sep #$20
00833f stz $420c
008342 lda #$40
008344 and $00e2
008347 bne $837d
008349 lda #$02
00834b and $00d4
00834e bne $837a
008350 lda #$40
008352 and $00dd
008355 bne $8385
008357 lda #$80
008359 and $00d8
00835c beq $8366



00835e lda #$80
008360 trb $00d8
008363 jmp $85b7
008366 lda #$c0
008368 and $00d2
00836b bne $83a8
00836d lda #$10
00836f and $00d2
008372 bne $8377
008374 jmp $8428
008377 jmp $863d
00837a jmp $83e8
00837d lda #$40
00837f trb $00e2
008382 jmp [$0058]
008385 ldx #$1801
008388 stx $50
00838a ldx $01f6
00838d stx $52
00838f lda #$7f
008391 sta $54
008393 ldx $01f4
008396 stx $55
008398 ldx $01f8
00839b stx $2116
00839e lda #$84
0083a0 sta $2115
0083a3 lda #$20
0083a5 sta $420b
0083a8 lda #$80
0083aa and $00d2
0083ad beq $83d3
0083af lda #$80
0083b1 sta $2115
0083b4 ldx #$1801
0083b7 stx $50
0083b9 ldx $01ed
0083bc stx $52
0083be lda $01ef
0083c1 sta $54
0083c3 ldx $01eb
0083c6 stx $55
0083c8 ldx $0048
0083cb stx $2116
0083ce lda #$20
0083d0 sta $420b
0083d3 lda #$20
0083d5 and $00d2
0083d8 beq $83dd
0083da jsr $8543
0083dd lda #$40
0083df trb $00dd
0083e2 lda #$a0
0083e4 trb $00d2
0083e7 rtl
0083e8 lda #$02
0083ea trb $00d4
0083ed lda #$80
0083ef sta $2115
0083f2 ldx #$2200
0083f5 stx $50
0083f7 lda #$07
0083f9 sta $54
0083fb lda #$a8
0083fd ldx $0064
008400 jsr $8504
008403 rep #$30			; set A,X,Y => 16bit
008405 ldx #$ff00
008408 stx $00f0
00840b ldx $0062
00840e lda #$6080
008411 cpx #$0001
008414 beq $841a
008416 jsr $8520
008419 rtl				; exit routine
008428 lda #$80
00842a and $00d4
00842d beq $8476



00842f lda #$80
008431 trb $00d4
008434 lda #$80
008436 sta $2115
008439 lda #$02
00843b and $00d8
00843e beq $8479
008440 ldx #$1801
008443 stx $50
008445 ldx #$075a
008448 stx $52
00844a lda #$7f
00844c sta $54
00844e ldx #$0062
008451 stx $55
008453 ldx #$3bad
008456 stx $2116
008459 lda #$20
00845b sta $420b
00845e rep #$30			; set A,X,Y => 16bit
008460 ldx #$4bed
008463 stx $2116
008466 lda $7f17da
00846a sta $2118
00846d lda $7f17dc
008471 sta $2118
008474 sep #$20			; set A => 8bit
008476 jmp $83a8
008479 ldx #$2200
00847c stx $50
00847e lda #$07
008480 sta $54
008482 lda #$88
008484 ldx $00f4
008487 jsr $8504
00848a lda #$98
00848c ldx $00f7
00848f jsr $8504
008492 rep #$30			; set A,X,Y => 16bit
008494 ldx #$5e8d
008497 stx $2116
00849a lda $7e2d1a
00849e sta $2118
0084a1 lda $7e2d1c
0084a5 sta $2118
0084a8 ldx #$ff00
0084ab stx $00f0
0084ae ldx $00f2
0084b1 lda #$6000
0084b4 jsr $8520
0084b7 ldx $00f5
0084ba lda #$6040
0084bd jsr $8520
0084c0 sep #$20			; set A => 8bit
0084c2 lda #$10
0084c4 and $00da
0084c7 bne $84f8
0084c9 ldx #$1801
0084cc stx $50
0084ce ldx #$0380
0084d1 stx $55
0084d3 lda #$7f
0084d5 sta $54
0084d7 lda $1031
0084da ldx #$c708
0084dd cmp #$26
0084df bcc $84eb
0084e1 ldx #$c908
0084e4 cmp #$29
0084e6 bcc $84eb
0084e8 ldx #$ca48
0084eb stx $52
0084ed ldx #$6700
0084f0 stx $2116
0084f3 lda #$20
0084f5 sta $420b
0084f8 ldx #$ffff
0084fb stx $00f2
0084fe stx $00f5
008501 jmp $83a8
008504 sta $2121
008507 ldy #$0010
00850a sty $55
00850c rep #$30			; set A,X,Y => 16bit
00850e txa
00850f and #$00ff
008512 clc
008513 adc #$d8e4
008516 sta $52
008518 sep #$20			; set A => 8bit
00851a lda #$20
00851c sta $420b
00851f rts				; exit routine



008520 cpx #$ffff
008523 beq $8542
008525 sta $2116
008528 pea $0004
00852b plb
00852c phx
00852d ldy #$0002
008530 jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
008534 pla
008535 clc
008536 adc #$0180
008539 tax
00853a ldy #$0002
00853d jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
008541 plb
008542 rts				; exit routine
008543 ldx #$0400
008546 stx $50
008548 ldx #$0c00
00854b stx $52
00854d lda #$00
00854f sta $54
008551 ldx $01f0
008554 stx $55
008556 ldx #$0000
008559 stx $2102
00855c lda #$20
00855e sta $420b
008561 ldx #$0e00
008564 stx $52
008566 ldx $01f2
008569 stx $55
00856b ldx #$0100
00856e stx $2102
008571 lda #$20
008573 sta $420b
008576 rts



008577 ldx #$4400
00857a stx $2116
00857d ldx #$1801
008580 stx $50
008582 ldx #$0480
008585 stx $52
008587 lda #$7f
008589 sta $54
00858b ldx #$0280
00858e stx $55
008590 lda #$20
008592 sta $420b
008595 ldx #$5820
008598 stx $2116
00859b ldx #$2040
00859e stx $52
0085a0 lda #$7e
0085a2 sta $54
0085a4 ldx #$0b00
0085a7 stx $55
0085a9 lda #$20
0085ab sta $420b
0085ae lda #$40
0085b0 tsb $00d2
0085b3 jsr $8543
0085b6 rtl				; exit routine



0085b7 lda #$80
0085b9 sta $2115
0085bc lda #$10
0085be and $00da
0085c1 bne $8577
0085c3 ldx $0042
0085c6 stx $2116
0085c9 ldx #$1801
0085cc stx $50
0085ce ldx #$0040
0085d1 stx $52
0085d3 lda #$7f
0085d5 sta $54
0085d7 ldx #$07c0
0085da stx $55
0085dc lda #$20
0085de sta $420b
0085e1 rep #$30			; set A,X,Y => 16bit
0085e3 clc
0085e4 lda $0042
0085e7 adc #$1000
0085ea sta $2116
0085ed sep #$20			; set A => 8bit
0085ef ldx #$1801
0085f2 stx $50
0085f4 ldx #$1040
0085f7 stx $52
0085f9 lda #$7f
0085fb sta $54
0085fd ldx #$07c0
008600 stx $55
008602 lda #$20
008604 sta $420b
008607 lda #$80
008609 and $00d6
00860c beq $862d
00860e ldx #$5820
008611 stx $2116
008614 ldx #$1801
008617 stx $50
008619 ldx #$2040
00861c stx $52
00861e lda #$7e
008620 sta $54
008622 ldx #$0fc0
008625 stx $55
008627 lda #$20
008629 sta $420b
00862c rtl				; exit routine



; {{ NO GAP }}



00862d jsr $8543
008630 lda #$20
008632 and $00d6
008635 beq $863c
008637 lda #$78
008639 tsb $00d4
00863c rtl				; exit routine



; {{ NO GAP }}



00863d lda #$10
00863f trb $00d2
008642 lda #$80
008644 sta $2115
008647 lda #$10
008649 and $00da
00864c beq $869d
00864e pea $0004
008651 plb
008652 ldx #$60c0
008655 stx $2116
008658 ldx #$ff00
00865b stx $00f0
00865e ldx #$99c0
008661 ldy #$0004
008664 jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
008668 plb
008669 lda #$a8
00866b sta $2121
00866e ldx #$2200
008671 stx $50
008673 ldx #$d814
008676 stx $52
008678 lda #$07
00867a sta $54
00867c ldx #$0010
00867f stx $55
008681 lda #$20
008683 sta $420b
008686 lda #$0d
008688 sta $2121
00868b stz $2122
00868e stz $2122
008691 lda #$1d
008693 sta $2121
008696 stz $2122
008699 stz $2122
00869c rtl				; exit routine



; {{ NO GAP }}



00869d ldx #$2200
0086a0 stx $50
0086a2 ldx #$d824
0086a5 stx $52
0086a7 lda #$07
0086a9 sta $54
0086ab ldx #$0010
0086ae stx $55
0086b0 rep #$30			; set A,X,Y => 16bit
0086b2 stz $00f0
0086b5 pea $0004
0086b8 plb
0086b9 lda #$0040
0086bc and $00de
0086bf beq $86f3
0086c1 lda #$0040
0086c4 trb $00de
0086c7 lda $010d
0086ca and #$ff00
0086cd clc
0086ce adc #$6180
0086d1 sta $2116
0086d4 lda $010e
0086d7 asl a
0086d8 tax
0086d9 lda $0107,x
0086dc tax
0086dd pha
0086de jsr $8751
0086e1 ply
0086e2 plb
0086e3 clc
0086e4 lda $010e
0086e7 adc #$000d
0086ea asl a
0086eb asl a
0086ec asl a
0086ed asl a
0086ee tax
0086ef jsr $876c
0086f2 rtl				; exit routine



; {{ NO GAP }}



0086f3 lda #$6100
0086f6 sta $2116
0086f9 ldx #$9a20
0086fc ldy #$0004
0086ff jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
008703 ldx #$cd20
008706 ldy #$0004
008709 jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
00870d ldx $0107
008710 jsr $8751
008713 lda #$6280
008716 sta $2116
008719 ldx $0109
00871c jsr $8751
00871f lda #$6380
008722 sta $2116
008725 ldx $010b
008728 jsr $8751
00872b plb
00872c lda #$d824
00872f ldx #$00c0
008732 jsr $876f
008735 ldy $0107
008738 ldx #$00d0
00873b jsr $876c
00873e ldy $0109
008741 ldx #$00e0
008744 jsr $876c
008747 ldy $010b
00874a ldx #$00f0
00874d jsr $876c
008750 rtl				; exit routine



; {{ NO GAP }}



008751 phx
008752 lda $000000,x
008756 tax
008757 ldy #$0004
00875a jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
00875e plx
00875f lda $000002,x
008763 tax
008764 ldy #$0004
008767 jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
00876b rts				; exit routine



; {{ NO GAP }}



00876c lda $0004,y
00876f sta $52
008771 txa
008772 sep #$20			; set A => 8bit
008774 sta $2121
008777 ldx #$0010
00877a stx $55
00877c lda #$20
00877e sta $420b
008781 rep #$30			; set A,X,Y => 16bit
008783 rts				; exit routine
008784 sep #$20
008786 rep #$10
008788 lda #$20
00878a and $00d4
00878d beq $87ce



; MISSING: $008784-$00878e ($A bytes)



00878f lda #$20
008791 trb $00d4
008794 ldx #$54f4
008797 ldy #$54f6
00879a rep #$30			; set A,X,Y => 16bit
00879c lda #$0080
00879f and $0ec6
0087a2 bne $87bf
0087a4 lda #$0024
0087a7 sta $7f54f4
0087ab lda #$000b
0087ae mvn $7f,$7f
0087b1 lda #$0026
0087b4 sta $5500
0087b7 lda #$0009
0087ba mvn $7f,$7f
0087bd bra $87cc
0087bf lda #$0020
0087c2 sta $7f54f4
0087c6 lda #$0015
0087c9 mvn $7f,$7f
0087cc sep #$20			; set A => 8bit
0087ce phk
0087cf plb
0087d0 lda #$40
0087d2 and $00d4
0087d5 beq $883a
0087d7 lda #$40
0087d9 trb $00d4
0087dc lda $1090
0087df bmi $883a
0087e1 pea $2100
0087e4 pld
0087e5 stz $15
0087e7 ldx #$5e1b
0087ea lda #$02
0087ec and $00d8
0087ef beq $87f4
0087f1 ldx #$4b7b
0087f4 stx $16
0087f6 ldx #$0000		; clear X
0087f9 lda #$80
0087fb and $10a0
0087fe beq $8803
008800 ldx #$0003
008803 lda $8960,x
008806 sta $18
008808 lda $8961,x
00880b sta $18
00880d lda $8962,x
008810 sta $18
008812 lda #$02
008814 and $00d8
008817 beq $883a
008819 lda $8960,x
00881c sta $7e26f6
008820 sta $7f16f6
008824 lda $8961,x
008827 sta $7e26f8
00882b sta $7f16f8
00882f lda $8962,x
008832 sta $7e26fa
008836 sta $7f16fa
00883a rep #$30
00883c lda #$0040
00883f and $00d2
008842 beq $88a7
008844 lda #$0040
008847 trb $00d2
00884a pea $007e
00884d plb
00884e ldx #$31c5
008851 ldy #$3015
008854 clc
008855 jsr $9891
008858 txa
008859 adc #$0040
00885c tax
00885d tya
00885e adc #$0040
008861 tay
008862 jsr $9891
008865 txa
008866 adc #$0040
008869 tax
00886a tya
00886b adc #$0040
00886e tay
00886f jsr $9891
008872 txa
008873 adc #$0040
008876 tax
008877 tya
008878 adc #$0040
00887b tay
00887c jsr $9891
00887f txa
008880 adc #$0040
008883 tax
008884 tya
008885 adc #$0040
008888 tay
008889 jsr $9891
00888c txa
00888d adc #$0040
008890 tax
008891 tya
008892 adc #$0040
008895 tay
008896 jsr $9891
008899 txa
00889a adc #$0040
00889d tax
00889e tya
00889f adc #$0040
0088a2 tay
0088a3 jsr $98f1
0088a6 plb
0088a7 sep #$20
0088a9 lda #$04
0088ab and $00d8
0088ae beq $88ca
0088b0 lda #$80
0088b2 and $00e0
0088b5 beq $88c5
0088b7 lda #$40
0088b9 and $00e0
0088bc beq $88c5
0088be lda #$c8
0088c0 tsb $0111
0088c3 bra $88ca
0088c5 lda #$c8
0088c7 trb $0111
0088ca lda #$80
0088cc and $00da
0088cf beq $890c
0088d1 lda #$08
0088d3 and $00d4
0088d6 beq $88fb
0088d8 pea $007f
0088db plb
0088dc ldx $56d7
0088df stx $56ce
0088e2 ldx $56d9
0088e5 stx $56d0
0088e8 ldx $56db
0088eb stx $56d2
0088ee ldx $56dd
0088f1 stx $56d4
0088f4 lda $56df
0088f7 sta $56d6
0088fa plb
0088fb ldx #$3200
0088fe stx $4350
008901 ldx #$56ce
008904 stx $4352
008907 lda #$7f
008909 sta $4354
00890c lda #$10
00890e and $00d4
008911 beq $8934
008913 sep #$30			; set A,X,Y => 8bit
008915 lda #$10
008917 trb $00d4
00891a ldx $0e9c
00891d ldy $0e9d
008920 lda #$0d
008922 jsr $8956
008925 lda #$1d
008927 jsr $8956
00892a lda #$31
00892c jsr $8956
00892f lda #$71
008931 jsr $8956
008934 rep #$30
008936 lda #$0020
008939 and $0eac
00893c bne $894d
00893e lda #$0001
008941 and $00e2
008944 beq $894d
008946 lda #$0169
008949 sta $7e3015
00894d sep #$20
00894f lda $0111
008952 sta $420c
008955 rtl
008956 sta $2121
008959 stx $2122
00895c sty $2122
00895f rts				; exit routine
008966 rep #$30
008968 lda #$0000
00896b tcd
00896c inc $0e97
00896f bne $8974



; MISSING: $008960-$008970 ($ bytes)



008971 inc $0e99
008974 jsr $89c6
008977 lda #$0004
00897a and $00d4
00897d beq $8999



; MISSING: ???



00897f lda #$0004
008982 trb $00d4
008985 lda #$0000
008988 jsr $91d4
00898b jsr $8c3d
00898e lda #$0001
008991 jsr $91d4
008994 jsr $8d29
008997 bra $89bd
008999 jsr $8bfd
00899c lda #$0010
00899f and $00da
0089a2 bne $89ac
0089a4 lda #$0004
0089a7 and $00e2
0089aa bne $89bd
0089ac lda $07
0089ae and $8e
0089b0 beq $89bd
0089b2 jsl $009730
0089b6 sep #$30			; set A,X,Y => 8bit
0089b8 asl a
0089b9 tax
0089ba jsr ($8a35,x)
0089bd rep #$30
0089bf jsr $9342
0089c2 jsr $9264
0089c5 rtl
0089c6 phd
0089c7 lda #$0080
0089ca and $00de
0089cd beq $8a26
0089cf lda #$0c00
0089d2 tcd
0089d3 sep #$30			; set A,X,Y => 8bit
0089d5 dec $010d
0089d8 bpl $8a26
0089da lda #$0c
0089dc sta $010d
0089df lda $700027
0089e3 bne $89ea
0089e5 ldx #$40
0089e7 jsr $8a2a
0089ea lda $700077
0089ee bne $89f5
0089f0 ldx #$50
0089f2 jsr $8a2a
0089f5 lda $7003b3
0089f9 bne $8a00
0089fb ldx #$60
0089fd jsr $8a2a
008a00 lda $700403
008a04 bne $8a0b
008a06 ldx #$70
008a08 jsr $8a2a
008a0b lda $70073f
008a0f bne $8a16
008a11 ldx #$80
008a13 jsr $8a2a
008a16 lda $70078f
008a1a bne $8a21
008a1c ldx #$90
008a1e jsr $8a2a
008a21 lda #$20
008a23 tsb $00d2
008a26 rep #$30
008a28 pld
008a29 rts
008a2a lda $02,x
008a2c eor #$04
008a2e sta $02,x
008a30 inc
008a31 sta $0c06,x
008a34 inc
008a35 sta $0c0a,x
008a38 inc
008a39 sta $0c0e,x
008a3c rts				; exit routine



; MISSING: $008a3d-$008a54 ($17 bytes)



008a55 dec $02
008a57 bra $8a63
008a59 inc $02
008a5b bra $8a63
008a5d dec $01
008a5f bra $8a63
008a61 inc $01
008a63 lda $01
008a65 bmi $8a78
008a67 cmp $03
008a69 bcc $8a80
008a6b lda $95
008a6d and #$01
008a6f bne $8a78
008a71 lda $03
008a73 dec
008a74 sta $01
008a76 bra $8a80
008a78 lda $95
008a7a and #$02
008a7c bne $8a71
008a7e stz $01
008a80 lda $02
008a82 bmi $8a94
008a84 cmp $04
008a86 bcc $8a9c
008a88 lda $95
008a8a and #$04
008a8c bne $8a94
008a8e lda $04
008a90 dec
008a91 sta $02
008a93 rts				; exit routine



; {{ NO GAP }}



008a94 lda $95
008a96 and #$08
008a98 bne $8a8e
008a9a stz $02
008a9c rts				; exit routine



008a9d jsr $8b57
008aa0 bne $8abc
008aa2 lda $1090
008aa5 bmi $8ab9
008aa7 lda $10a0
008aaa eor #$80
008aac sta $10a0
008aaf lda #$40
008ab1 tsb $00d4
008ab4 jsr $b908
008ab7 bra $8abc
008ab9 jsr $b912
008abc rts				; exit routine



008abd lda $1032
008ac0 cmp #$80
008ac2 bne $8acc
008ac4 lda $1033
008ac7 bne $8acc
008ac9 jmp $b912
008acc jmp $b908
008acf jsr $8b57
008ad2 bne $8af7
008ad4 jsr $8abd
008ad7 lda $1031
008ada sec
008adb sbc #$20
008add ldx #$ff
008adf inx
008ae0 sbc #$03
008ae2 bcs $8adf
008ae4 txa
008ae5 inc
008ae6 and #$03
008ae8 pha
008ae9 jsr $8da8
008aec pla
008aed cpy #$ff
008aef beq $8ae5
008af1 jsr $8b21
008af4 jsr $8c3d
008af7 rts				; exit routine



008af8 jsr $8b57
008afb bne $8b20
008afd jsr $8abd
008b00 lda $1031
008b03 sec
008b04 sbc #$20
008b06 ldx #$ff
008b08 inx
008b09 sbc #$03
008b0b bcs $8b08
008b0d txa
008b0e dec
008b0f and #$03
008b11 pha
008b12 jsr $8da8
008b15 pla
008b16 cpy #$ff
008b18 beq $8b0e
008b1a jsr $8b21
008b1d jsr $8c3d
008b20 rts				; exit routine



008b21 rep #$30			; set A,X,Y => 16bit
008b23 ldx #$3709
008b26 cpy #$0023
008b29 bcc $8b3e
008b2b ldx #$3719
008b2e cpy #$0026
008b31 bcc $8b3e
008b33 ldx #$3729
008b36 cpy #$0029
008b39 bcc $8b3e
008b3b ldx #$3739
008b3e ldy #$3669
008b41 lda #$000f
008b44 mvn $7e,$7e
008b47 phk
008b48 plb
008b49 lda #$0000
008b4c jsr $91d4
008b4f sep #$30			; set A,X,Y => 8bit
008b51 lda #$80
008b53 tsb $00d9
008b56 rts				; exit routine



008b57 lda #$10
008b59 and $00d6
008b5c beq $8b67
008b5e rep #$30			; set A,X,Y => 16bit
008b60 lda $92
008b62 and #$bfcf
008b65 sep #$30			; set A,X,Y => 8bit
008b67 rts				; exit routine



008b68 rts				; exit routine
008b69 lda $00d2
008b6c bne $8b7a
008b6e lda $00d7
008b71 bmi $8b7a
008b73 jsl $00012f
008b77 rep #$30
008b79 rts
008b7a phk
008b7b pea $8b76
008b7e phk
008b7f pea $8b84
008b82 jmp [$013c]
008b85 jmp [$014c]
008b88 lda $00d2
008b8b bne $8b99
008b8d lda $00d7
008b90 bmi $8b99
008b92 jsl $00014f
008b96 rep #$30
008b98 rts



008b99 phk
008b9a pea $8b95
008b9d jmp [$015c]
008ba0 rep #$30
008ba2 lda #$0000
008ba5 tcd
008ba6 lda #$0040
008ba9 and $00d6
008bac bne $8bfc
008bae lda $92
008bb0 sta $96
008bb2 lda #$0008
008bb5 and $00d2
008bb8 bne $8bc7
008bba lda #$0004
008bbd and $00db
008bc0 bne $8bd2
008bc2 lda $4218
008bc5 bra $8bea

008bc7 lda $4218
008bca and #$fff0
008bcd beq $8bea
008bcf jmp $92f0

008bd2 lda #$0002
008bd5 and $00d9
008bd8 beq $8bdf
008bda lda #$0080
008bdd tsb $90
008bdf lda $4218
008be2 and #$fff0
008be5 beq $8bea
008be7 jmp $92f6
008bea ora $90
008bec and #$fff0
008bef sta $94
008bf1 tax
008bf2 trb $96
008bf4 lda $92
008bf6 trb $94
008bf8 stx $92
008bfa stz $90
008bfc rts
008bfd stz $07
008bff lda $94
008c01 bne $8c13
008c03 lda $92
008c05 beq $8c12

008c07 dec $09
008c09 bpl $8c12
008c0b sta $07
008c0d lda #$0005
008c10 sta $09
008c12 rts
008c13 sta $07
008c15 lda #$0019
008c18 sta $09
008c1a rts				; exit routine



008c1b php				; save processor status to stack
008c1c rep #$30			; set A,X,Y => 16bit
008c1e and #$00ff
008c21 pha
008c22 and #$0038
008c25 asl a
008c26 tax
008c27 pla
008c28 and #$0007
008c2b phx
008c2c adc $01,s
008c2e sta $01,s
008c30 asl a
008c31 adc $01,s
008c33 asl a
008c34 asl a
008c35 asl a
008c36 asl a
008c37 adc #$8000
008c3a plx
008c3b plp
008c3c rts				; exit routine



008c3d php				; save processor status to stack
008c3e sep #$30			; set A,X,Y => 8bit
008c40 ldx $1031
008c43 cpx #$ff
008c45 beq $8c81
008c47 lda #$02
008c49 and $00d8
008c4c beq $8c83
008c4e lda $049800,x
008c52 adc #$0a
008c54 xba
008c55 txa
008c56 and #$38
008c58 asl a
008c59 pha
008c5a txa
008c5b and #$07
008c5d ora $01,s
008c5f plx
008c60 asl a
008c61 rep #$30			; set A,X,Y => 16bit
008c63 sta $7f075a
008c67 inc
008c68 sta $7f075c
008c6c adc #$000f
008c6f sta $7f079a
008c73 inc
008c74 sta $7f079c
008c78 sep #$20			; set A => 8bit
008c7a ldx #$17da
008c7d lda #$7f
008c7f bra $8c9c
008c83 lda $049800,x
008c87 asl a
008c88 asl a
008c89 sta $00f4
008c8c rep #$10			; set X,Y => 16bit
008c8e lda $1031
008c91 jsr $8d8a
008c94 stx $00f2
008c97 ldx #$2d1a
008c9a lda #$7e
008c9c pha
008c9d lda #$04
008c9f and $00da
008ca2 beq $8cc5
008ca4 lda $0014
008ca7 dec
008ca8 beq $8cc5
008caa lda #$10
008cac and $00da
008caf bne $8cbb
008cbb plb
008cbc lda $0001,x
008cbf and #$e3
008cc1 ora #$9c
008cc3 bra $8ccd
008cc5 plb
008cc6 lda $0001,x
008cc9 and #$e3
008ccb ora #$88
008ccd xba
008cce lda $001031
008cd2 cmp #$29
008cd4 bcc $8d11
008cd6 cmp #$2c
008cd8 beq $8d11
008cda lda $0001,x
008cdd and #$63
008cdf ora #$08
008ce1 sta $0001,x
008ce4 sta $0003,x
008ce7 lda $001030
008ceb ldy #$ffff
008cee sec
008cef iny
008cf0 sbc #$0a
008cf2 bcs $8cef
008cf4 adc #$8a
008cf6 sta $0002,x
008cf9 cpy #$0000
008cfc beq $8d06
008cfe tya
008cff adc #$7f
008d01 sta $0000,x
008d04 bra $8d20
008d11 xba
008d12 sta $0001,x
008d15 sta $0003,x
008d18 lda #$45
008d1a sta $0000,x
008d1d sta $0002,x
008d20 phk
008d21 plb
008d22 lda #$80
008d24 tsb $00d4
008d27 plp
008d28 rts				; exit routine



008d29 php				; save processor status to stack
008d2a sep #$30			; set A,X,Y => 8bit
008d2c lda #$02
008d2e and $00d8
008d31 beq $8d6c
008d33 ldx $10b1
008d36 cpx #$ff
008d38 beq $8d6a
008d3a lda $049800,x
008d3e adc #$0a
008d40 xba
008d41 txa
008d42 and #$38
008d44 asl a
008d45 pha
008d46 txa
008d47 and #$07
008d49 ora $01,s
008d4b plx
008d4c asl a
008d4d rep #$30			; set A,X,Y => 16bit
008d4f sta $7f0778
008d53 inc
008d54 sta $7f077a
008d58 adc #$000f
008d5b sta $7f07b8
008d5f inc
008d60 sta $7f07ba
008d64 lda #$0080
008d67 tsb $00d4
008d6a plp
008d6b rts				; exit routine



008d6c ldx $10b1
008d6f lda $049800,x
008d73 asl a
008d74 asl a
008d75 sta $00f7
008d78 rep #$10			; set X,Y => 16bit
008d7a lda $10b1
008d7d jsr $8d8a
008d80 stx $00f5
008d83 lda #$80
008d85 tsb $00d4
008d88 plp
008d89 rts				; exit routine



008d8a cmp #$ff
008d8c beq $8d93
008d8e jsr $8c1b
008d91 tax
008d92 rts				; exit routine



008da8 php				; save processor status to stack
008da9 sep #$30			; set A,X,Y => 8bit
008dab pha
008dac clc
008dad adc $01,s
008daf adc $01,s
008db1 adc #$22
008db3 tay
008db4 pla
008db5 eor #$ff
008db7 sec
008db8 adc #$04
008dba tax
008dbb lda $1032
008dbe xba
008dbf lda $1033
008dc2 rep #$20			; set A => 16bit
008dc4 sep #$10			; set X,Y => 8bit
008dc6 lsr a
008dc7 lsr a
008dc8 lsr a
008dc9 lsr a
008dca dex
008dcb bne $8dc7
008dcd lsr a
008dce bcs $8dda
008dd0 dey
008dd1 lsr a
008dd2 bcs $8dda
008dd4 dey
008dd5 lsr a
008dd6 bcs $8dda
008dd8 ldy #$ff
008dda sty $1031
008ddd plp
008dde rts				; exit routine



; ROUTINE: Copy tiles to VRAM (00:8ddf)
;		loops Y times, writing one tile to VRAM each time
;			copies $10 bytes to vram, then copies $8 bytes as the low byte using the same high byte loaded from $00f0-$00f1
;			so if data for last $8 bytes is = $AA $BB $CC... and $00f0 = $5500, then the second part would write as $55AA $55BB $55CC...
; parameters:
;		databank => source address bank
;		x => source address offset
;		Y => number of times to loop
;		$00f0 => high byte (which is at $00f1) will be used as high byte for second half of copies
; $2115-$2117 should be set up with vram options and vram destination address
; TODO: check debugger to be sure $00f1 is what's used
008ddf php				; save processor status to stack
008de0 phd				; save direct page to stack
008de1 rep #$30			; set A,X,Y => 16bit
008de3 lda #$2100		;
008de6 tcd				; set direct page => $2100 so writes are to registers
008de7 clc				; clear carry
; start of loop - write a tile to vram Y times {
	008de8 phy				; save counter to stack

	; copy $10 bytes to vram
	008de9 lda $0000,x		; load first two bytes
	008dec sta $18			; write first two bytes to vram through $2118
	008dee lda $0002,x		; load second two bytes
	008df1 sta $18			; write second two bytes to vram through $2118
	008df3 lda $0004,x		;
	008df6 sta $18			;
	008df8 lda $0006,x		;
	008dfb sta $18			;
	008dfd lda $0008,x		; etc.
	008e00 sta $18			;
	008e02 lda $000a,x		;
	008e05 sta $18			;
	008e07 lda $000c,x		;
	008e0a sta $18			;
	008e0c lda $000e,x		;
	008e0f sta $18			; write last two bytes

	; read $8 bytes, write $10 bytes to vram
	008e11 lda $00f0		; high byte loaded here will be kept for these next $8 writes
	008e14 sep #$20			; set A => 8bit
	008e16 lda $0010,x		; load first low byte, high byte in A is preserved
	008e19 tay				; copy 16bit version of A to Y
	008e1a sty $18			; write 2 bytes to vram $2118
	008e1c lda $0011,x		; load second low byte, high byte in A is preserved
	008e1f tay				; copy 16bit version of A to Y
	008e20 sty $18			; write 2 bytes to vram $2118
	008e22 lda $0012,x		;
	008e25 tay				;
	008e26 sty $18			;
	008e28 lda $0013,x		;
	008e2b tay				;
	008e2c sty $18			;
	008e2e lda $0014,x		; etc.
	008e31 tay				;
	008e32 sty $18			;
	008e34 lda $0015,x		;
	008e37 tay				;
	008e38 sty $18			;
	008e3a lda $0016,x		;
	008e3d tay				;
	008e3e sty $18			;
	008e40 lda $0017,x		;
	008e43 tay				;
	008e44 sty $18			; write last two bytes

	008e46 rep #$30			; set A,X,Y => 16bit
	008e48 txa				; set A => source address offset
	008e49 adc #$0018		; increment by $18 (one tile's worth of data)
	008e4c tax				; set source address offset => A
	008e4d ply				; resore counter from stack
	008e4e dey				; decrement counter
	008e4f bne $8de8		; if y != 0, jump to start of loop
}
008e51 pld				; restore direct page from stack
008e52 plp				; restore processor status from stack
008e53 rtl				; exit routine



; {{ NO GAP }}



008e54 php				; save processor status to stack
008e55 phd				; save direct page to stack
008e56 pea $2100
008e59 pld
008e5a sep #$20			; set A => 8bit
008e5c lda #$88
008e5e sta $15
008e60 rep #$30			; set A,X,Y => 16bit
008e62 clc
008e63 lda $0000,x
008e66 sta $18
008e68 lda $00f0
008e6b sta $18
008e6d lda $0002,x
008e70 sta $18
008e72 lda $00f0
008e75 sta $18
008e77 lda $0004,x
008e7a sta $18
008e7c lda $00f0
008e7f sta $18
008e81 lda $0006,x
008e84 sta $18
008e86 lda $00f0
008e89 sta $18
008e8b lda $0008,x
008e8e sta $18
008e90 lda $00f0
008e93 sta $18
008e95 lda $000a,x
008e98 sta $18
008e9a lda $00f0
008e9d sta $18
008e9f lda $000c,x
008ea2 sta $18
008ea4 lda $00f0
008ea7 sta $18
008ea9 lda $000e,x
008eac sta $18
008eae lda $00f0
008eb1 sta $18
008eb3 txa
008eb4 adc #$0010
008eb7 tax
008eb8 dey
008eb9 bne $8e63
008ebb sep #$20			; set A => 8bit
008ebd lda #$80
008ebf sta $15
008ec1 pld
008ec2 plp
008ec3 rtl				; exit routine



; {{ NO GAP }}



; ROUTINE:         (00:8ec4)
; TODO: what are we actually loading? overworld? city? title?
						; setup
008ec4 php					; save processor status to stack
008ec5 phd					; save direct page to stack
008ec6 rep #$30				; set A,X,Y => 16bit
008ec8 lda #$2100			; 
008ecb tcd					; set direct page => $2100, so direct mode writes are to the registers
008ecc sep #$20				; set A => 8bit

; 
; TODO: address translation in vram write, 8bit mode. lda #$84 / sta $15. tile data or map data?
008ece ldx #$1801		; $01 means write 2 bytes each time
						; $18 means destination is $2118 VRAM register  
008ed1 stx $4350		; write dma control and destination registers
						; setup source => $07:8030
008ed4 ldx #$8030			; 
008ed7 stx $4352			; set source address offset => $8030
008eda lda #$07				; 
008edc sta $4354			; set source address bank => $07
008edf ldx #$1000		; 
008ee2 stx $4355		; set DMA transfer size to $1000 bytes
008ee5 ldx #$3000		; 
008ee8 stx $16			; set vram destination address => $3000
008eea lda #$84			; $84 means 													; TODO: 
008eec sta $15			; set video port control [VMAIN]
008eee lda #$20			; bitmask for DMA channel 5
008ef0 sta $420b		; start DMA transfer on channel 5

; load $100 tiles from $04:8000 ($18 bytes each) to vram address $2000 ($20 bytes each)
008ef3 lda #$80			; $80 means increment destination address by 1 word (2 bytes) on write
008ef5 sta $15			; set video port control [VMAIN]
008ef7 rep #$30			; set A,X,Y => 16bit
008ef9 lda #$ff00		; 
008efc sta $00f0		; set high byte for second half of tile => $ff
008eff ldx #$2000		; 
008f02 stx $16			; set vram destination address => $2000
						; setup source => $04:8000
008f04 pea $0004			; source address bank
008f07 plb					; set databank => $04
008f08 ldx #$8000			; set source address offset => $8000
008f0b ldy #$0100		; going to copy $100 tiles
008f0e jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
008f12 plb				; restore databank from stack

; load $10 colors ($4 colors * $4 times)
008f13 sep #$30			; set A,X,Y => 8bit
008f15 pea $0007		; 
008f18 plb				; set databank => $07
008f19 lda #$08			; set starting color index => $08
008f1b ldx #$00			; set source address offset => $00
008f1d jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
008f20 lda #$0c			; set starting color index => $0c
008f22 ldx #$08			; set source address offset => $08
008f24 jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
008f27 lda #$18			; set starting color index => $18
008f29 ldx #$10			; set source address offset => $10
008f2b jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
008f2e lda #$1c			; set starting color index => $1c
008f30 ldx #$18			; set source address offset => $18
008f32 jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"

008f35 plb
008f36 ldx $0e9c
008f39 ldy $0e9d
008f3c lda #$0d
008f3e sta $21
008f40 stx $22
008f42 sty $22
008f44 lda #$1d
008f46 sta $21
008f48 stx $22
008f4a sty $22
008f4c ldy #$06
008f4e lda #$00
008f50 clc
008f51 pea $0007
008f54 plb
008f55 tax
008f56 adc #$28
008f58 sta $21
008f5a lda $d8e4,x
008f5d sta $22
008f5f lda $d8e5,x
008f62 sta $22
008f64 lda $d8e6,x
008f67 sta $22
008f69 lda $d8e7,x
008f6c sta $22
008f6e lda $d8e8,x
008f71 sta $22
008f73 lda $d8e9,x
008f76 sta $22
008f78 lda $d8ea,x
008f7b sta $22
008f7d lda $d8eb,x
008f80 sta $22
008f82 lda $d8ec,x
008f85 sta $22
008f87 lda $d8ed,x
008f8a sta $22
008f8c lda $d8ee,x
008f8f sta $22
008f91 lda $d8ef,x
008f94 sta $22
008f96 lda $d8f0,x
008f99 sta $22
008f9b lda $d8f1,x
008f9e sta $22
008fa0 lda $d8f2,x
008fa3 sta $22
008fa5 lda $d8f3,x
008fa8 sta $22
008faa txa
008fab adc #$10
008fad dey
008fae bne $8f55
008fb0 plb				; restore  
008fb1 pld				; restore direct page from stack
008fb2 plp				; restore processor status from stack
008fb3 rts				; exit routine



; {{ NO GAP }}



; ROUTINE: Copy $4 colors to CGRAM (00:8fb4)
; parameters:
;		A => the starting color index
;		X => source address offset
; called with:
;		all known calls use databank => $07 but don't have to
; AXY are 8bit
; D is $2100 so the writes are to registers
008fb4 sta $21			; set CGRAM address $2121
008fb6 lda $8000,x		; load first byte
008fb9 sta $22			; write first byte to $2122
008fbb lda $8001,x		; load second byte
008fbe sta $22			; write second byte to $2122
008fc0 lda $8002,x
008fc3 sta $22
008fc5 lda $8003,x
008fc8 sta $22
008fca lda $8004,x		; etc.
008fcd sta $22
008fcf lda $8005,x
008fd2 sta $22
008fd4 lda $8006,x
008fd7 sta $22
008fd9 lda $8007,x
008fdc sta $22
008fde rts				; exit routine



; MISSING: $008fdf-$009013 ($34 bytes)



009014 php				; save processor status to stack
009015 phd				; save direct page to stack
009016 rep #$30			; set A,X,Y => 16bit
009018 lda #$0000
00901b sta $7e3669
00901f ldx #$3669
009022 ldy #$366b
009025 lda #$00dd
009028 mvn $7e,$7e
00902b phk
00902c plb
00902d sep #$30			; set A,X,Y => 8bit
00902f pea $1000
009032 pld
009033 lda $32
009035 and #$e0
009037 beq $9047
009039 jsl $009730
00903d eor #$ff
00903f sec
009040 adc #$27
009042 ldy #$a0
009044 jsr $9111
009047 lda $32
009049 and #$1c
00904b beq $905b
00904d jsl $009730
009051 eor #$ff
009053 sec
009054 adc #$27
009056 ldy #$b0
009058 jsr $9111
00905b lda $33
00905d and #$80
00905f bne $9070
009061 lda $32
009063 and #$03
009065 beq $907e
009070 jsl $009730
009074 eor #$ff
009076 sec
009077 adc #$2f
009079 ldy #$c0
00907b jsr $9111
00907e lda $33
009080 and #$70
009082 beq $9092
009084 jsl $009730
009088 eor #$ff
00908a sec
00908b adc #$2f
00908d ldy #$d0
00908f jsr $9111
009092 ldy #$00
009094 jsr $90a3
009097 pea $1080
00909a pld
00909b ldy #$50
00909d jsr $90a3
0090a0 pld
0090a1 plp
0090a2 rts				; exit routine



0090a3 lda $31
0090a5 bmi $90aa
0090a7 jsr $9111
0090aa lda $35
0090ac and #$e0
0090ae beq $90bc
0090b0 jsl $009730
0090b4 eor #$ff
0090b6 sec
0090b7 adc #$36
0090b9 jsr $9111
0090bc lda $36
0090be and #$c0
0090c0 bne $90d1
0090c2 lda $35
0090c4 and #$1f
0090c6 beq $90dd
0090c8 jsl $009730
0090cc clc
0090cd adc #$08
0090cf bra $90d5
0090d1 jsl $009730
0090d5 eor #$ff
0090d7 sec
0090d8 adc #$3e
0090da jsr $9111
0090dd lda $36
0090df and #$3c
0090e1 beq $90ef
0090e3 jsl $009730
0090e7 eor #$ff
0090e9 sec
0090ea adc #$3e
0090ec jsr $9111
0090ef lda $37
0090f1 and #$80
0090f3 bne $9104
0090f5 lda $36
0090f7 and #$03
0090f9 beq $9110
0090fb jsl $009730
0090ff clc
009100 adc #$08
009102 bra $9108
009108 eor #$ff
00910a sec
00910b adc #$46
00910d jsr $9111
009110 rts				; exit routine



009111 php				; save processor status to stack
009112 phd				; save direct page to stack
009113 sep #$30			; set A,X,Y => 8bit
009115 pea $007e
009118 plb
009119 phy
00911a pea $0400
00911d pld
00911e sta $3a
009120 jsl $028ae0
009124 lda $3a
009126 cmp #$2f
009128 bcc $916e
00912a ldx #$10
00912c cmp #$32
00912e bcc $913f
009130 ldx #$20
009132 cmp #$39
009134 bcc $913f
009136 ldx #$30
009138 cmp #$3d
00913a bcc $913f
00913c ldx #$40
00913e clc
00913f txa
009140 adc $01,s
009142 tax
009143 jsr $91a9
009146 lda $db
009148 sta $3670,x
00914b lda $dc
00914d sta $3671,x
009150 lda $e5
009152 sta $3672,x
009155 lda $e6
009157 adc $366a,x
00915a sta $366a,x
00915d lda $e7
00915f sta $366e,x
009162 lda $e8
009164 sta $366d,x
009167 lda $e9
009169 sta $366f,x
00916c bra $91a4
00916e plx
00916f phx
009170 jsr $91a9
009173 cpx #$50
009175 bcs $91a4
009177 rep #$30			; set A,X,Y => 16bit
009179 lda $3a
00917b and #$00ff
00917e ldy #$3709
009181 cmp #$0023
009184 bcc $9199
009186 ldy #$3719
009189 cmp #$0026
00918c bcc $9199
009199 ldx #$3669
00919c lda #$000f
00919f mvn $7e,$7e
0091a2 sep #$30			; set A,X,Y => 8bit
0091a4 ply
0091a5 plb
0091a6 pld
0091a7 plp
0091a8 rts				; exit routine



0091a9 lda $e4
0091ab tay
0091ac and #$08
0091ae beq $91b2
0091b0 lda #$05
0091b2 sta $3669,x
0091b5 tya
0091b6 and #$04
0091b8 beq $91bc
0091bc sta $366a,x
0091bf tya
0091c0 and #$02
0091c2 beq $91c6
0091c4 lda #$05
0091c6 sta $366b,x
0091c9 tya
0091ca and #$01
0091cc beq $91d0
0091ce lda #$05
0091d0 sta $366c,x
0091d3 rts				; exit routine



0091d4 php				; save processor status to stack
0091d5 phd				; save direct page to stack
0091d6 sep #$30			; set A,X,Y => 8bit
0091d8 pea $007e
0091db plb
0091dc clc
0091dd pea $1000
0091e0 pld
0091e1 ldx #$00
0091e3 bit #$01
0091e5 beq $91ed
0091e7 pea $1080
0091ea pld
0091eb ldx #$50
0091ed jsr $9253
0091f0 sta $2a
0091f2 jsr $9253
0091f5 sta $2b
0091f7 jsr $9253
0091fa sta $2c
0091fc jsr $9253
0091ff sta $2d
009201 jsr $9253
009204 sta $41
009206 jsr $9253
009209 sta $3e
00920b jsr $9253
00920e sta $3f
009210 jsr $9245
009213 sta $3a
009215 jsr $9245
009218 sta $3b
00921a lda #$0f
00921c trb $2e
00921e jsr $9245
009221 and #$0f
009223 tsb $2e
009225 lda $3b
009227 trb $21
009229 lda $2a
00922b adc $26
00922d sta $22
00922f lda $2b
009231 adc $27
009233 sta $23
009235 lda $2c
009237 adc $28
009239 sta $24
00923b lda $2d
00923d adc $29
00923f sta $25
009241 plb
009242 pld
009243 plp
009244 rts				; exit routine



009245 lda $3679,x
009248 ora $3689,x
00924b ora $3699,x
00924e ora $36a9,x
009251 inx
009252 rts				; exit routine



009253 lda $3669,x
009256 adc $3679,x
009259 adc $3689,x
00925c adc $3699,x
00925f adc $36a9,x
009262 inx
009263 rts				; exit routine
009264 sep #$30
009266 lda #$20
009268 and $00d9
00926b bne $9270
00926d jsr $9273
009270 rep #$30
009272 rts
009273 rep #$10
009275 lda #$20
009277 tsb $00d9
00927a pea $0500
00927d pld
00927e cli
00927f lda #$04
009281 and $00e2
009284 bne $92a3
009286 lda $00
009288 bmi $92a3



00928a sta $0601
00928d ldx $01
00928f stx $0602
009292 lda #$01
009294 sta $0600
009297 jsl $0d8004
00929b lda #$ff
00929d sta $00
00929f ldx $03
0092a1 stx $01
0092a3 lda $05
0092a5 bmi $92c2
0092a7 lda $05
0092a9 sta $0601
0092ac ldx $06
0092ae stx $0602
0092b1 lda #$02
0092b3 sta $0600
0092b6 jsl $0d8004
0092ba lda #$ff
0092bc sta $05
0092be ldx $08
0092c0 stx $06
0092c2 lda $0a
0092c4 beq $92e9
0092c6 cmp #$02
0092c8 beq $92d9
0092ca cmp #$10
0092cc bcc $92d2
0092ce cmp #$20
0092d0 bcc $92d9
0092d2 lda #$04
0092d4 and $00e2
0092d7 bne $92e9
0092d9 ldx $0a
0092db stx $0600
0092de ldx $0c
0092e0 stx $0602
0092e3 jsl $0d8004
0092e7 stz $0a
0092e9 sei
0092ea lda #$20
0092ec trb $00d9
0092ef rts
0092f0 jsr $92fc
0092f3 jmp $803a
0092f6 jsr $92fc
0092f9 jmp $8016
0092fc sep #$30			; set A,X,Y => 8bit
0092fe lda #$40
009300 tsb $00d6
009303 lda $0112
009306 sta $4200
009309 cli
00930a jsl $00c7d8
00930e lda #$08
009310 trb $00d2
009313 lda #$04
009315 trb $00db
009318 rts				; exit routine



009319 php				; save processor status to stack
00931a phb				; save databank to stack
00931b phk
00931c plb
00931d rep #$30			; set A,X,Y => 16bit
00931f pha
009320 lda #$0008
009323 sta $0051
009326 sep #$20			; set A => 8bit
009328 lda #$0c
00932a sta $0055
00932d lda #$02
00932f trb $00db
009332 lda #$80
009334 trb $00e2
009337 lda #$04
009339 tsb $00db
00933c rep #$30			; set A,X,Y => 16bit
00933e pla
00933f plb
009340 plp
009341 rtl				; exit routine
009342 lda #$0004
009345 and $00db
009348 beq $9352



00934a lda $0e97
00934d and #$000f
009350 beq $9353
009352 rts
009353 lda #$0010
009356 and $00da
009359 bne $93cc
00935b lda $51
00935d beq $9362
00935f dec $51
009361 rts				; exit routine



009362 lda #$0080
009365 and $00e2
009368 bne $93c9
00936a jsr $95fb
00936d bne $93c9
00936f lda #$0002
009372 and $00db
009375 bne $9385
009377 lda #$0002
00937a tsb $00db
00937d lda [$53]
00937f lsr a
009380 lsr a
009381 lsr a
009382 lsr a
009383 bra $938f
009385 lda #$0002
009388 trb $00db
00938b lda [$53]
00938d inc $53
00938f and #$000f
009392 cmp #$0004
009395 bcs $93c3
009397 cmp #$0001
00939a bcc $93c0
00939c beq $93a9
00939e cmp #$0002
0093a1 beq $93aa
0093a3 lda #$0003
0093a6 sta $51
0093a8 rts				; exit routine



0093a9 rts				; exit routine



0093aa lda #$0002
0093ad and $00d9
0093b0 beq $93b9
0093b2 lda #$0002
0093b5 trb $00d9
0093b8 rts				; exit routine



0093b9 lda #$0002
0093bc tsb $00d9
0093bf rts				; exit routine



0093c0 jmp $92f6
0093c3 jsr $97f2
0093c6 sta $90
0093c8 rts				; exit routine



0093c9 jmp $954b
0093cc lda #$0006
0093cf sta $51
0093d1 lda $8e
0093d3 beq $93a9
0093d5 lda #$0001
0093d8 and $00db
0093db bne $93fe
0093dd lda $03
0093df cmp #$0103
0093e2 beq $9424
0093e4 cmp #$0202
0093e7 beq $942a
0093e9 cmp #$0104
0093ec beq $9443
0093ee cmp #$0304
0093f1 bne $9400
0093f3 cmp #$0201
0093f6 beq $93fb
0093f8 jmp $94d5
0093fe bra $9466
009400 lda $04df
009403 bmi $9424
009405 lda $1052
009408 and #$00ff
00940b cmp #$0015
00940e beq $9415
009415 lda $108f
009418 bmi $941f
00941a lda #$0300
00941d bra $945e
009424 lda #$0080
009427 sta $90
009429 rts				; exit routine



00942a lda $14
00942c and #$00ff
00942f bne $9458
009431 jsr $951c
009434 beq $9458
009436 cmp #$0016
009439 beq $9448
00943b lda $1018
00943e and #$00ff
009441 beq $9458
009443 lda #$0001
009446 bra $945e
009458 jsr $963d
00945b and #$0001
00945e sta $56
009460 lda #$0001
009463 tsb $00db
009466 lda $56
009468 cmp $01
00946a bne $9478
00946c lda #$0001
00946f trb $00db
009472 lda #$0080
009475 sta $90
009477 rts				; exit routine



009478 sep #$30			; set A,X,Y => 8bit
00947a cmp $01
00947c beq $9488
00947e bcc $9484
009480 lda #$01
009482 bra $9493
009484 lda #$02
009486 bra $9493
009488 xba
009489 cmp $02
00948b bcc $9491
00948d lda #$04
00948f bra $9493
009491 lda #$08
009493 sta $91
009495 rep #$30			; set A,X,Y => 16bit
009497 rts				; exit routine



009498 jsr $963d
00949b and #$0003
00949e beq $94ad
0094a0 ora #$0100
0094a3 bra $945e
0094a5 jsr $963d
0094a8 and #$0003
0094ab beq $94a0
0094ad ora #$0200
0094b0 bra $945e
0094b2 lda $1018
0094b5 and #$00ff
0094b8 beq $94e2
0094ba jsr $951c
0094bd beq $94e2
0094bf cmp #$0016
0094c2 bcc $94d0
0094d0 lda #$0001
0094d3 bra $945e
0094d5 ldx #$0000		; clear X
0094d8 lda $14
0094da and #$00ff
0094dd beq $94b2
0094e2 lda $110f
0094e5 ora $118f
0094e8 ora $120f
0094eb ora $1120
0094ee ora $11a0
0094f1 ora $1220
0094f4 bpl $9506
0094f6 lda $1019,x
0094f9 and #$00ff
0094fc beq $9506
0094fe lda $1038,x
009501 and #$000f
009504 bne $9498
009506 lda $101a,x
009509 and #$00ff
00950c beq $9516
00950e lda $1038,x
009511 and #$f000
009514 bne $94a5
00951c lda $102f
00951f and #$0003
009522 bne $953b
009524 lda $108f
009527 bmi $9547
009529 lda $10a0
00952c bmi $9543
00952e and #$7800
009531 bne $953f
009533 lda $10af
009536 and #$0002
009539 beq $9547
00953b lda #$0015
00953e rts				; exit routine



009547 lda #$0000
00954a rts				; exit routine



00954b inc $51
00954d lda #$0080
009550 and $00e2
009553 bne $9561
009555 lda #$0080
009558 tsb $00e2
00955b lda #$1000
00955e sta $90
009560 rts				; exit routine



009561 lda $03
009563 cmp #$0701
009566 bne $958e
009568 jsr $960e
00956b bne $957e
00956d lda #$0080
009570 trb $00e2
009573 lda #$8000
009576 sta $90
009578 lda #$0006
00957b sta $51
00957d rts				; exit routine



00957e ldx #$0400
009581 lda $01
009583 cmp #$0100
009586 bne $958b
009588 ldx #$0080
00958b stx $90
00958d rts				; exit routine



00958e cmp #$0406
009591 bne $95b6
009593 ldx #$0100
009596 jsr $961d
009599 bne $95a9
00959b ldx #$0200
00959e jsr $9613
0095a1 bne $95a9
0095a3 lda #$8000
0095a6 sta $90
0095a8 rts				; exit routine



0095a9 lda #$0400
0095ac cpx $01
0095ae bne $95b3
0095b0 lda #$0080
0095b3 sta $90
0095b5 rts				; exit routine



0095b6 jsr $961d
0095b9 beq $95d2
0095bb lda #$0000
0095be ldx $1014
0095c1 cpx $1016
0095c4 rol a
0095c5 ldx $1094
0095c8 cpx $1096
0095cb rol a
0095cc beq $95f2
0095ce lsr a
0095cf tax
0095d0 bra $95de
0095de lda #$0800
0095e1 ldy $13
0095e3 bmi $95ef
0095e5 lda #$0100
0095e8 cpx $01
0095ea bne $95ef
0095ec lda #$0080
0095ef sta $90
0095f1 rts				; exit routine



0095f2 lda #$0400
0095f5 ldx $13
0095f7 bpl $95ef
0095f9 bra $95ec
0095fb lda $102f
0095fe ora $10af
009601 and #$0003
009604 ora $1021
009607 ora $10a1
00960a and #$00ff
00960d rts				; exit routine



00960e jsr $961d
009611 bne $961c
009613 lda $1021
009616 ora $10a1
009619 and #$00ff
00961c rts				; exit routine



00961d lda $102f
009620 ora $10af
009623 and #$0003
009626 beq $9636
009628 lda $1014
00962b cmp $1016
00962e bne $9636
009630 lda $1094
009633 cmp $1096
009636 rts				; exit routine



00963d lda $701ffb
009641 asl a
009642 asl a
009643 adc $701ffb
009647 adc #$3711
00964a sta $701ffb
00964e lda $701ffc
009652 rts				; exit routine
00969f rtl
0096a0 php
0096a1 sep #$20
0096a3 pha
0096a4 lda #$20
0096a6 trb $00d8
0096a9 lda #$20
0096ab and $00d8
0096ae beq $96a9
0096b0 pla
0096b1 plp
0096b2 rtl
0096b3 php
0096b4 rep #$30
0096b6 phd
0096b7 pha
0096b8 phx
0096b9 phy
0096ba lda #$0000
0096bd tcd
0096be lda $9c
0096c0 sta $a4
0096c2 stz $9e
0096c4 ldx #$0010
0096c7 ldy $98
0096c9 asl $9e
0096cb rol $a0
0096cd asl $a4
0096cf bcc $96db
0096d1 tya
0096d2 clc
0096d3 adc $9e
0096d5 sta $9e
0096d7 bcc $96db
0096db dex
0096dc bne $96c9
0096de ply
0096df plx
0096e0 pla
0096e1 pld
0096e2 plp
0096e3 rtl



0096e4 php				; save processor status to stack
0096e5 rep #$30			; set A,X,Y => 16bit
0096e7 phd				; save direct page to stack
0096e8 pha
0096e9 phx
0096ea lda #$0000
0096ed tcd
0096ee lda $98
0096f0 sta $a4
0096f2 lda $9a
0096f4 sta $a6
0096f6 stz $a2
0096f8 ldx #$0020
0096fb asl $9e
0096fd rol $a0
0096ff asl $a4
009701 rol $a6
009703 rol $a2
009705 lda $a2
009707 bcs $9710
009709 sec
00970a sbc $9c
00970c bcs $9712
00970e bra $9716
009712 sta $a2
009714 inc $9e
009716 dex
009717 bne $96fb
009719 plx
00971a pla
00971b pld
00971c plp
00971d rtl				; exit routine



00971e php				; save processor status to stack
00971f sep #$20			; set A => 8bit
009721 sta $4203
009724 plp
009725 rtl				; exit routine



009726 php				; save processor status to stack
009727 sep #$20			; set A => 8bit
009729 sta $4206
00972c xba
00972d xba
00972e plp
00972f rtl				; exit routine



009730 php				; save processor status to stack
009731 rep #$30			; set A,X,Y => 16bit
009733 phx
009734 ldx #$ffff
009737 inx
009738 lsr a
009739 bcc $9737
00973b txa
00973c plx
00973d plp
00973e rtl				; exit routine



; ROUTINE: Text - TSB value at direct page with mask from $0097fb[] ($00:974e)
;		increments direct page by top 5 bits of A
;		fetch mask from ram $97fb[]
;		set bits on $00:directpage using mask
; parameters:
;		A - low byte: aaaaabbb
;				aaaaa - increment direct page by
;				bbb - this value is XOR'ed to flip the bits
;					invert = index to table 
;					invert * 2 = address offset
; notes:
;		always PHD before calling and PLD after
00974e jsr $97da		; call routine "Text - Increase direct page, fetch from $0097fb[] ($00:97da)"
009751 tsb $00			; use A as mask to set bits on value at $00:directpage
009753 rtl				; exit routine



; ROUTINE: Text - TRB value at direct page with mask from $0097fb[] ($00:9754)
;		increments direct page by top 5 bits of A
;		fetch mask from ram $97fb[]
;		clears bits on $00:directpage using mask
; parameters:
;		A - low byte: aaaaabbb
;				aaaaa - increment direct page by
;				bbb - this value is XOR'ed to flip the bits
;					invert = index to table 
;					invert * 2 = address offset
; notes:
;		always PHD before calling and PLD after
009754 jsr $97da		; call routine "Text - Increase direct page, fetch from $0097fb[] ($00:97da)"
009757 trb $00			; use A as mask to clear bits on value at $00:directpage
009759 rtl				; exit routine









; ROUTINE: Text - AND value at direct page with mask from $0097fb[] ($00:975a)
;		increments direct page by top 5 bits of A
;		fetch value from ram $97fb[] AND v@ $00:D
; parameters:
;		A - low byte: aaaaabbb
;				aaaaa - increment direct page by
;				bbb - this value is XOR'ed to flip the bits
;					invert = index to table 
;					invert * 2 = address offset
;			known ex: $0080 so and/eor/<<1 means $000e and load from $9809 = $0080, bbb = 000 so inverted is 111, index is $07, address offset = $0e
; notes:
;		always PHD before calling and PLD after
00975a jsr $97da		; call routine "Text - Increase direct page, fetch from $0097fb[] ($00:97da)"
00975d and $00			; 
00975f rtl				; exit routine





009760 phd				; save direct page to stack
009761 pea $0ea8
009764 pld
009765 jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
009769 pld
00976a rtl				; exit routine



00976b phd				; save direct page to stack
00976c pea $0ea8
00976f pld
009770 jsl $009754		; call routine "Text - TRB value at direct page with mask from $0097fb[] ($00:9754)"
009774 pld
009775 rtl				; exit routine
009776 phd
009777 pea $0ea8
00977a pld
00977b jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
00977f pld
009780 inc
009781 dec
009782 rtl



009783 php				; save processor status to stack
009784 phd				; save direct page to stack
009785 rep #$30			; set A,X,Y => 16bit
009787 pha
009788 lda #$005e
00978b tcd
00978c lda $701ffe
009790 asl a
009791 asl a
009792 adc $701ffe
009796 adc #$3711
009799 adc $0e96
00979c sta $701ffe
0097a0 sep #$20			; set A => 8bit
0097a2 xba
0097a3 sta $4b
0097a5 sta $4204
0097a8 stz $4205
0097ab lda $4a
0097ad beq $97b8
0097af jsl $009726
0097b3 lda $4216
0097b6 sta $4b
0097b8 rep #$30			; set A,X,Y => 16bit
0097ba pla
0097bb pld
0097bc plp
0097bd rtl				; exit routine



0097be php				; save processor status to stack
0097bf phb				; save databank to stack
0097c0 rep #$30			; set A,X,Y => 16bit
0097c2 phy
0097c3 and #$00ff
0097c6 asl a
0097c7 tay
0097c8 lda $06,s
0097ca pha
0097cb plb
0097cc plb
0097cd lda ($08,s),y
0097cf tay
0097d0 lda $05,s
0097d2 sta $08,s
0097d4 tya
0097d5 sta $05,s
0097d7 ply
0097d8 plb
0097d9 rti



; ROUTINE: Text - Increase direct page, fetch from $0097fb[] ($00:97da)
;		increments direct page by top 5 bits of A
;		fetch value from ram $97fb[]
; parameters:
;		A - low byte: aaaaabbb
;				aaaaa - increment direct page by
;				bbb - this value is XOR'ed to flip the bits
;					invert = index to table 
;					invert * 2 = address offset
;			known ex: $0080 so and/eor/<<1 means $000e and load from $9809 = $0080, bbb = 000 so inverted is 111, index is $07, address offset = $0e
; returns:
;		A - value from $97fb[]
0097da php				; save processor status to stack
0097db rep #$30			; set A,X,Y => 16bit
0097dd and #$00ff		; ignore upper byte of A
0097e0 pha				; save A to stack
0097e1 lsr a			;
0097e2 lsr a			; A >> 3
0097e3 lsr a			;
						; add A to direct page
0097e4 phd					; get dp
0097e5 clc					; clear carry (don't add 1)
0097e6 adc $01,s			; value at stack+$01 is dp
0097e8 tcd					; set dp
0097e9 pla				; throw away temp value (old dp)
0097ea pla				; restore A from stack
0097eb and #$0007		; only keep bottom 3 bits
0097ee eor #$0007		; invert bottom 3 bits
0097f1 plp				; restore processor status from stack
0097f2 phx				; save X to stack
0097f3 asl a			; A << 1
0097f4 tax				; copy A to X
0097f5 lda $0097fb,x	; 
0097f9 plx				; restore X from stack
0097fa rts				; exit routine



00981b rep #$30
00981d ply
00981e plx
00981f pld
009820 pla
009821 plb
009822 plp
009823 rts
00985d clc
00985e sbc #$003f
009861 bcc $9874
009863 pha
009864 jsr $9891
009867 txa
009868 adc #$003f
00986b tax
00986c tya
00986d adc #$0040
009870 tay
009871 pla
009872 bra $985e
009874 adc #$0040
009877 pha
009878 asl a
009879 adc $01,s
00987b eor #$ffff
00987e adc #$9951
009881 pea $9885
009884 pha
009885 rts				; exit routine



009886 clc
009887 txa
009888 adc $01,s
00988a tax
00988b tya
00988c adc $01,s
00988e tay
00988f pla
009890 rts				; exit routine
009891 lda $003e,x
009894 sta $003e,y
009897 lda $003c,x
00989a sta $003c,y
00989d lda $003a,x
0098a0 sta $003a,y
0098a3 lda $0038,x
0098a6 sta $0038,y
0098a9 lda $0036,x
0098ac sta $0036,y
0098af lda $0034,x
0098b2 sta $0034,y
0098b5 lda $0032,x
0098b8 sta $0032,y
0098bb lda $0030,x
0098be sta $0030,y
0098c1 lda $002e,x
0098c4 sta $002e,y
0098c7 lda $002c,x
0098ca sta $002c,y
0098cd lda $002a,x
0098d0 sta $002a,y
0098d3 lda $0028,x
0098d6 sta $0028,y
0098d9 lda $0026,x
0098dc sta $0026,y
0098df lda $0024,x
0098e2 sta $0024,y
0098e5 lda $0022,x
0098e8 sta $0022,y
0098eb lda $0020,x
0098ee sta $0020,y
0098f1 lda $001e,x
0098f4 sta $001e,y
0098f7 lda $001c,x
0098fa sta $001c,y
0098fd lda $001a,x
009900 sta $001a,y
009903 lda $0018,x
009906 sta $0018,y
009909 lda $0016,x
00990c sta $0016,y
00990f lda $0014,x
009912 sta $0014,y
009915 lda $0012,x
009918 sta $0012,y
00991b lda $0010,x
00991e sta $0010,y
009921 lda $000e,x
009924 sta $000e,y
009927 lda $000c,x
00992a sta $000c,y
00992d lda $000a,x
009930 sta $000a,y
009933 lda $0008,x
009936 sta $0008,y
009939 lda $0006,x
00993c sta $0006,y
00993f lda $0004,x
009942 sta $0004,y
009945 lda $0002,x
009948 sta $0002,y
00994b lda $0000,x
00994e sta $0000,y
009951 rts



009994 jsr $9998
009997 rtl				; exit routine
009998 phx
009999 cmp #$0040
00999c bcc $99b8
00999e pha
00999f lsr a
0099a0 lsr a
0099a1 lsr a
0099a2 lsr a
0099a3 lsr a
0099a4 lsr a
0099a5 tax
0099a6 clc
0099a7 lda $03,s
0099a9 jsr $99bd
0099ac tya
0099ad adc #$0040
0099b0 tay
0099b1 dex
0099b2 bne $99a7
0099b4 pla
0099b5 and #$003f
0099b8 tax
0099b9 pla
0099ba jmp ($9a1e,x)
0099bd sta $003e,y
0099c0 sta $003c,y
0099c3 sta $003a,y
0099c6 sta $0038,y
0099c9 sta $0036,y
0099cc sta $0034,y
0099cf sta $0032,y
0099d2 sta $0030,y
0099d5 sta $002e,y
0099d8 sta $002c,y
0099db sta $002a,y
0099de sta $0028,y
0099e1 sta $0026,y
0099e4 sta $0024,y
0099e7 sta $0022,y
0099ea sta $0020,y
0099ed sta $001e,y
0099f0 sta $001c,y
0099f3 sta $001a,y
0099f6 sta $0018,y
0099f9 sta $0016,y
0099fc sta $0014,y
0099ff sta $0012,y
009a02 sta $0010,y
009a05 sta $000e,y
009a08 sta $000c,y
009a0b sta $000a,y
009a0e sta $0008,y
009a11 sta $0006,y
009a14 sta $0004,y
009a17 sta $0002,y
009a1a sta $0000,y
009a1d rts



009a60 php				; save processor status to stack
009a61 phb				; save databank to stack
009a62 phd				; save direct page to stack
009a63 rep #$30			; set A,X,Y => 16bit
009a65 pha
009a66 lda #$0000
009a69 tcd
009a6a lda #$f862
009a6d sta $17
009a6f sep #$20			; set A => 8bit
009a71 lda #$03
009a73 sta $19
009a75 jsr $9d75
009a78 rep #$30			; set A,X,Y => 16bit
009a7a pla
009a7b pld
009a7c plb
009a7d plp
009a7e rtl				; exit routine
009aec php
009aed phd
009aee pea $0000
009af1 pld
009af2 rep #$30
009af4 phx
009af5 ldx #$9aff
009af8 jsr $9bc4



009afb plx
009afc pld
009afd plp
009afe rtl				; exit routine



009b02 php				; save processor status to stack
009b03 phd				; save direct page to stack
009b04 phb				; save databank to stack
009b05 sep #$20			; set A => 8bit
009b07 rep #$10			; set X,Y => 16bit
009b09 pha
009b0a phx
009b0b pea $0000
009b0e pld
009b0f jsl $0c8000
009b13 jsl $0096a0
009b17 pei ($1d)
009b19 lda $27
009b1b pha
009b1c jsl $009b2f
009b20 jsr $a342
009b23 pla
009b24 sta $27
009b26 plx
009b27 stx $1d
009b29 plx
009b2a pla
009b2b plb
009b2c pld
009b2d plp
009b2e rtl				; exit routine



009b2f php				; save processor status to stack
009b30 phd				; save direct page to stack
009b31 pea $0000
009b34 pld
009b35 rep #$30			; set A,X,Y => 16bit
009b37 phx
009b38 ldx #$9b42
009b3b jsr $9bc4
009b3e plx
009b3f pld
009b40 plp
009b41 rtl				; exit routine



009b45 php				; save processor status to stack
009b46 phd				; save direct page to stack
009b47 rep #$30			; set A,X,Y => 16bit
009b49 lda #$0000
009b4c tcd
009b4d ldx #$9b56
009b50 jsr $9bc4
009b53 pld
009b54 plp
009b55 rtl				; exit routine

;CURRENT
; ROUTINE: Text -  [bank $03d636] ($00:9b59)
;		found by breaking on first character of string to load
;		
; parameters:
;		ram $20-$21 - index of string in bank
; uses:
;		ram $4f-$50 - set to copy of index
; returns:
;		ram $17-$19 - long address of start of string
009b59 php				; save processor status to stack
009b5a phd				; save direct page to stack
009b5b rep #$30			; set A,X,Y => 16bit
009b5d lda #$0000		; clear A
009b60 tcd				; clear direct page
009b61 lda $20			; get string index from $000020
009b63 sta $4f			; put index in $00004f
009b65 jsr $9b8a		; call routine "Text - Get string address by index [bank $03d636] ($00:9b8a)"
009b68 lda [$17]		; load 2 bytes from address in $000017
009b6a and #$00ff		; ignore second byte
009b6d cmp #$0004		; is A.low == $04?
009b70 beq $9b78
009b72 ldx #$9b9d		; x is $9b9d
009b75 jsr $9bc4		; call routine "Text -  ($00:9bc4)"
009b78 jsr $9b8a
009b7b jsr $9d75
009b7e jsr $9ba3
009b81 ldx #$9ba0
009b84 jsr $9bc4
009b87 pld				; restore direct page from stack
009b88 plp
009b89 rtl				; exit routine


; ROUTINE: Text - Get string address by index [bank $03d636] ($00:9b8a)
;		gets the long address of the requested string
;		string bank = $03d636 ($01d636 in rom)
;		(index * 2) + $03d636 => address of pointer to string
;		pointer is $03:value
; parameters:
;		ram $20-$21 - index of string in bank
; returns:
;		ram $17-$19 - long address of start of string
009b8a sep #$20			; set A => 8bit
009b8c lda #$03			;
009b8e sta $19			; $03 -> $000019, high byte of string offset address
009b90 rep #$30			; set A,X,Y => 16bit
009b92 lda $20			; load value at $000020
009b94 asl a			; shift left (muliply by 2)
009b95 tax				; copy A to X
009b96 lda $03d636,x	; load lower 16 bits of address to read string from
009b9a sta $17			; store lower 2 bytes into $17-$18
						; string address is now at $17-$19
009b9c rts				; exit routine



009ba3 rts				; exit routine



009ba4 php				; save processor status to stack
009ba5 phd				; save direct page to stack
009ba6 rep #$30			; set A,X,Y => 16bit
009ba8 lda #$0000
009bab tcd
009bac sep #$20			; set A => 8bit
009bae lda #$03
009bb0 sta $19
009bb2 rep #$30			; set A,X,Y => 16bit
009bb4 lda $20
009bb6 asl a
009bb7 tax
009bb8 lda $03bbd2,x
009bbc sta $17
009bbe jsr $9d75
009bc1 pld
009bc2 plp				; restore processor status to stack
009bc3 rtl				; exit routine



; ROUTINE: Text -  ($00:9bc4)
; parameters:
;		X - source address $00:X
;			known example used value: $9b9d
; unknown if used yet:
;		??? ram $4f-$50 - index of string in bank
; locals?:
;		ram $17-$19 - address of?
;			known ex: $03a831 (rom $01a831)
; 
; Copy 3 bytes from $00:X to $00:0017
009bc4 php				; save processor status to stack
009bc5 rep #$30			; set A,X,Y => 16bit
009bc7 phy				; push Y to stack
009bc8 pha				; push A to stack
009bc9 ldy #$0017		; destination address = $00:0017
009bcc lda #$0002		; copying three bytes
009bcf mvn $00,$00		; copy A bytes
009bd2 pla				; restore A from stack
009bd3 ply				; restore Y from stack
009bd4 plp				; restore processor status to stack
009bd5 jmp $9d75		; Jump to "Text -  ($00:009d75)"



009bd8 lda #$0004
009bdb and $00d8
009bde beq $9bec
009be0 lda #$0004
009be3 trb $00d8
009be6 lda #$00c8
009be9 trb $0111
009bec rts				; exit routine



009bed ldx #$9c87
009bf0 ldy #$5007
009bf3 lda #$0022
009bf6 mvn $00,$7f
009bf9 lda $000e9c
009bfd sta $5011
009c00 sta $5014
009c03 sta $501a
009c06 jsr $9c52
009c09 sta $5017
009c0c lda $07800c
009c10 sta $501e
009c13 sta $5021
009c16 sta $5027
009c19 jsr $9c52
009c1c sta $5024
009c1f phk
009c20 plb
009c21 sep #$20			; set A => 8bit
009c23 lda #$7f
009c25 sta $4334
009c28 sta $4364
009c2b sta $4374
009c2e ldx #$2100
009c31 stx $4330
009c34 ldx #$2202
009c37 stx $4360
009c3a stx $4370
009c3d ldx #$5007
009c40 stx $4332
009c43 ldx #$5010
009c46 stx $4362
009c49 ldx #$501d
009c4c stx $4372
009c4f rep #$30			; set A,X,Y => 16bit
009c51 rts				; exit routine



009c52 pha
009c53 sec
009c54 and #$7c00
009c57 sbc #$3000
009c5a bcs $9c60
009c60 pha
009c61 lda $03,s
009c63 and #$03e0
009c66 sbc #$0180
009c69 bcs $9c6f
009c6b lda #$0000
009c6e sec
009c6f ora $01,s
009c71 sta $01,s
009c73 lda $03,s
009c75 and #$001f
009c78 sbc #$000c
009c7b bcs $9c80
009c7d lda #$0000
009c80 ora $01,s
009c82 sta $03,s
009c84 pla
009c85 pla
009c86 rts				; exit routine



009caa sep #$20			; set A => 8bit
009cac ldx #$01ad
009caf lda #$20
009cb1 and $00e0
009cb4 bne $9cb9
009cb6 ldx #$016f
009cb9 lda $0013,x
009cbc sta $7f500b
009cc0 sta $7f5016
009cc4 sta $7f5023
009cc8 lda $0012,x
009ccb dec
009ccc lsr a
009ccd sta $7f5009
009cd1 sta $7f5013
009cd5 sta $7f5020
009cd9 adc #$00
009cdb sta $7f5007
009cdf sta $7f5010
009ce3 sta $7f501d
009ce7 lda #$04
009ce9 tsb $00d8
009cec rep #$30			; set A,X,Y => 16bit
009cee rts				; exit routine



009cef rts				; exit routine



009cf0 php				; save processor status to stack
009cf1 rep #$30			; set A,X,Y => 16bit
009cf3 phb				; save databank to stack
009cf4 pha
009cf5 phd				; save direct page to stack
009cf6 phx
009cf7 phy
009cf8 ldx #$0017
009cfb lda $7e3367
009cff tay
009d00 lda #$0025
009d03 mvn $00,$7e
009d06 ldx #$00d0
009d09 lda #$0000
009d0c mvn $00,$7e
009d0f tya
009d10 cmp #$35d9
009d13 bcc $9d18
009d18 sta $7e3367
009d1c jmp $981b
009d21 php				; save processor status to stack
009d22 rep #$30			; set A,X,Y => 16bit
009d24 phb				; save databank to stack
009d25 pha
009d26 phd				; save direct page to stack
009d27 phx
009d28 phy
009d29 lda $7e3367
009d2d sec
009d2e sbc #$0027
009d31 sta $7e3367
009d35 tax
009d36 ldy #$0017
009d39 lda #$0025
009d3c mvn $7e,$00
009d3f ldy #$00d0
009d42 lda #$0000
009d45 mvn $7e,$00
009d48 jmp $981b
009d4b phy
009d4c stx $1a
009d4e txy
009d4f tax
009d50 jsr $b49e
009d53 clc
009d54 tya
009d55 adc $01,s
009d57 sta $1a
009d59 jsr $b4a7
009d5c lda $1c
009d5e and #$00ff
009d61 pha
009d62 plb
009d63 lda $02,s
009d65 jsr $9998
009d68 plb
009d69 pla
009d6a rts
009d6b phd				; save direct page to stack
009d6c pea $0000
009d6f pld
009d70 jsr $9d75
009d73 pld
009d74 rtl				; exit routine



; JUMP: Text -  ($00:009d75)
; parameters:
;		ram $db-$dc - not sure???
;		ram $17-$19 - address of?
;			known ex: $03a831 (rom $01a831)
; unknown if used yet:
;		??? ram $4f-$50 - index of string in bank
; locals?:
009d75 php				; save processor status to stack
009d76 rep #$30			; set A,X,Y => 16bit
009d78 phb				; save databank to stack
009d79 pha				; save A to stack
009d7a phd				; save direct page to stack
009d7b phx				; save X to stack
009d7c phy				; save Y to stack
009d7d phk				; copy program bank
009d7e plb					; to databank
009d7f lda #$0008		; set mask (bit 3)
009d82 and $00db		; check if bit 3 in $00:00db is set
009d85 beq $9da2		; branch if clear
009d87 lda #$0010
009d8a and $00d0
009d8d bne $9d9a
009d8f jsr $9dbd
009d92 lda $17
009d94 cmp $3d
009d96 bne $9d8f
009d98 bra $9dba



; MISSING: $009d75-$009d99 ($24 bytes)



009d9a jsr $e05a
009d9d bra $9dba

; BRANCH: Text - 
009d9f jsr $9dbd		; call routine "($00:9dbd)"

; BRANCH: Text -  ($00:9da2)
; parameters:
;		ram $d0-$d1 - ???
;			known ex: $0040
009da2 lda $00d0		; get value from $0000d0
009da5 bit #$0090		; test if bit 4 or 7 is set
009da8 beq $9d9f		; branch if clear
009daa bit #$0080		; test if bit7 is set
009dad bne $9db4


009daf jsr $e05a
009db2 bra $9da2
009db4 lda #$0080
009db7 trb $00d0
009dba jmp $981b

; ROUTINE: Text -  ($00:9dbd)
; parameters:
;		ram $17-$19 - address of?
;			known ex: $03a831 (rom $01a831) (value @ is $fe05)
; direct page is only known as $0000 so far
009dbd lda [$17]		; load 2 bytes from address in $000017
009dbf inc $17			; increment $000017
009dc1 and #$00ff		; ignore high byte
009dc4 cmp #$0080		; is A < $80 ?
009dc7 bcc $9dd2		; then branch to $9dd2
009dc9 eor $1d
009dcb sta [$1a]
009dcd inc $1a
009dcf inc $1a
009dd1 rts



; BRANCH: Text -  ($00:9dd2)
; parameters:
;		A - index to jump table
; uses:
;		ram $9e0e[] - jump table
;			known ex: index = $05, offset = index*2 = $0A, address = $9e18, value = $a37f
;				$aeb5, $aeda, 9e3c, $a07d
009dd2 cmp #$0030		; is A >= $30 ?
; TODO: follow branch path
009dd5 bcs $9ddf
009dd7 asl a			; A << 1
009dd8 tax				; copy A to X
009dd9 jsr ($9e0e,x)	; get value @ ($9e0e + x), call routine at $00:value
009ddc rep #$30			; set A,X,Y => 16bit
009dde rts				; exit routine



009ddf ldx #$0000		; clear X
009de2 sbc #$0030
009de5 beq $9df9
009de7 tay
009de8 lda $03ba86,x
009dec and #$00ff
009def sta $64
009df1 txa
009df2 sec
009df3 adc $64
009df5 tax
009df6 dey
009df7 bne $9de8
009df9 txa
009dfa clc
009dfb adc #$ba87
009dfe tay
009dff sep #$20			; set A => 8bit
009e01 lda #$03
009e03 xba
009e04 lda $03ba86,x
009e08 tyx
009e09 rep #$30			; set A,X,Y => 16bit
009e0b jmp $a7f9
00a06e lda #$0ea6
00a071 sta $2e
00a073 rts				; exit routine



00a074 lda [$17]
00a076 inc $17
00a078 inc $17
00a07a sta $2e
00a07c rts



; ROUTINE: Text - Store byte at address in $17 to $1e ($00:a07d)
; parameters:
;		ram $17 - long address of pointer to value
00a07d lda [$17]		; $17 holds pointer, ge
00a07f inc $17			; increment address
00a081 and #$00ff		; ignore high byte
00a084 sep #$20			; set A => 8bit
00a086 sta $1e			; store A.low in $1e
00a088 rts				; exit routine



00a089 lda [$17]
00a08b inc $17
00a08d inc $17
00a08f sta $3f
00a091 lda [$17]
00a093 inc $17
00a095 and #$00ff
00a098 sep #$20			; set A => 8bit
00a09a sta $41
00a09c rts				; exit routine
00a09d lda [$17]
00a09f inc $17
00a0a1 and #$00ff
00a0a4 sep #$20
00a0a6 sta $27
00a0a8 rts



00a0a9 lda [$17]
00a0ab inc $17
00a0ad and #$00ff
00a0b0 sep #$20			; set A => 8bit
00a0b2 rep #$10			; set X,Y => 16bit
00a0b4 sta $1d
00a0b6 rts				; exit routine
00a0b7 lda [$17]
00a0b9 inc $17
00a0bb inc $17
00a0bd sta $25
00a0bf rts



00a0c0 pei ($9e)
00a0c2 pei ($a0)
00a0c4 lda [$17]
00a0c6 inc $17
00a0c8 and #$00ff
00a0cb sta $9e
00a0cd stz $a0
00a0cf lda #$0003
00a0d2 ldx #$82bb
00a0d5 jsr $a71c
00a0d8 plx
00a0d9 stx $a0
00a0db plx
00a0dc stx $9e
00a0de rts				; exit routine



00a0fe pei ($9e)
00a100 pei ($a0)
00a102 lda [$17]
00a104 inc $17
00a106 and #$00ff
00a109 sta $9e
00a10b stz $a0
00a10d lda #$0003
00a110 ldx #$8383
00a113 jsr $a71c
00a116 plx
00a117 stx $a0
00a119 plx
00a11a stx $9e
00a11c rts				; exit routine
00a11d lda [$17]
00a11f inc $17
00a121 inc $17
00a123 sta $28
00a125 lda [$17]
00a127 inc $17
00a129 inc $17
00a12b sta $2a
00a12d rts
00a12e lda [$17]
00a130 inc $17
00a132 inc $17
00a134 sep #$20
00a136 sta $2c
00a138 xba
00a139 sta $2d
00a13b rts



00a13c lda [$17]
00a13e inc $17
00a140 and #$00ff
00a143 sta $9e
00a145 stz $a0
00a147 lda #$0003
00a14a ldx #$a7f6
00a14d jmp $a71c
00a150 sep #$20			; set A => 8bit
00a152 lda #$03
00a154 sta $19
00a156 ldx #$aef8
00a159 stx $17
00a15b rts				; exit routine



00a168 lda [$17]
00a16a inc $17
00a16c and #$00ff
00a16f sep #$20			; set A => 8bit
00a171 sta $4f
00a173 rep #$30			; set A,X,Y => 16bit
00a175 lda #$0003
00a178 ldx #$a831
00a17b jmp $a71c
00a17e lda [$17]
00a180 inc $17
00a182 and #$00ff
00a185 sep #$20			; set A => 8bit
00a187 sta $4f
00a189 rep #$30			; set A,X,Y => 16bit
00a18b lda #$0003
00a18e ldx #$a895
00a191 jmp $a71c
00a194 jsr $a1ab
00a197 stz $9f
00a199 stz $a0
00a19b rts				; exit routine



00a19c jsr $a1ab
00a19f stz $a0
00a1a1 rts				; exit routine



00a1ab lda [$17]
00a1ad inc $17
00a1af inc $17
00a1b1 tax
00a1b2 lda [$17]
00a1b4 inc $17
00a1b6 and #$00ff
00a1b9 clc
00a1ba adc $0000,x
00a1bd tay
00a1be lda $0002,x
00a1c1 and #$00ff
00a1c4 pha
00a1c5 plb
00a1c6 lda $0000,y
00a1c9 tax
00a1ca lda $0002,y
00a1cd plb
00a1ce stx $9e
00a1d0 rts				; exit routine



00a1d1 lda [$17]
00a1d3 inc $17
00a1d5 inc $17
00a1d7 tay
00a1d8 sep #$20			; set A => 8bit
00a1da lda [$17]
00a1dc xba
00a1dd lda [$17]
00a1df rep #$30			; set A,X,Y => 16bit
00a1e1 inc $17
00a1e3 tax
00a1e4 lda [$17]
00a1e6 inc $17
00a1e8 and #$00ff
00a1eb jmp $9998
00a1ee jsl $0c8000
00a1f2 rts				; exit routine



00a1f3 jsl $0096a0
00a1f7 rts				; exit routine



00a1f8 jsr $a220
00a1fb sep #$20			; set A => 8bit
00a1fd ldx $101b
00a200 stx $1018
00a203 lda $101d
00a206 sta $101a
00a209 ldx $109b
00a20c stx $1098
00a20f lda $109d
00a212 sta $109a
00a215 rts				; exit routine



00a216 jsr $a1f8
00a219 stz $1021
00a21c stz $10a1
00a21f rts				; exit routine



00a220 ldx $1016
00a223 stx $1014
00a226 ldx $1096
00a229 stx $1094
00a22c lda #$0003
00a22f trb $102f
00a232 trb $10af
00a235 rts				; exit routine



00a236 lda #$0080
00a239 and $10a0
00a23c php				; save processor status to stack
00a23d lda [$17]
00a23f inc $17
00a241 and #$00ff
00a244 sep #$30			; set A,X,Y => 8bit
00a246 sta $0e92
00a249 sta $4202
00a24c lda #$50
00a24e jsl $00971e
00a252 rep #$30			; set A,X,Y => 16bit
00a254 clc
00a255 lda #$d0b0
00a258 adc $4216
00a25b tax
00a25c ldy #$1080
00a25f lda #$0050
00a262 pea $000c
00a265 plb
00a266 jsr $985d
00a269 plb
00a26a plp
00a26b bne $a273
00a273 rts				; exit routine



00a274 lda #$0003
00a277 ldx #$8457
00a27a jsr $a71c
00a27d rep #$30			; set A,X,Y => 16bit
00a27f lda [$17]
00a281 inc $17
00a283 inc $17
00a285 sep #$20			; set A => 8bit
00a287 sta $0513
00a28a xba
00a28b sta $0a9c
00a28e ldx $17
00a290 lda $19
00a292 jsl $00d0a0
00a296 sta $19
00a298 stx $17
00a29a rts				; exit routine



00a29b lda [$17]
00a29d inc $17
00a29f and #$00ff
00a2a2 jsl $0096a0
00a2a6 dec
00a2a7 bne $a2a2
00a2a9 rts				; exit routine



00a306 lda [$17]
00a308 inc $17
00a30a and #$00ff
00a30d dec
00a30e cmp $9e
00a310 php				; save processor status to stack
00a311 inc
00a312 asl a
00a313 adc $17
00a315 tay
00a316 plp
00a317 bcc $a32f
00a319 lda $9e
00a31b asl a
00a31c adc $17
00a31e sta $17
00a320 lda [$17]
00a322 sta $17
00a324 sep #$20			; set A => 8bit
00a326 lda $19
00a328 jsr $9d75
00a32b sta $19
00a32d rep #$30			; set A,X,Y => 16bit
00a32f sty $17
00a331 rts				; exit routine
00a342 php
00a343 rep #$30
00a345 phb
00a346 pha
00a347 phd
00a348 phx
00a349 phy
00a34a lda $46
00a34c beq $a375
00a34e lda $40
00a350 sta $01ee
00a353 lda $44
00a355 sta $01ed
00a358 sec
00a359 sbc $3f
00a35b lsr a
00a35c adc $42
00a35e sta $48
00a360 sec
00a361 lda $46
00a363 sbc $44
00a365 sta $01eb
00a368 lda #$00e0
00a36b tsb $00d2
00a36e lda #$ffff
00a371 sta $44
00a373 stz $46
00a375 jmp $981b
00a378 lda #$0080
00a37b tsb $00d0
00a37e rts



; ROUTINE: Text -  ($00:a37f)
; parameters:
;		ram $17 - long address of pointer to index to jump table
; uses:
;		ram $9e6e[] - jump table
;			known ex: index = $fe, offset = index*2 = $1fc, address = $a06a, value = $a760
00a37f lda [$17]		; $17 holds pointer, get value at pointer
00a381 inc $17			; increment address
00a383 and #$00ff		; ignore high byte
00a386 asl a			; A << 1
00a387 tax				; copy A to X
00a388 jmp ($9e6e,x)	; Jump to $00:(value at ($9e6e + x))



00a38b lda #$0080
00a38e tsb $00d8
00a391 jsl $0c8000
00a395 lda #$0008
00a398 trb $00d4
00a39b rts				; exit routine
00a39c lda #$0040
00a39f and $00d0
00a3a2 beq $a3a5
00a3a4 rts



00a3a5 lda #$00ff
00a3a8 jmp $9dc9
00a3ab jsl $0c8000
00a3af lda #$0020
00a3b2 and $00d0
00a3b5 bne $a3c6
00a3b7 lda [$17]
00a3b9 inc $17
00a3bb inc $17
00a3bd jsl $0096a0
00a3c1 bit $94
00a3c3 beq $a3bd
00a3c5 rts				; exit routine



00a3c6 lda [$17]
00a3c8 inc $17
00a3ca inc $17
00a3cc jsl $0096a0
00a3d0 bit $07
00a3d2 beq $a3cc
00a3d4 rts				; exit routine



00a3d5 jsr $b1c3
00a3d8 bcc $a401
00a3da beq $a401
00a3dc bra $a406
00a3de jsr $b1c3
00a3e1 bcc $a401
00a3e3 bra $a406
00a3e5 jsr $b1c3
00a3e8 bcs $a401
00a3ea bra $a406
00a3ec jsr $b1c3
00a3ef bcc $a406
00a3f5 jsr $b1c3
00a3f8 bne $a401
00a3fa bra $a406
00a3fc jsr $b1c3
00a3ff bne $a406
00a401 inc $17
00a403 inc $17
00a405 rts				; exit routine
00a406 lda [$17]
00a408 sta $17
00a40a rts



00a40b jsr $b1d6
00a40e bcc $a437
00a410 beq $a437
00a412 bra $a43c
00a414 jsr $b1d6
00a417 bcc $a437
00a419 bra $a43c
00a41b jsr $b1d6
00a41e bcs $a437
00a420 bra $a43c
00a42b jsr $b1d6
00a42e bne $a437
00a430 bra $a43c
00a437 inc $17
00a439 inc $17
00a43b rts				; exit routine



00a43c lda [$17]
00a43e sta $17
00a440 rts				; exit routine



00a458 jsr $b1e8
00a45b bcc $a472
00a472 lda [$17]
00a474 sta $17
00a476 rts				; exit routine



00a497 jsr $b204
00a49a bne $a4a3
00a49c bra $a4a8
00a49e jsr $b204
00a4a1 bne $a4a8
00a4a3 inc $17
00a4a5 inc $17
00a4a7 rts				; exit routine



00a4a8 lda [$17]
00a4aa sta $17
00a4ac rts				; exit routine
00a4bd jsr $b21d
00a4c0 bcs $a4d9



00a4cd jsr $b21d
00a4d0 bne $a4d9
00a4d2 bra $a4de
00a4d4 jsr $b21d
00a4d7 bne $a4de
00a4d9 inc $17
00a4db inc $17
00a4dd rts				; exit routine



00a4de lda [$17]
00a4e0 sta $17
00a4e2 rts				; exit routine



00a4ec jsr $b22f
00a4ef bcc $a50f
00a4f1 bra $a514
00a514 lda [$17]
00a516 sta $17
00a518 rts				; exit routine



; BRANCH: Text - Replace pointer in $17 with its value and exit routine ($00:a519)
00a519 lda [$17]		; fetch value at pointer in $17
00a51b sta $17			; store address in $17
00a51d rts				; exit routine



00a51e lda [$17]
00a520 inc $17
00a522 inc $17
00a524 tax
00a525 sep #$20			; set A => 8bit
00a527 lda [$17]
00a529 sta $19
00a52b stx $17
00a52d rts				; exit routine
00a539 lda [$17]
00a53b inc $17
00a53d and #$00ff
00a540 phd
00a541 pea $00d0
00a544 pld
00a545 jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
00a549 pld
00a54a inc
00a54b dec
00a54c bra $a56e



; ROUTINE: Text -  ($00:a54e)
;		is in $9e6e[] jump table
; parameters:
;		ram $17 - long address of pointer to index
00a54e lda [$17]		; $17 holds pointer, get value at pointer
00a550 inc $17			; increment address
00a552 and #$00ff		; ignore high byte
00a555 phd				; save direct page to stack
00a556 pea $00d0		; 
00a559 pld				; set direct page to $000d
00a55a jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
00a55e pld				; restore direct page from stack
00a55f inc				; inc/dec is same as CMP #$00
00a560 dec				; check if A is $0000
00a561 bra $a57d		; branch to ($00:a57d)



00a563 lda [$17]
00a565 inc $17
00a567 and #$00ff
00a56a jsl $009776
00a56e bne $a519		; branch to "Text - Replace pointer in $17 with its value and exit routine ($00:a519)"
00a570 bra $a597
00a572 lda [$17]
00a574 inc $17
00a576 and #$00ff
00a579 jsl $009776



; BRANCH: Text -  ($00:a57d)
;		basically an if statement
; TODO: follow paths
00a57d beq $a519		; when carry clear, branch to "Text - Replace pointer in $17 with its value and exit routine ($00:a519)"
00a57f bra $a597		; otherwise branch to $00:a597)



00a581 jsr $b1a1
00a584 bra $a56e
00a586 jsr $b1a1
00a589 bra $a57d
00a58b jsr $b1b4
00a58e bne $a519		; branch to "Text - Replace pointer in $17 with its value and exit routine ($00:a519)"
00a590 bra $a597
00a592 jsr $b1b4
00a595 beq $a519		; branch to "Text - Replace pointer in $17 with its value and exit routine ($00:a519)"
00a597 inc $17
00a599 inc $17
00a59b rts
00a5bc jsr $b1c3
00a5bf bne $a5c8
00a5c3 jsr $b1c3
00a5c6 bne $a5cd
00a5c8 inc $17
00a5ca inc $17
00a5cc rts				; exit routine



00a5cd lda [$17]
00a5cf inc $17
00a5d1 inc $17
00a5d3 tax
00a5d4 lda $19
00a5d6 jmp $a71c
00a718 ldx $9e
00a71a lda $a0
00a71c sep #$20
00a71e xba
00a71f lda $19
00a721 ldy $17
00a723 xba
00a724 sta $19
00a726 stx $17
00a728 lda #$08
00a72a and $00db
00a72d php
00a72e lda #$08
00a730 trb $00db
00a733 jsr $9d75
00a736 plp
00a737 beq $a73e
00a739 lda #$08
00a73b tsb $00db
00a73e xba
00a73f sta $19
00a741 sty $17
00a743 rts
00a744 lda [$17]
00a746 inc $17
00a748 inc $17
00a74a jsr $9cf0
00a74d sta $17
00a74f jsr $9d75
00a752 jmp $9d21
00a755 lda [$17]
00a757 inc $17
00a759 inc $17
00a75b tax
00a75c lda $19
00a75e bra $a71c



; ROUTINE: Text -  ($00:a760)
;		is in $9e0e[] jump table
; parameters:
;		ram $17 - long address of pointer to index to jump table
00a760 lda [$17]		; $17 holds pointer, get value at pointer
00a762 inc $17			; increment address
00a764 and #$00ff		; ignore high byte
00a767 phd				; save direct page to stack
00a768 pea $00d0		; 
00a76b pld				; set direct page to $000d
00a76c jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
00a770 pld				; restore direct page from stack
00a771 inc				; inc/dec is same as CMP #$00
00a772 dec				; check if A is $0000
00a773 bne $a755		; not zero, so branch -- TODO: follow this path
00a775 bra $a7c6		; branch to ($00:a7c6)



00a777 lda [$17]
00a779 inc $17
00a77b and #$00ff
00a77e phd				; save direct page to stack
00a77f pea $00d0
00a782 pld
00a783 jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
00a787 pld
00a788 inc
00a789 dec
00a78a beq $a755
00a79d lda [$17]
00a79f inc $17
00a7a1 and #$00ff
00a7a4 jsl $009776
00a7a8 beq $a755

; BRANCH: Text -  ($00:a7c6)
00a7c6 inc $17			; 
00a7c8 inc $17			; increase address @ $00:(direct page + $17) by 2
00a7ca rts				; exit routine



00a7cb lda [$17]
00a7cd inc $17
00a7cf and #$00ff
00a7d2 sep #$20
00a7d4 ldx $9e
00a7d6 xba
00a7d7 lda $a0
00a7d9 xba
00a7da rep #$30
00a7dc bra $a7f9



00a7de sep #$20			; set A => 8bit
00a7e0 ldx $9e
00a7e2 lda $a0
00a7e4 xba
00a7e5 lda $3a
00a7e7 rep #$30			; set A,X,Y => 16bit
00a7e9 bra $a7f9
00a7eb lda [$17]
00a7ed inc $17
00a7ef inc $17
00a7f1 tax
00a7f2 lda [$17]
00a7f4 inc $17
00a7f6 and #$00ff
00a7f9 sta $64
00a7fb stx $62
00a7fd rep #$20
00a7ff sep #$10
00a801 pei ($17)
00a803 ldx $19
00a805 phx
00a806 pei ($3d)
00a808 lda $64
00a80a and #$00ff
00a80d clc
00a80e adc $62
00a810 sta $3d
00a812 ldx $65
00a814 stx $19
00a816 lda $62
00a818 sta $17
00a81a lda #$0008
00a81d and $00db
00a820 php
00a821 lda #$0008
00a824 tsb $00db
00a827 jsr $9d75
00a82a plp
00a82b bne $a833
00a82d lda #$0008
00a830 trb $00db
00a833 pla
00a834 sta $3d
00a836 plx
00a837 stx $19
00a839 pla
00a83a sta $17
00a83c rep #$30
00a83e rts
00a83f lda [$17]
00a841 inc $17
00a843 inc $17
00a845 tay
00a846 lda [$17]
00a848 inc $17
00a84a and #$00ff
00a84d pea $ffff
00a850 sep #$20			; set A => 8bit
00a852 dey
00a853 phk
00a854 pea $a85b
00a857 pha
00a858 phy
00a859 rep #$30			; set A,X,Y => 16bit
00a85b rtl				; exit routine



00a85c sep #$20			; set A => 8bit
00a85e rep #$10			; set X,Y => 16bit
00a860 plx
00a861 cpx #$ffff
00a864 beq $a867
00a866 pla
00a867 pea $0000
00a86a pld
00a86b phk
00a86c plb
00a86d rts				; exit routine
00a874 lda [$17]
00a876 inc $17
00a878 inc $17
00a87a tax
00a87b lda $7e3367
00a87f tay
00a880 lda [$17]
00a882 inc $17
00a884 and #$00ff
00a887 dec
00a888 phb
00a889 mvn $00,$7e
00a88c plb
00a88d tya
00a88e cmp #$35d9
00a891 bcc $a896
00a896 sta $7e3367
00a89a rts



00a89b lda [$17]
00a89d inc $17
00a89f inc $17
00a8a1 tay
00a8a2 lda [$17]
00a8a4 inc $17
00a8a6 and #$00ff
00a8a9 pha
00a8aa eor #$ffff
00a8ad sec
00a8ae adc $7e3367
00a8b2 sta $7e3367
00a8b6 tax
00a8b7 pla
00a8b8 dec
00a8b9 mvn $7e,$00
00a8bc rts				; exit routine



00a8bd jsr $a8c0
00a8c0 lda #$003e
00a8c3 trb $1a
00a8c5 lsr a
00a8c6 and $25
00a8c8 asl a
00a8c9 ora $1a
00a8cb adc #$0040
00a8ce sta $1a
00a8d0 rts				; exit routine
00a8d1 lda $40
00a8d3 sta $1b
00a8d5 lda $25
00a8d7 and #$00ff
00a8da asl a
00a8db sta $1a
00a8dd lda $25
00a8df and #$ff00
00a8e2 lsr a
00a8e3 lsr a
00a8e4 adc $1a
00a8e6 adc $3f
00a8e8 sta $1a
00a8ea rts



00a8ee lda $18
00a8f0 and #$ff00
00a8f3 sta $31
00a8f5 lda [$17]
00a8f7 inc $17
00a8f9 inc $17
00a8fb tax
00a8fc lda [$17]
00a8fe inc $17
00a900 inc $17
00a902 tay
00a903 lda [$17]
00a905 inc $17
00a907 and #$00ff
00a90a dec
00a90b jmp $0030
00a90e stz $62
00a910 lda [$17]
00a912 inc $17
00a914 inc $17
00a916 tax
00a917 lda [$17]
00a919 inc $17
00a91b and #$00ff
00a91e sta $63
00a920 lda [$17]
00a922 inc $17
00a924 inc $17
00a926 tay
00a927 lda [$17]
00a929 inc $17
00a92b and #$00ff
00a92e ora $62
00a930 sta $31
00a932 lda [$17]
00a934 inc $17
00a936 inc $17
00a938 dec
00a939 phb				; save databank to stack
00a93a jsr $0030
00a93d plb
00a93e rts				; exit routine



00a93f lda $35
00a941 sep #$20			; set A => 8bit
00a943 lda $39
00a945 rep #$30			; set A,X,Y => 16bit
00a947 sta $31
00a949 lda $3a
00a94b beq $a957
00a94d dec
00a94e ldx $34
00a950 ldy $37
00a952 phb				; save databank to stack
00a953 jsr $0030
00a956 plb
00a957 rts				; exit routine



00a958 lda [$17]
00a95a inc $17
00a95c inc $17
00a95e tax
00a95f lda [$17]
00a961 inc $17
00a963 and #$00ff
00a966 sep #$20			; set A => 8bit
00a968 sta $0000,x
00a96b rts				; exit routine



00a96c lda [$17]
00a96e inc $17
00a970 inc $17
00a972 tax
00a973 lda [$17]
00a975 inc $17
00a977 inc $17
00a979 sta $0000,x
00a97c rts				; exit routine



00a97d jsr $a96c
00a980 lda [$17]
00a982 inc $17
00a984 and #$00ff
00a987 sep #$20			; set A => 8bit
00a989 sta $0002,x
00a98c rts				; exit routine



00a98d lda [$17]
00a98f inc $17
00a991 and #$00ff
00a994 sep #$20			; set A => 8bit
00a996 sta [$9e]
00a998 rts				; exit routine
00a999 lda [$17]
00a99b inc $17
00a99d inc $17
00a99f sta [$9e]
00a9a1 rts
00a9b3 lda [$17]
00a9b5 inc $17
00a9b7 inc $17
00a9b9 tax
00a9ba lda [$9e]
00a9bc rts
00a9bd jsr $a9b3
00a9c0 sep #$20
00a9c2 sta $0000,x
00a9c5 rts
00a9c6 jsr $a9b3
00a9c9 sta $0000,x
00a9cc rts



00a9cd lda [$17]
00a9cf inc $17
00a9d1 inc $17
00a9d3 tay
00a9d4 ldx $9e
00a9d6 lda $9f
00a9d8 and #$ff00
00a9db sta $31
00a9dd lda #$0002
00a9e0 jmp $0030
00a9e3 jsr $aa22
00a9e6 pha
00a9e7 plb
00a9e8 lda [$17]
00a9ea inc $17
00a9ec and #$00ff
00a9ef sep #$20			; set A => 8bit
00a9f1 sta $0000,x
00a9f4 plb
00a9f5 rts				; exit routine



00a9f6 jsr $aa22
00a9f9 pha
00a9fa plb
00a9fb lda [$17]
00a9fd inc $17
00a9ff inc $17
00aa01 sta $0000,x
00aa04 plb
00aa05 rts				; exit routine



00aa22 lda [$17]
00aa24 inc $17
00aa26 inc $17
00aa28 tax
00aa29 lda [$17]
00aa2b inc $17
00aa2d and #$00ff
00aa30 rts				; exit routine



00aa31 sep #$30			; set A,X,Y => 8bit
00aa33 jsr $aa3b
00aa36 jsr $aa44
00aa39 bra $aa5d
00aa3b lda #$20
00aa3d sec
00aa3e sbc $2a
00aa40 lsr a
00aa41 sta $28
00aa43 rts				; exit routine



00aa44 lda $24
00aa46 and #$08
00aa48 beq $aa4e
00aa4a lda #$10
00aa4c bra $aa53
00aa4e lda $2d
00aa50 eor #$ff
00aa52 inc
00aa53 clc
00aa54 adc $23
00aa56 sta $2c
00aa58 lsr a
00aa59 lsr a
00aa5a sta $29
00aa5c rts				; exit routine



00aa5d rep #$30			; set A,X,Y => 16bit
00aa5f lda $28
00aa61 clc
00aa62 adc #$0101
00aa65 sta $25
00aa67 rts				; exit routine



00aa68 lda $1f
00aa6a and #$00ff
00aa6d ldx $17
00aa6f pha
00aa70 phx
00aa71 stx $17
00aa73 jsr $9dbd
00aa76 plx
00aa77 pla
00aa78 dec
00aa79 bne $aa6f
00aa7b rts				; exit routine



00aa7c lda $40
00aa7e sta $1b
00aa80 sta $35
00aa82 sta $38
00aa84 lda #$2cfe
00aa87 ldx $3f
00aa89 ldy #$1000
00aa8c jmp $9d4b
00aa8f lda $40
00aa91 sta $1b
00aa93 sta $35
00aa95 sta $38
00aa97 lda $28
00aa99 and #$ff00
00aa9c lsr a
00aa9d lsr a
00aa9e adc $3f
00aaa0 tax
00aaa1 lda $2a
00aaa3 and #$ff00
00aaa6 lsr a
00aaa7 lsr a
00aaa8 tay
00aaa9 lda #$2cfe
00aaac jmp $9d4b
00aaaf lda $40
00aab1 sta $1b
00aab3 sta $35
00aab5 sta $38
00aab7 lda $28
00aab9 and #$ff00
00aabc lsr a
00aabd lsr a
00aabe adc $3f
00aac0 tax
00aac1 lda $2a
00aac3 and #$ff00
00aac6 lsr a
00aac7 lsr a
00aac8 tay
00aac9 lda #$2c00
00aacc jmp $9d4b
00aacf lda $27
00aad1 and #$00ff
00aad4 asl a
00aad5 tax
00aad6 pei ($25)
00aad8 lda $28
00aada sta $25
00aadc jsr $a8d1
00aadf jsr $b49e
00aae2 lda $1c
00aae4 and #$00ff
00aae7 pha
00aae8 plb
00aae9 jsr ($aaf7,x)
00aaec plb
00aaed jsr $b4a7
00aaf0 pla
00aaf1 sta $25
00aaf3 jmp $a8d1
00ab07 lda $2b
00ab09 and #$00ff
00ab0c sta $62
00ab0e lda $2a
00ab10 and #$00ff
00ab13 asl a
00ab14 tax
00ab15 ldy $1a
00ab17 lda #$00fe
00ab1a jsr $ad85
00ab1d sty $1a
00ab1f rts				; exit routine



00ab20 jsr $ab9f
00ab23 lda #$4000
00ab26 ora $1d
00ab28 sta $64
00ab2a jsr $b4a7
00ab2d sec
00ab2e lda $1a
00ab30 sbc #$0040
00ab33 sta $1a
00ab35 lda $24
00ab37 bit #$0008
00ab3a beq $ab44
00ab3c jsr $a8d1
00ab3f lda #$8000
00ab42 tsb $64
00ab44 sep #$20			; set A => 8bit
00ab46 lda $22
00ab48 lsr a
00ab49 lsr a
00ab4a lsr a
00ab4b cmp $28
00ab4d bcs $ab52
00ab52 sbc $28
00ab54 sta $62
00ab56 lda $22
00ab58 cmp #$78
00ab5a bcc $ab64
00ab5c bne $ab6a
00ab5e lda $24
00ab60 bit #$01
00ab62 beq $ab6a
00ab64 inc $62
00ab66 lda #$40
00ab68 trb $65
00ab6a lda $62
00ab6c inc
00ab6d cmp $2a
00ab6f bcc $ab77
00ab77 rep #$30			; set A,X,Y => 16bit
00ab79 lda $62
00ab7b and #$00ff
00ab7e asl a
00ab7f tay
00ab80 lda #$00fd
00ab83 eor $64
00ab85 sta ($1a),y
00ab87 rts				; exit routine
00ab88 lda #$00fc
00ab8b jsr $ad2d
00ab8e lda #$00ff
00ab91 jsr $ad44
00ab94 inc $62
00ab96 lda #$80fc
00ab99 jsr $ad85
00ab9c jmp $aca6



00ab9f lda #$00fc
00aba2 jsr $ad2d
00aba5 lda $2b
00aba7 and #$00ff
00abaa dec
00abab dec
00abac jsr $abfc
00abaf inc $62
00abb1 lda #$80fc
00abb4 jsr $ad85
00abb7 jmp $aca6
00abba ldy $1a
00abbc lda $2a
00abbe and #$00ff
00abc1 asl a
00abc2 tax
00abc3 lda $2b
00abc5 and #$00ff
00abc8 jsr $abfc
00abcb sty $1a
00abcd rts				; exit routine



00abce lda #$0045
00abd1 jsr $ad2d
00abd4 lda #$00ff
00abd7 jsr $ad44
00abda inc $62
00abdc lda #$8045
00abdf jsr $ad85
00abe2 jmp $acd3
00abe5 lda #$0075
00abe8 jsr $ad2d
00abeb lda #$00ff
00abee jsr $ad44
00abf1 inc $62
00abf3 lda #$8075
00abf6 jsr $ad85
00abf9 jmp $ad00
00abfc sta $62
00abfe txa
00abff asl a
00ac00 eor #$ffff
00ac03 adc #$ac97
00ac06 sta $64
00ac08 txa
00ac09 lsr a
00ac0a pha
00ac0b adc $00015f
00ac0f sta $00015f
00ac13 jmp ($0064)
00ac2e dec
00ac2f sta $0032,y
00ac32 dec
00ac33 sta $0030,y
00ac36 dec
00ac37 sta $002e,y
00ac3a dec
00ac3b sta $002c,y
00ac3e dec
00ac3f sta $002a,y
00ac42 dec
00ac43 sta $0028,y
00ac46 dec
00ac47 sta $0026,y
00ac4a dec
00ac4b sta $0024,y
00ac4e dec
00ac4f sta $0022,y
00ac52 dec
00ac53 sta $0020,y
00ac56 dec
00ac57 sta $001e,y
00ac5a dec
00ac5b sta $001c,y
00ac5e dec
00ac5f sta $001a,y
00ac62 dec
00ac63 sta $0018,y
00ac66 dec
00ac67 sta $0016,y
00ac6a dec
00ac6b sta $0014,y
00ac6e dec
00ac6f sta $0012,y
00ac72 dec
00ac73 sta $0010,y
00ac76 dec
00ac77 sta $000e,y
00ac7a dec
00ac7b sta $000c,y
00ac7e dec
00ac7f sta $000a,y
00ac82 dec
00ac83 sta $0008,y
00ac86 dec
00ac87 sta $0006,y
00ac8a dec
00ac8b sta $0004,y
00ac8e dec
00ac8f sta $0002,y
00ac92 dec
00ac93 sta $0000,y
00ac96 tya
00ac97 adc #$0040
00ac9a tay
00ac9b lda $01,s
00ac9d dec $62
00ac9f beq $aca4
00aca1 jmp $ac0b
00aca4 pla
00aca5 rts				; exit routine
00aca6 jsr $ad52
00aca9 lda $1d
00acab eor #$00f7
00acae sta ($1a)
00acb0 lda $1d
00acb2 eor #$00f9
00acb5 sta ($1a),y
00acb7 lda #$00fb
00acba jsr $ad64
00acbd lda $1d
00acbf eor #$00f8
00acc2 sta ($1a)
00acc4 lda $1d
00acc6 eor #$00fa
00acc9 sta ($1a),y
00accb lda $1a
00accd adc #$0040
00acd0 sta $1a
00acd2 rts



00acd3 jsr $ad52
00acd6 lda $1d
00acd8 eor #$0040
00acdb sta ($1a)
00acdd lda $1d
00acdf eor #$0042
00ace2 sta ($1a),y
00ace4 lda #$0044
00ace7 jsr $ad64
00acea lda $1d
00acec eor #$0041
00acef sta ($1a)
00acf1 lda $1d
00acf3 eor #$0043
00acf6 sta ($1a),y
00acf8 lda $1a
00acfa adc #$0040
00acfd sta $1a
00acff rts				; exit routine



00ad00 jsr $ad52
00ad03 lda $1d
00ad05 eor #$0070
00ad08 sta ($1a)
00ad0a lda $1d
00ad0c eor #$0072
00ad0f sta ($1a),y
00ad11 lda #$0074
00ad14 jsr $ad64
00ad17 lda $1d
00ad19 eor #$0071
00ad1c sta ($1a)
00ad1e lda $1d
00ad20 eor #$0073
00ad23 sta ($1a),y
00ad25 lda $1a
00ad27 adc #$0040
00ad2a sta $1a
00ad2c rts				; exit routine
00ad2d pha
00ad2e ldy $1a
00ad30 iny
00ad31 iny
00ad32 lda $2a
00ad34 and #$00ff
00ad37 dec
00ad38 dec
00ad39 asl a
00ad3a tax
00ad3b lda #$0001
00ad3e sta $62
00ad40 pla
00ad41 jmp $ad85
00ad44 pha
00ad45 lda $2b
00ad47 and #$00ff
00ad4a dec
00ad4b dec
00ad4c sta $62
00ad4e pla
00ad4f jmp $ad85
00ad52 lda $2a
00ad54 and #$00ff
00ad57 dec
00ad58 asl a
00ad59 tay
00ad5a lda $2b
00ad5c and #$00ff
00ad5f dec
00ad60 dec
00ad61 sta $62
00ad63 rts
00ad64 eor $1d
00ad66 sta $64
00ad68 lda $1a
00ad6a adc #$0040
00ad6d sta $1a
00ad6f ldx $62
00ad71 lda $64
00ad73 sta ($1a)
00ad75 eor #$4000
00ad78 sta ($1a),y
00ad7a lda $1a
00ad7c adc #$0040
00ad7f sta $1a
00ad81 dex
00ad82 bne $ad71
00ad84 rts
00ad85 eor $1d
00ad87 sta $64
00ad89 jsr ($9a1e,x)
00ad8c tya
00ad8d adc #$0040
00ad90 tay
00ad91 lda $64
00ad93 dec $62
00ad95 bne $ad89
00ad97 rts



00ad98 lda [$17]
00ad9a inc $17
00ad9c and #$00ff
00ad9f sta $62
00ada1 ldy #$31c5
00ada4 lda #$01f0
00ada7 pea $007e
00adaa plb
00adab sec
00adac tax
00adad jsr $9a05
00adb0 tya
00adb1 sbc #$fff0
00adb4 tay
00adb5 txa
00adb6 adc #$fff8
00adb9 dec $62
00adbb bne $adac
00adbd plb
00adbe rts				; exit routine



00adbf lda $2c
00adc1 and #$00ff
00adc4 sta $64
00adc6 asl a
00adc7 adc #$31b5
00adca tay
00adcb lda #$01f9
00adce sbc $64
00add0 pea $007e
00add3 plb
00add4 sta $64
00add6 and #$0007
00add9 asl a
00adda tax
00addb lda $64
00addd and #$fff8
00ade0 adc #$0008
00ade3 jsr ($9a1e,x)
00ade6 sbc #$0007
00ade9 tax
00adea lda $64
00adec and #$0007
00adef sta $64
00adf1 sty $62
00adf3 asl a
00adf4 adc $62
00adf6 tay
00adf7 sec
00adf8 lda $2d
00adfa sbc $64
00adfc and #$00ff
00adff pha
00ae00 lsr a
00ae01 lsr a
00ae02 lsr a
00ae03 sta $62
00ae05 txa
00ae06 sec
00ae07 tax
00ae08 jsr $9a05
00ae0b tya
00ae0c sbc #$fff0
00ae0f tay
00ae10 txa
00ae11 adc #$fff8
00ae14 dec $62
00ae16 bne $ae07
00ae18 sta $64
00ae1a pla
00ae1b and #$0007
00ae1e asl a
00ae1f tax
00ae20 lda $64
00ae22 jsr ($9a1e,x)
00ae25 plb
00ae26 rts				; exit routine
00ae27 pea $007e
00ae2a plb
00ae2b lda $2c
00ae2d and #$00ff
00ae30 pha
00ae31 dec
00ae32 asl a
00ae33 adc #$31b7
00ae36 tax
00ae37 lda $29
00ae39 and #$00ff
00ae3c asl a
00ae3d asl a
00ae3e asl a
00ae3f sec
00ae40 sbc $01,s
00ae42 sta $01,s
00ae44 lda $2b
00ae46 and #$00ff
00ae49 sta $62
00ae4b lda [$17]
00ae4d and #$00ff
00ae50 beq $ae6a
00ae52 bit #$0080
00ae55 bne $ae81
00ae57 pha
00ae58 lda $03,s
00ae5a sta $0000,x
00ae5d txy
00ae5e iny
00ae5f iny
00ae60 pla
00ae61 dec
00ae62 beq $ae69
00ae64 asl a
00ae65 dec
00ae66 mvn $7e,$7e
00ae69 tyx
00ae6a lda #$0008
00ae6d sec
00ae6e sbc [$17]
00ae70 and #$00ff
00ae73 clc
00ae74 adc $01,s
00ae76 sta $01,s
00ae78 inc $17
00ae7a dec $62
00ae7c bne $ae4b
00ae7e pla
00ae7f plb
00ae80 rts



00ae81 and #$007f
00ae84 pha
00ae85 lda #$0008
00ae88 sec
00ae89 sbc $01,s
00ae8b clc
00ae8c adc $03,s
00ae8e sta $03,s
00ae90 sta $0000,x
00ae93 txy
00ae94 iny
00ae95 iny
00ae96 pla
00ae97 dec
00ae98 beq $ae9f
00ae9a asl a
00ae9b dec
00ae9c mvn $7e,$7e
00ae9f tyx
00aea0 bra $ae78
00aea2 lda [$17]
00aea4 inc $17
00aea6 and #$00ff
00aea9 jsl $009760
00aead rts				; exit routine



; ROUTINE: Text -  ($00:aeb5)
;		is in $9e0e[] jump table
; parameters:
;		ram $17 - long address of pointer to index to ?
00aeb5 lda [$17]		; $17 holds pointer, get value at pointer
00aeb7 inc $17			; increment address
00aeb9 and #$00ff		; ignore high byte
00aebc phd				; save direct page to stack
00aebd pea $00d0		; 
00aec0 pld				; set direct page to $000d
00aec1 jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
00aec5 pld				; restore direct page from stack
00aec6 rts				; exit routine



00aec7 lda [$17]
00aec9 inc $17
00aecb and #$00ff
00aece jsl $00976b
00aed2 rts				; exit routine



; ROUTINE: Text -  ($00:aeda)
;		is in $9e0e[] jump table
; parameters:
;		ram $17 - long address of pointer to index to ?
00aeda lda [$17]		; $17 holds pointer, get value at pointer
00aedc inc $17			; increment address
00aede and #$00ff		; ignore high byte
00aee1 phd				; save direct page to stack
00aee2 pea $00d0		; 
00aee5 pld				; set direct page to $000d
00aee6 jsl $009754		; call routine "Text - TRB value at direct page with mask from $0097fb[] ($00:9754)"
00aeea pld				; restore direct page from stack
00aeeb rts				; exit routine



00aefe lda $2e
00af00 phd				; save direct page to stack
00af01 pha
00af02 lda $9e
00af04 pld
00af05 jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
00af09 pld
00af0a rts				; exit routine



00af1d lda $2e
00af1f phd				; save direct page to stack
00af20 pha
00af21 lda $9e
00af23 pld
00af24 jsl $009754		; call routine "Text - TRB value at direct page with mask from $0097fb[] ($00:9754)"
00af28 pld
00af29 rts				; exit routine
00af2a tay
00af2b lda [$17]
00af2d sta $a4
00af2f inc $17
00af31 inc $17
00af33 lda [$17]
00af35 sta $a6
00af37 dec $17
00af39 dec $17
00af3b tya
00af3c sec
00af3d adc $17
00af3f sta $17
00af41 ldx #$00a4
00af44 tya
00af45 bra $af50
00af47 tay
00af48 lda [$17]
00af4a inc $17
00af4c inc $17
00af4e tax
00af4f tya
00af50 stz $98
00af52 stz $9a
00af54 ldy #$0098
00af57 mvn $00,$00
00af5a rts
00af5b tax
00af5c lda [$17]
00af5e inc $17
00af60 inc $17
00af62 tay
00af63 txa
00af64 ldx #$009e
00af67 mvn $00,$00
00af6a rts
00af6b lda #$0000
00af6e bra $af5b
00af70 lda #$0001
00af73 bra $af5b



00af75 lda #$0002
00af78 bra $af5b
00af7a jsr $af2a
00af7d bra $af82
00af7f jsr $af47
00af82 lda $98
00af84 sta $9e
00af86 lda $9a
00af88 sta $a0
00af8a rts
00af8b lda #$0000
00af8e bra $af7a
00af90 lda #$0001
00af93 bra $af7a
00af95 lda #$0002
00af98 bra $af7a
00af9a lda #$0001
00af9d bra $af7f
00af9f lda #$0002
00afa2 bra $af7f
00afa4 jsr $afbb
00afa7 stz $9f
00afa9 stz $a0
00afab rts				; exit routine



00afbb lda [$17]
00afbd inc $17
00afbf inc $17
00afc1 tax
00afc2 lda [$17]
00afc4 inc $17
00afc6 and #$00ff
00afc9 pha
00afca plb
00afcb lda $0000,x
00afce tay
00afcf lda $0002,x
00afd2 plb
00afd3 sty $9e
00afd5 rts				; exit routine
00afd6 stz $9e
00afd8 stz $a0
00afda lda [$17]
00afdc inc $17
00afde inc $17
00afe0 tax
00afe1 sep #$20
00afe3 lda $0000,x
00afe6 sta $9e
00afe8 rts
00afe9 jsr $af2a
00afec bra $aff1



00afee jsr $af47
00aff1 lda $9e
00aff3 and $98
00aff5 sta $9e
00aff7 lda $a0
00aff9 and $9a
00affb sta $a0
00affd rts
00affe lda #$0000
00b001 bra $afe9
00b003 lda #$0001
00b006 bra $afe9
00b012 lda #$0001
00b015 bra $afee
00b01c jsr $af2a
00b01f bra $b024
00b021 jsr $af47
00b024 lda $98
00b026 tsb $9e
00b028 lda $9a
00b02a tsb $a0
00b02c rts				; exit routine



00b032 lda #$0001
00b035 bra $b01c
00b03c lda #$0000
00b03f bra $b021
00b04b jsr $af2a
00b04e bra $b053
00b050 jsr $af47
00b053 lda $9e
00b055 eor $98
00b057 sta $9e
00b059 lda $a0
00b05b eor $9a
00b05d sta $a0
00b05f rts				; exit routine



00b060 lda #$0000
00b063 bra $b04b
00b074 lda #$0001
00b077 bra $b050
00b07e jsr $af2a
00b081 bra $b086
00b083 jsr $af47
00b086 clc
00b087 lda $9e
00b089 adc $98
00b08b sta $9e
00b08d lda $a0
00b08f adc $9a
00b091 sta $a0
00b093 rts
00b094 lda #$0000
00b097 bra $b07e
00b099 lda #$0001
00b09c bra $b07e
00b09e lda #$0002
00b0a1 bra $b07e
00b0a3 lda #$0000
00b0a6 bra $b083
00b0a8 lda #$0001
00b0ab bra $b083
00b0ad lda #$0002
00b0b0 bra $b083
00b0b2 jsr $af2a
00b0b5 bra $b0ba
00b0b7 jsr $af47
00b0ba sec
00b0bb lda $9e
00b0bd sbc $98
00b0bf sta $9e
00b0c1 lda $a0
00b0c3 sbc $9a
00b0c5 sta $a0
00b0c7 rts
00b0c8 lda #$0000
00b0cb bra $b0b2
00b0cd lda #$0001
00b0d0 bra $b0b2
00b0d2 lda #$0002
00b0d5 bra $b0b2
00b0d7 lda #$0000
00b0da bra $b0b7
00b0dc lda #$0001
00b0df bra $b0b7
00b0e1 lda #$0002
00b0e4 bra $b0b7
00b0e6 sta $9c
00b0e8 lda $9e
00b0ea sta $98
00b0ec jsl $0096b3
00b0f0 rts
00b0f1 lda [$17]
00b0f3 inc $17
00b0f5 and #$00ff
00b0f8 bra $b0e6
00b102 jsr $b188
00b105 bra $b0e6
00b107 jsr $b196
00b10a bra $b0e6
00b10c sta $9c
00b10e lda $9e
00b110 sta $98
00b112 lda $a0
00b114 sta $9a
00b116 jsl $0096e4
00b11a rts				; exit routine



00b11b lda [$17]
00b11d inc $17
00b11f and #$00ff
00b122 bra $b10c
00b124 lda [$17]
00b126 inc $17
00b128 inc $17
00b12a bra $b10c
00b131 jsr $b196
00b134 bra $b10c
00b136 lda $a2
00b138 sta $9e
00b13a stz $a0
00b13c rts				; exit routine



00b13d jsr $b11b
00b140 bra $b136
00b151 pei ($9e)
00b153 pei ($a0)
00b155 lda #$0090
00b158 sta $6d
00b15a lda #$000a
00b15d sta $9c
00b15f ldx #$006d
00b162 clc
00b163 lda $9e
00b165 sta $98
00b167 ora $a0
00b169 beq $b181
00b16b lda $a0
00b16d sta $9a
00b16f jsl $0096e4
00b173 sep #$20			; set A => 8bit
00b175 lda $a2
00b177 adc #$90
00b179 sta $0000,x
00b17c rep #$30			; set A,X,Y => 16bit
00b17e dex
00b17f bra $b163
00b181 pla
00b182 sta $a0
00b184 pla
00b185 sta $9e
00b187 rts				; exit routine



00b188 lda [$17]
00b18a inc $17
00b18c inc $17
00b18e tax
00b18f lda $0000,x
00b192 and #$00ff
00b195 rts				; exit routine



00b196 lda [$17]
00b198 inc $17
00b19a inc $17
00b19c tax
00b19d lda $0000,x
00b1a0 rts				; exit routine



00b1a1 phd				; save direct page to stack
00b1a2 lda [$17]
00b1a4 inc $17
00b1a6 and #$00ff
00b1a9 pei ($2e)
00b1ab pld
00b1ac jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
00b1b0 pld
00b1b1 inc
00b1b2 dec
00b1b3 rts				; exit routine
00b1b4 lda $2e
00b1b6 phd
00b1b7 tcd
00b1b8 lda $009e
00b1bb jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
00b1bf pld
00b1c0 inc
00b1c1 dec
00b1c2 rts
00b1c3 lda [$17]
00b1c5 inc $17
00b1c7 and #$00ff
00b1ca sta $64
00b1cc sec
00b1cd lda $a0
00b1cf bne $b1d5
00b1d1 lda $9e
00b1d3 cmp $64
00b1d5 rts



00b1d6 lda [$17]
00b1d8 inc $17
00b1da inc $17
00b1dc sta $64
00b1de sec
00b1df lda $a0
00b1e1 bne $b1e7
00b1e3 lda $9e
00b1e5 cmp $64
00b1e7 rts				; exit routine



00b1e8 lda [$17]
00b1ea inc $17
00b1ec inc $17
00b1ee sta $64
00b1f0 lda [$17]
00b1f2 inc $17
00b1f4 and #$00ff
00b1f7 sta $62
00b1f9 lda $a0
00b1fb cmp $62
00b1fd bne $b203
00b203 rts				; exit routine



00b204 lda [$17]
00b206 inc $17
00b208 inc $17
00b20a tax
00b20b lda $0000,x
00b20e and #$00ff
00b211 sta $64
00b213 sec
00b214 lda $a0
00b216 bne $b21c
00b218 lda $9e
00b21a cmp $64
00b21c rts				; exit routine



00b21d lda [$17]
00b21f inc $17
00b221 inc $17
00b223 tax
00b224 sec
00b225 lda $a0
00b227 bne $b22e
00b229 lda $9e
00b22b cmp $0000,x
00b22e rts				; exit routine



00b22f lda [$17]
00b231 inc $17
00b233 inc $17
00b235 tax
00b236 lda $0002,x
00b239 and #$00ff
00b23c sta $64
00b23e lda $a0
00b240 cmp $64
00b242 bne $b249
00b244 lda $9e
00b246 cmp $0000,x
00b249 rts				; exit routine
00b24a lda [$17]
00b24c inc $17
00b24e and #$00ff
00b251 bra $b258
00b258 tay
00b259 lda $a0
00b25b and #$00ff
00b25e pha
00b25f plb
00b260 ldx $9e
00b262 bra $b274
00b274 stz $9e
00b276 stz $a0
00b278 lda $0000,x
00b27b and #$00ff
00b27e cmp #$0080
00b281 bcc $b285
00b283 inc $9e
00b285 inx
00b286 dey
00b287 bne $b278
00b289 plb
00b28a rts



00b28b lda #$0000
00b28e sec
00b28f sbc $9e
00b291 sta $9e
00b293 lda #$0000
00b296 sbc $a0
00b298 sta $a0
00b29a rts				; exit routine



00b2dd lda $1a
00b2df sec
00b2e0 sbc #$0040
00b2e3 sta $1a
00b2e5 rts				; exit routine



00b2e6 lda $1a
00b2e8 clc
00b2e9 adc #$0040
00b2ec sta $1a
00b2ee rts				; exit routine



00b2ef dec $1a
00b2f1 dec $1a
00b2f3 rts				; exit routine



00b2f4 inc $1a
00b2f6 inc $1a
00b2f8 rts				; exit routine



00b2f9 lda [$17]
00b2fb inc $17
00b2fd inc $17
00b2ff jmp $9dcb
00b302 lda [$17]
00b304 inc $17
00b306 and #$00ff
00b309 jmp $9dc9
00b30c lda [$17]
00b30e inc $17
00b310 and #$00ff
00b313 lsr $a0
00b315 ror $9e
00b317 dec
00b318 bne $b313
00b31a rts
00b31b lda [$17]
00b31d inc $17
00b31f and #$00ff
00b322 asl $9e
00b324 rol $a0
00b326 dec
00b327 bne $b322
00b329 rts
00b354 rts				; exit routine



00b355 lda [$17]
00b357 inc $17
00b359 inc $17
00b35b cmp #$8000
00b35e bcc $b367
00b360 tax
00b361 lda #$0003
00b364 jmp $a71c
00b367 pei ($17)
00b369 pei ($18)
00b36b sta $19ee
00b36e jsl $01b24b
00b372 pla
00b373 sta $18
00b375 pla
00b376 sta $17
00b378 rts				; exit routine



00b379 lda [$17]
00b37b inc $17
00b37d inc $17
00b37f cmp #$ffff
00b382 beq $b38b
00b384 jsr $b35b
00b387 rep #$30			; set A,X,Y => 16bit
00b389 bra $b379
00b38b rts				; exit routine



00b38c lda $9e
00b38e jsl $009730
00b392 sta $9e
00b394 rts				; exit routine



00b395 lda $9e
00b397 ldx #$0010
00b39a dex
00b39b asl a
00b39c bcc $b39a
00b39e stx $9e
00b3a0 rts				; exit routine



00b3a1 inc $9e
00b3a3 bne $b3a7
00b3a7 rts				; exit routine



00b3a8 lda [$17]
00b3aa inc $17
00b3ac inc $17
00b3ae tax
00b3af inc $0000,x
00b3b2 rts				; exit routine



00b3b3 lda [$17]
00b3b5 inc $17
00b3b7 inc $17
00b3b9 tax
00b3ba sep #$20			; set A => 8bit
00b3bc inc $0000,x
00b3bf rts				; exit routine



00b3c0 lda $9e
00b3c2 sec
00b3c3 sbc #$0001
00b3c6 sta $9e
00b3c8 bcs $b3cc
00b3ca dec $a0
00b3cc rts				; exit routine



00b3cd lda [$17]
00b3cf inc $17
00b3d1 inc $17
00b3d3 tax
00b3d4 dec $0000,x
00b3d7 rts				; exit routine



00b3d8 lda [$17]
00b3da inc $17
00b3dc inc $17
00b3de tax
00b3df sep #$20			; set A => 8bit
00b3e1 dec $0000,x
00b3e4 rts				; exit routine



00b3f9 lda [$17]
00b3fb inc $17
00b3fd inc $17
00b3ff tax
00b400 lda [$17]
00b402 inc $17
00b404 and #$00ff
00b407 sep #$20			; set A => 8bit
00b409 and $0000,x
00b40c sta $0000,x
00b40f rts				; exit routine



00b424 lda [$17]
00b426 inc $17
00b428 inc $17
00b42a tax
00b42b lda [$17]
00b42d inc $17
00b42f and #$00ff
00b432 sep #$20			; set A => 8bit
00b434 ora $0000,x
00b437 sta $0000,x
00b43a rts				; exit routine



00b44f lda [$17]
00b451 inc $17
00b453 inc $17
00b455 tax
00b456 lda [$17]
00b458 inc $17
00b45a and #$00ff
00b45d sep #$20			; set A => 8bit
00b45f eor $0000,x
00b462 sta $0000,x
00b465 rts				; exit routine



00b466 lda #$002a
00b469 bra $b46e
00b46b lda #$000a
00b46e sep #$30			; set A,X,Y => 8bit
00b470 clc
00b471 ldx $5e
00b473 adc $049800,x
00b477 xba
00b478 txa
00b479 and #$38
00b47b asl a
00b47c sta $64
00b47e txa
00b47f and #$07
00b481 adc $64
00b483 asl a
00b484 rep #$20			; set A => 16bit
00b486 sep #$10			; set X,Y => 8bit
00b488 ldy #$00
00b48a sta [$1a],y
00b48c inc
00b48d ldy #$02
00b48f sta [$1a],y
00b491 adc #$000f
00b494 ldy #$40
00b496 sta [$1a],y
00b498 inc
00b499 ldy #$42
00b49b sta [$1a],y
00b49d rts				; exit routine
00b49e lda $1a
00b4a0 cmp $44
00b4a2 bcs $b4a6
00b4a4 sta $44
00b4a6 rts
00b4a7 lda $1a
00b4a9 cmp $46
00b4ab bcc $b4af
00b4ad sta $46
00b4af rts



00b4b0 lda #$0020
00b4b3 and $00da
00b4b6 beq $b4bb
00b4b8 jmp $a8c0
00b4c1 lda #$1c00
00b4c4 trb $1d
00b4c6 lda [$17]
00b4c8 inc $17
00b4ca and #$00ff
00b4cd tsb $1e
00b4cf rts				; exit routine



00b4ea lda $9e
00b4ec jmp $9dcb
00b4ef lda [$17]
00b4f1 inc $17
00b4f3 and #$00ff
00b4f6 sta $64
00b4f8 lda $63
00b4fa and #$ff00
00b4fd lsr a
00b4fe tax
00b4ff adc #$1100
00b502 sta $9e
00b504 ldy #$0010
00b507 stz $62
00b509 sep #$20			; set A => 8bit
00b50b stz $a0
00b50d lda $1100,x
00b510 inx
00b511 cmp #$80
00b513 bcc $b51c
00b515 inc $62
00b517 dey
00b518 bne $b50d
00b51c dey
00b51d beq $b52c
00b51f lda $1100,x
00b522 inx
00b523 cmp #$80
00b525 bcc $b52c
00b527 inc $63
00b529 dey
00b52a bne $b51f
00b52c lda $62
00b52e cmp $63
00b530 bcs $b534
00b534 sta $62
00b536 sec
00b537 lda $2a
00b539 sbc #$02
00b53b sbc $62
00b53d lsr a
00b53e clc
00b53f adc $25
00b541 sta $25
00b543 rep #$30			; set A,X,Y => 16bit
00b545 jsr $a8d1
00b548 lda #$0010
00b54b sta $3a
00b54d jmp $a7de
00b567 php				; save processor status to stack
00b568 sep #$20			; set A => 8bit
00b56a rep #$10			; set X,Y => 16bit
00b56c lda #$10
00b56e and $00da
00b571 beq $b57e
00b573 lda #$04
00b575 sta $24
00b577 ldx #$5f78
00b57a stx $22
00b57c plp
00b57d rts
00b57e lda #$04
00b580 trb $00d0
00b583 jsl $018a51
00b587 lda #$01
00b589 and $00d9
00b58c beq $b592
00b58e lda #$08
00b590 sta $24
00b592 lda $20
00b594 cmp #$0b
00b596 beq $b5db
00b598 cmp #$a7
00b59a beq $b5db
00b59c cmp #$4f
00b59e beq $b5d4
00b5a0 cmp #$01
00b5a2 beq $b5c9
00b5a4 cmp #$1b
00b5a6 beq $b5c9
00b5a8 cmp #$30
00b5aa beq $b5c9
00b5ac cmp #$31
00b5ae beq $b5c9
00b5b0 cmp #$4e
00b5b2 beq $b5c9
00b5b4 cmp #$6b
00b5b6 beq $b5c2
00b5b8 cmp #$77
00b5ba bcc $b5df
00b5bc cmp #$7b
00b5be bcs $b5df
00b5d4 lda #$04
00b5d6 tsb $00d0
00b5d9 bra $b5df
00b5db lda #$04
00b5dd sta $24
00b5df inc $23
00b5e1 lda $24
00b5e3 bit #$08
00b5e5 bne $b5f3
00b5e7 bit #$04
00b5e9 bne $b5ef
00b5eb bit #$02
00b5ed bne $b5f3
00b5ef lda #$05
00b5f1 bra $b5f5
00b5f3 lda #$0a
00b5f5 sta $24
00b5f7 lda $23
00b5f9 cmp #$08
00b5fb bcc $b607
00b5fd cmp #$a9
00b5ff bcc $b60b
00b60b clc
00b60c lda $2d
00b60e xba
00b60f lda #$0e
00b611 adc $2d
00b613 sta $2d
00b615 sta $64
00b617 adc #$05
00b619 cmp $23
00b61b bcs $b630
00b61d sec
00b61e lda #$a8
00b620 sbc $2d
00b622 cmp $23
00b624 bcs $b638
00b626 lda $24
00b628 and #$f7
00b62a ora #$04
00b62c sta $24
00b62e bra $b638
00b630 lda $24
00b632 and #$fb
00b634 ora #$08
00b636 sta $24
00b638 xba
00b639 sta $2d
00b63b lda $22
00b63d cmp #$20
00b63f bcc $b657
00b641 cmp #$d1
00b643 bcc $b667
00b667 lda $24
00b669 and #$08
00b66b bne $b674
00b66d sec
00b66e lda $23
00b670 sbc $64
00b672 bra $b679
00b674 clc
00b675 lda $23
00b677 adc #$10
00b679 sta $62
00b67b lda $00c8
00b67e cmp #$00
00b680 bne $b68e
00b682 lda #$40
00b684 and $00e0
00b687 beq $b6b1
00b689 lda $01bf
00b68c bra $b698
00b68e lda #$80
00b690 and $00e0
00b693 beq $b6b1
00b695 lda $0181
00b698 cmp $62
00b69a bcc $b6a4
00b69c sbc $62
00b69e cmp $64
00b6a0 bcs $b6b1
00b6a2 bra $b6ab
00b6a4 adc $64
00b6a6 dec
00b6a7 cmp $62
00b6a9 bcc $b6b1
00b6ab lda $24
00b6ad eor #$0c
00b6af sta $24
00b6b1 plp
00b6b2 rts				; exit routine



00b6b3 lda $9e
00b6b5 cmp #$00de
00b6b8 beq $b6d5
00b6ba jsr $8c1b
00b6bd sta $62
00b6bf sep #$30			; set A,X,Y => 8bit
00b6c1 ldx $9e
00b6c3 lda $049800,x
00b6c7 asl a
00b6c8 asl a
00b6c9 sta $64
00b6cb lda #$02
00b6cd tsb $00d4
00b6d0 jsl $0c8000
00b6d4 rts				; exit routine
00b82a rep #$30
00b82c phb
00b82d pha
00b82e phx
00b82f sep #$20
00b831 phk
00b832 plb
00b833 stz $4200
00b836 lda $2137
00b839 lda $213f
00b83c lda $213d
00b83f sta $0118
00b842 lda #$40
00b844 and $00da
00b847 bne $b854
00b849 lda $0118
00b84c asl a
00b84d adc $0118
00b850 adc #$9a
00b852 pha
00b853 plp
00b854 lsr $0118
00b857 bcs $b836
00b859 ldx #$b86c
00b85c stx $0118
00b85f lda #$11
00b861 sta $4200
00b864 cli
00b865 wai
00b866 rep #$30
00b868 plx
00b869 pla
00b86a plb
00b86b rti
00b86c lda #$80
00b86e sta $2100
00b871 lda #$01
00b873 sta $4200
00b876 rep #$30
00b878 phd
00b879 phy
00b87a jsr $8b69
00b87d sep #$20
00b87f lda #$07
00b881 sta $4209
00b884 ldx #$b898
00b887 stx $0118
00b88a lda $0112
00b88d sta $4200
00b890 lda #$40
00b892 tsb $00d8
00b895 ply
00b896 pld
00b897 rti
00b898 rep #$30
00b89a phb
00b89b pha
00b89c phx
00b89d sep #$20
00b89f phk
00b8a0 plb
00b8a1 stz $4200
00b8a4 lda $2137
00b8a7 lda $213f
00b8aa lda $213d
00b8ad sta $0118
00b8b0 lda #$40
00b8b2 and $00da
00b8b5 bne $b8c2
00b8b7 lda $0118
00b8ba asl a
00b8bb adc $0118
00b8be adc #$0f
00b8c0 pha
00b8c1 plp
00b8c2 lsr $0118
00b8c5 bcc $b8a4
00b8c7 ldx #$b8da
00b8ca stx $0118
00b8cd lda #$11
00b8cf sta $4200
00b8d2 cli
00b8d3 wai
00b8d4 rep #$30
00b8d6 plx
00b8d7 pla
00b8d8 plb
00b8d9 rti
00b8da lda $0110
00b8dd sta $2100
00b8e0 lda #$01
00b8e2 sta $4200
00b8e5 phd
00b8e6 jsr $8ba0
00b8e9 phy
00b8ea jsr $8b88
00b8ed sep #$20
00b8ef lda #$d8
00b8f1 sta $4209
00b8f4 ldx #$b82a
00b8f7 stx $0118
00b8fa lda $0112
00b8fd sta $4200
00b900 lda #$20
00b902 tsb $00d8
00b905 ply
00b906 pld
00b907 rti



00b908 php				; save processor status to stack
00b909 sep #$20			; set A => 8bit
00b90b lda #$2d
00b90d sta $0505
00b910 plp
00b911 rts				; exit routine



00b912 php				; save processor status to stack
00b913 sep #$20			; set A => 8bit
00b915 lda #$2c
00b917 sta $0505
00b91a plp
00b91b rts				; exit routine



00b91c php				; save processor status to stack
00b91d sep #$20			; set A => 8bit
00b91f lda #$10
00b921 sta $050a
00b924 plp
00b925 rts				; exit routine



00b926 php				; save processor status to stack
00b927 sep #$20			; set A => 8bit
00b929 lda #$11
00b92b sta $050a
00b92e plp
00b92f rts				; exit routine



00b930 jsl $0096a0
00b934 bit $07
00b936 bne $b949
00b938 eor #$ffff
00b93b bit $07
00b93d beq $b944
00b93f pha
00b940 jsr $b912
00b943 pla
00b944 eor #$ffff
00b947 bra $b930
00b949 lda $07
00b94b ldx $01
00b94d cpx $05
00b94f rts				; exit routine



00b950 php				; save processor status to stack
00b951 phb				; save databank to stack
00b952 phd				; save direct page to stack
00b953 rep #$30			; set A,X,Y => 16bit
00b955 pea $5555
00b958 lda #$0080
00b95b tsb $00d6
00b95e jsl $0c8000
00b962 jsr $baf0
00b965 stz $01
00b967 sep #$20			; set A => 8bit
00b969 jsr $cc0c
00b96c rep #$30			; set A,X,Y => 16bit
00b96e ldx #$ba17
00b971 jsr $9bc4
00b974 tsc
00b975 sta $0105
00b978 lda #$0080
00b97b tsb $00de
00b97e pei ($01)
00b980 pei ($03)
00b982 lda #$0401
00b985 sta $03
00b987 lda $701ffc
00b98b and #$0300
00b98e sta $01
00b990 sta $05
00b992 pea $bcf3
00b995 ldx #$ba14
00b998 jsr $9bc4
00b99b lda #$0f00
00b99e sta $8e
00b9a0 rep #$30			; set A,X,Y => 16bit
00b9a2 lda #$0c80
00b9a5 jsr $b930
00b9a8 bne $b9e0
00b9aa bit #$0080
00b9ad beq $b9a0
00b9af sep #$20			; set A => 8bit
00b9b1 lda $06
00b9b3 sta $701ffd
00b9b7 rep #$30			; set A,X,Y => 16bit
00b9b9 and #$00ff
00b9bc dec
00b9bd sta $010e
00b9c0 bmi $b9d5
00b9c2 jsr $c94b
00b9c5 tax
00b9c6 lda $700000,x
00b9ca beq $b9db
00b9cc jsr $b908
00b9cf lda $010e
00b9d2 jmp $ca83
00b9d5 jsr $b908
00b9d8 jmp $ba1a
00b9db jsr $b912
00b9de bra $b9a0
00b9e0 stx $05
00b9e2 jsr $b91c
00b9e5 sep #$30			; set A,X,Y => 8bit
00b9e7 lda #$ec
00b9e9 sta $7f56d8
00b9ed sta $7f56da
00b9f1 sta $7f56dc
00b9f5 sta $7f56de
00b9f9 lda $06
00b9fb asl a
00b9fc tax
00b9fd lda #$e0
00b9ff sta $7f56d8,x
00ba03 lda #$08
00ba05 tsb $00d4
00ba08 jsl $0c8000
00ba0c lda #$08
00ba0e trb $00d4
00ba11 jmp $b9a0
00ba1a ldy #$1000
00ba1d lda #$0303
00ba20 jsr $9a11
00ba23 sep #$20			; set A => 8bit
00ba25 ldx #$bae7
00ba28 jsr $9bc4
00ba2b lda #$10
00ba2d trb $0111
00ba30 jsl $0c8000
00ba34 stz $2112
00ba37 stz $2112
00ba3a lda #$17
00ba3c sta $212c
00ba3f lda #$00
00ba41 jsl $0c8000
00ba45 sta $2112
00ba48 stz $2112
00ba4b clc
00ba4c adc #$08
00ba4e cmp #$d0
00ba50 bne $ba41
00ba52 lda #$10
00ba54 tsb $0111
00ba57 rep #$30			; set A,X,Y => 16bit
00ba59 stz $00cc
00ba5c lda #$060d
00ba5f sta $03
00ba61 lda #$0000
00ba64 sta $05
00ba66 sta $01
00ba68 sta $015f
00ba6b bra $badf
00ba6d jsr $b912
00ba70 rep #$30			; set A,X,Y => 16bit
00ba72 lda #$9f80
00ba75 jsr $b930
00ba78 bne $bad9
00ba7a bit #$1000
00ba7d bne $bad1
00ba7f bit #$8000
00ba82 bne $bac2
00ba84 bit #$0080
00ba87 beq $ba70
00ba89 lda $01
00ba8b cmp #$050c
00ba8e beq $bad1
00ba90 sep #$30			; set A,X,Y => 8bit
00ba92 ldy $00cc
00ba95 cpy #$08
00ba97 beq $ba6d
00ba99 lda $06
00ba9b sta $4202
00ba9e lda #$1a
00baa0 jsl $00971e
00baa4 lda $05
00baa6 asl a
00baa7 adc $4216
00baaa tax
00baab rep #$10			; set X,Y => 16bit
00baad inc $00cc
00bab0 lda $03a37c,x
00bab4 sta $1000,y
00bab7 jsr $b926
00baba ldx #$baed
00babd jsr $9bc4
00bac0 bra $ba70
00bac2 ldy $00cc
00bac5 beq $ba6d
00bac7 dey
00bac8 sty $00cc
00bacb sep #$20
00bacd lda #$03
00bacf bra $bab4
00bad1 lda $00cc
00bad4 beq $ba6d
00bad6 jmp $b908
00bad9 stx $015f
00badc jsr $b91c
00badf ldx #$baea
00bae2 jsr $9bc4
00bae5 bra $ba70
00baf0 lda #$2100
00baf3 tcd
00baf4 stz $30
00baf6 lda #$0017
00baf9 sta $212c
00bafc lda #$5555
00baff sta $0e00
00bb02 sep #$20			; set A => 8bit
00bb04 lda #$00
00bb06 sta $7e3664
00bb0a lda #$3b
00bb0c sta $07
00bb0e lda #$4b
00bb10 sta $08
00bb12 lda #$80
00bb14 sta $15
00bb16 rep #$30			; set A,X,Y => 16bit
00bb18 stz $00f0
00bb1b ldx #$0000		; clear X
00bb1e stx $16
00bb20 pea $0007
00bb23 plb
00bb24 ldx #$8030
00bb27 ldy #$0100
00bb2a jsl $008e54
00bb2e plb
00bb2f ldx #$1000
00bb32 stx $16
00bb34 pea $0004
00bb37 plb
00bb38 ldx #$9840
00bb3b ldy #$0010
00bb3e jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
00bb42 plb
00bb43 ldx #$6080
00bb46 stx $16
00bb48 pea $0004
00bb4b plb
00bb4c ldx #$99c0
00bb4f ldy #$0004
00bb52 jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
00bb56 plb				; restore databank from stack

; load $18 colors ($4 colors * $6 times)
00bb57 sep #$30			; set A,X,Y => 8bit
00bb59 pea $0007		; push $0007
00bb5c plb				; set databank => $07 
00bb5d lda #$20			; set starting color index => $20
00bb5f ldx #$00			; set source address offset => $00
00bb61 jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
00bb64 lda #$30			; set starting color index => $30
00bb66 ldx #$08			; set source address offset => $08
00bb68 jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
00bb6b lda #$60			; set starting color index => $60
00bb6d ldx #$10			; set source address offset => $10
00bb6f jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
00bb72 lda #$70			; set starting color index => $70
00bb74 ldx #$18			; set source address offset => $18
00bb76 jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
00bb79 lda #$40			; set starting color index => $40
00bb7b ldx #$20			; set source address offset => $20
00bb7d jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"
00bb80 lda #$50			; set starting color index => $50
00bb82 ldx #$28			; set source address offset => $28
00bb84 jsr $8fb4		; call routine "Copy $4 colors to CGRAM (00:8fb4)"

00bb87 plb
00bb88 ldx #$00
00bb8a txa
00bb8b pea $0007
00bb8e plb
00bb8f jsr $bc49
00bb92 ldx #$10
00bb94 lda #$10
00bb96 jsr $bc49
00bb99 plb
00bb9a lda #$80
00bb9c sta $21
00bb9e pea $0007
00bba1 plb
00bba2 lda $d814
00bba5 sta $22
00bba7 lda $d815
00bbaa sta $22
00bbac lda $d816
00bbaf sta $22
00bbb1 lda $d817
00bbb4 sta $22
00bbb6 lda $d818
00bbb9 sta $22
00bbbb lda $d819
00bbbe sta $22
00bbc0 lda $d81a
00bbc3 sta $22
00bbc5 lda $d81b
00bbc8 sta $22
00bbca lda $d81c
00bbcd sta $22
00bbcf lda $d81d
00bbd2 sta $22
00bbd4 lda $d81e
00bbd7 sta $22
00bbd9 lda $d81f
00bbdc sta $22
00bbde lda $d820
00bbe1 sta $22
00bbe3 lda $d821
00bbe6 sta $22
00bbe8 lda $d822
00bbeb sta $22
00bbed lda $d823
00bbf0 sta $22
00bbf2 plb
00bbf3 lda #$31
00bbf5 sta $21
00bbf7 lda $0e9c
00bbfa sta $22
00bbfc lda $0e9d
00bbff sta $22
00bc01 lda #$71
00bc03 sta $21
00bc05 lda $0e9c
00bc08 sta $22
00bc0a lda $0e9d
00bc0d sta $22
00bc0f stz $0d
00bc11 stz $0d
00bc13 stz $0e
00bc15 stz $0e
00bc17 stz $0f
00bc19 stz $0f
00bc1b stz $10
00bc1d stz $10
00bc1f rep #$30			; set A,X,Y => 16bit
00bc21 lda #$0000
00bc24 tcd
00bc25 ldx #$c906
00bc28 jsr $9bc4
00bc2b jsr $c4fb
00bc2e jsr $bd64
00bc31 lda #$0200
00bc34 sta $01f0
00bc37 lda #$0020
00bc3a sta $01f2
00bc3d lda #$0701
00bc40 sta $03
00bc42 stz $05
00bc44 stz $01
00bc46 jmp $cf5f
00bc49 sta $21
00bc4b lda $d7f4,x
00bc4e sta $22
00bc50 lda $d7f5,x
00bc53 sta $22
00bc55 lda $d7f6,x
00bc58 sta $22
00bc5a lda $d7f7,x
00bc5d sta $22
00bc5f lda $d7f8,x
00bc62 sta $22
00bc64 lda $d7f9,x
00bc67 sta $22
00bc69 lda $d7fa,x
00bc6c sta $22
00bc6e lda $d7fb,x
00bc71 sta $22
00bc73 lda $d7fc,x
00bc76 sta $22
00bc78 lda $d7fd,x
00bc7b sta $22
00bc7d lda $d7fe,x
00bc80 sta $22
00bc82 lda $d7ff,x
00bc85 sta $22
00bc87 lda $d800,x
00bc8a sta $22
00bc8c lda $d801,x
00bc8f sta $22
00bc91 lda $d802,x
00bc94 sta $22
00bc96 lda $d803,x
00bc99 sta $22
00bc9b rts				; exit routine



00bc9c php				; save processor status to stack
00bc9d sep #$30			; set A,X,Y => 8bit
00bc9f lda #$01
00bca1 tsb $00d8
00bca4 plp
00bca5 php				; save processor status to stack
00bca6 phb				; save databank to stack
00bca7 phd				; save direct page to stack
00bca8 rep #$30			; set A,X,Y => 16bit
00bcaa lda #$0010
00bcad trb $00d6
00bcb0 lda $0e00
00bcb3 pha
00bcb4 stz $008e
00bcb7 jsl $00c7d8
00bcbb jsr $baf0
00bcbe lda #$0001
00bcc1 and $00d8
00bcc4 bne $bccb
00bcc6 jsr $c7fe
00bcc9 bra $bcce
00bccb jsr $c810
00bcce ldx #$bea0
00bcd1 jsr $9bc4
00bcd4 lda #$0020
00bcd7 tsb $00d2
00bcda jsl $00c7b5
00bcde lda #$00a0
00bce1 sta $01f0
00bce4 lda #$000a
00bce7 sta $01f2
00bcea tsc
00bceb sta $0105
00bcee jsr $bdb9
00bcf1 lda #$00ff
00bcf4 sep #$30			; set A,X,Y => 8bit
00bcf6 sta $0104
00bcf9 rep #$30			; set A,X,Y => 16bit
00bcfb lda $0105
00bcfe tcs
00bcff jsl $00c7d8
00bd03 jsr $bd64
00bd06 ldx #$c909
00bd09 jsr $9bc4
00bd0c jsl $0c8000
00bd10 lda #$0040
00bd13 sta $01f0
00bd16 lda #$0004
00bd19 sta $01f2
00bd1c pla
00bd1d sta $0e00
00bd20 jsr $c7ad
00bd23 jsr $8230
00bd26 pld
00bd27 plb
00bd28 plp
00bd29 rtl				; exit routine



00bd2a jsr $bd30
00bd2d jmp $c7b5
00bd30 php				; save processor status to stack
00bd31 phd				; save direct page to stack
00bd32 sep #$20			; set A => 8bit
00bd34 rep #$10			; set X,Y => 16bit
00bd36 pea $0000
00bd39 pld
00bd3a ldx #$bd61
00bd3d jsr $9bc4
00bd40 jsl $0c8000
00bd44 jsr $8ec4
00bd47 jsr $8c3d
00bd4a jsr $8d29
00bd4d jsl $009b2f
00bd51 jsr $a342
00bd54 lda #$10
00bd56 tsb $00d6
00bd59 ldx #$fff0
00bd5c stx $8e
00bd5e pld
00bd5f plp
00bd60 rts				; exit routine



00bd64 lda #$5555
00bd67 sta $0c20
00bd6a ldx #$0c20
00bd6d ldy #$0c22
00bd70 lda #$01fd
00bd73 mvn $00,$00
00bd76 ldx #$bd99
00bd79 stx $5f
00bd7b ldx #$0000		; clear X
00bd7e ldy #$0020
00bd81 sep #$20			; set A => 8bit
00bd83 lda ($5f)
00bd85 sta $0c22,x
00bd88 lda #$30
00bd8a sta $0c23,x
00bd8d rep #$30			; set A,X,Y => 16bit
00bd8f inc $5f
00bd91 inx
00bd92 inx
00bd93 inx
00bd94 inx
00bd95 dey
00bd96 bne $bd81
00bd98 rts				; exit routine



00bdb9 phk
00bdba plb
00bdbb lda #$0001
00bdbe and $00d8
00bdc1 bne $be1a
00bdc3 lda #$fff0
00bdc6 sta $8e
00bdc8 bra $be12
00bdcd lda #$fcb0
00bdd0 jsr $b930
00bdd3 bne $be12
00bdd5 bit #$0080
00bdd8 bne $be47
00bdda bit #$3000
00bddd bne $bdea
00bddf bit #$8000
00bde2 beq $bdcd
00bde4 jsr $b91c
00bde7 stz $8e
00bde9 rts				; exit routine



00be02 pla
00be03 sta $03
00be05 pla
00be06 sta $05
00be08 pla
00be09 sta $01
00be0b lda #$fff0
00be0e sta $8e
00be10 bra $bdcd
00be12 ldx #$bea0
00be15 jsr $9bc4
00be18 bra $bdcd
00be1a lda #$0001
00be1d trb $00d8
00be20 lda #$0080
00be23 tsb $00de
00be26 pei ($01)
00be28 pei ($05)
00be2a pei ($03)
00be2c lda $010d
00be2f bpl $be34
00be31 lda #$0000
00be34 and #$ff00
00be37 sta $01
00be39 sta $05
00be3b pea $be01
00be3e lda $be98
00be41 pha
00be42 lda $be96
00be45 pha
00be46 rts				; exit routine



00be47 jsr $b908
00be4a stz $8e
00be4c pei ($01)
00be4e pei ($05)
00be50 pei ($03)
00be52 lda $02
00be54 and #$00ff
00be57 asl a
00be58 sta $64
00be5a asl a
00be5b adc $64
00be5d tax
00be5e stz $01
00be60 stz $05
00be62 pea $be01
00be65 lda $be74,x
00be68 pha
00be69 lda $be72,x
00be6c pha
00be6d jmp ($be70,x)
00bea3 php				; save processor status to stack
00bea4 sep #$20			; set A => 8bit
00bea6 rep #$10			; set X,Y => 16bit
00bea8 sta $04e0
00beab lda #$04
00bead tsb $00da
00beb0 pei ($8e)
00beb2 pei ($01)
00beb4 pei ($03)
00beb6 lda #$ff
00beb8 sta $14
00beba stz $8e
00bebc stz $8f
00bebe ldx #$0102
00bec1 lda $1090
00bec4 bpl $bec9
00bec6 ldx #$0101
00bec9 stx $03
00becb stz $01
00becd stz $02
00becf lda $7e3664
00bed3 beq $bee9
00bee9 lda $04e0
00beec and #$10
00beee beq $bef4
00bef0 lda $01
00bef2 bra $bef6
00bef4 lda #$80
00bef6 ldx $14
00bef8 cmp $14
00befa sta $14
00befc sta $7e3664
00bf00 beq $bf0a
00bf02 txa
00bf03 cmp #$ff
00bf05 beq $bf0a
00bf07 jsr $b91c
00bf0a ldx #$bf68
00bf0d jsr $9bc4
00bf10 ldx #$fff0
00bf13 stx $8e
00bf15 rep #$30			; set A,X,Y => 16bit
00bf17 lda #$cfb0
00bf1a jsr $b930
00bf1d sep #$20			; set A => 8bit
00bf1f bit #$80
00bf21 bne $bf50
00bf23 xba
00bf24 bit #$80
00bf26 bne $bf49
00bf28 bit #$03
00bf2a bne $bf41
00bf2c bit #$0c
00bf2e beq $bf15
00bf30 lda $04e0
00bf33 and #$30
00bf35 cmp #$30
00bf37 bne $bf15
00bf39 lda $14
00bf3b cmp #$80
00bf3d beq $bef0
00bf3f bra $bef4
00bf41 lda $14
00bf43 cmp #$80
00bf45 bne $bef0
00bf49 lda #$ff
00bf4b sta $14
00bf4d jsr $b91c
00bf50 lda #$04
00bf52 trb $00da
00bf55 ldx #$bf68
00bf58 jsr $9bc4
00bf5b plx
00bf5c stx $03
00bf5e plx
00bf5f stx $01
00bf61 plx
00bf62 stx $8e
00bf64 lda $14
00bf66 plp
00bf67 rts				; exit routine



00bf6b lda #$0504
00bf6e sta $03
00bf70 ldx #$fff0
00bf73 stx $8e
00bf75 bra $bf97
00bf77 jsr $b912
00bf7a lda #$cfb0
00bf7d jsr $b930
00bf80 bne $bf97
00bf82 bit #$0080
00bf85 bne $bf9f
00bf87 bit #$8000
00bf8a beq $bf7a
00bf8c jsr $b91c
00bf8f stz $8e
00bf91 ldx #$c052
00bf94 jmp $9bc4
00bf97 ldx #$c04f
00bf9a jsr $9bc4
00bf9d bra $bf7a
00bf9f lda $02
00bfa1 and #$00ff
00bfa4 bne $bf77
00bfa6 lda $01
00bfa8 and #$00ff
00bfab asl a
00bfac tax
00bfad lda $0e9e,x
00bfb0 and #$00ff
00bfb3 cmp #$00ff
00bfb6 beq $bf77
00bfb8 cmp #$0013
00bfbb beq $bf77
00bfbd cmp #$0011
00bfc0 bcc $c00f
00bfe0 sep #$20			; set A => 8bit
00bfe2 lda $04df
00bfe5 sta $0505
00bfe8 rep #$30			; set A,X,Y => 16bit
00bfea jsr $daaa
00bfed ldx #$c055
00bff0 jsr $9bc4
00bff3 bra $bf97
00bff5 jmp $bf7a
00c00f jsr $c032
00c012 bcc $c019
00c014 bne $bff5
00c019 dec $0e9f,x
00c01c tax
00c01d lda $1016,x
00c020 lsr a
00c021 lsr a
00c022 adc $1014,x
00c025 cmp $1016,x
00c028 bcc $c02d
00c02d sta $1014,x
00c030 bra $bfe0
00c032 phx
00c033 sep #$20			; set A => 8bit
00c035 sta $043a
00c038 jsl $028ae0
00c03c jsr $b908
00c03f rep #$30			; set A,X,Y => 16bit
00c041 lda #$0010
00c044 jsr $bea3
00c047 plx
00c048 and #$00ff
00c04b cmp #$0001
00c04e rts				; exit routine



00c058 lda #$0406
00c05b sta $03
00c05d ldx #$fff0
00c060 stx $8e
00c062 bra $c0ad
00c064 jsr $b912
00c067 lda #$cfb0
00c06a jsr $b930
00c06d bne $c0ad
00c06f bit #$0080
00c072 bne $c0b8
00c074 bit #$8000
00c077 beq $c067
00c079 jsr $b91c
00c07c stz $8e
00c07e ldx #$c1f6
00c081 jmp $9bc4
00c0ad ldx #$c1f3
00c0b0 jsr $9bc4
00c0b3 bra $c067
00c0b5 jmp $c064
00c0b8 lda $01
00c0ba and #$00ff
00c0bd beq $c0d2
00c0bf cmp #$0003
00c0c2 bne $c064
00c0c4 lda $1090
00c0c7 and #$00ff
00c0ca cmp #$00ff
00c0cd beq $c064
00c0cf lda #$0080
00c0d2 tax
00c0d3 lda $1021,x
00c0d6 and #$00f9
00c0d9 bne $c064
00c0db lda #$0007
00c0de sec
00c0df sbc $02
00c0e1 and #$00ff
00c0e4 jsr $97f2
00c0e7 and $1038,x
00c0ea beq $c0b5
00c0ec lda $1018,x
00c0ef and #$00ff
00c0f2 beq $c0b5
00c0f4 lda $02
00c0f6 and #$00ff
00c0f9 beq $c084
00c0fb cmp #$0002
00c0fe bcc $c15b
00c100 beq $c13f
00c102 jsr $c1d1
00c105 beq $c158
00c107 cmp #$0001
00c10a beq $c114
00c10c tax
00c10d lda $1016
00c110 sta $1014
00c113 txa
00c114 cmp #$0000
00c117 beq $c11f
00c11f sep #$20			; set A => 8bit
00c121 ldx #$0000		; clear X
00c124 lda $01
00c126 beq $c12b
00c128 ldx #$0080
00c12b dec $1018,x
00c12e lda $04df
00c131 sta $0505
00c134 rep #$30			; set A,X,Y => 16bit
00c136 ldx #$c055
00c139 jsr $9bc4
00c13c jmp $c0ad
00c15b jsr $c1d1
00c15e beq $c158
00c160 pha
00c161 lda $1025,x
00c164 and #$00ff
00c167 sta $64
00c169 asl a
00c16a adc $64
00c16c lsr a
00c16d clc
00c16e adc #$0032
00c171 sta $98
00c173 tay
00c174 lda $01,s
00c176 cmp #$0001
00c179 beq $c18f
00c17b lda $1016
00c17e jsr $c1ad
00c181 adc $1014
00c184 cmp $1016
00c187 bcc $c18c
00c189 lda $1016
00c18c sta $1014
00c18f sty $98
00c191 lda $01,s
00c193 beq $c1a9
00c195 lda $1096
00c198 jsr $c1ad
00c19b adc $1094
00c19e cmp $1096
00c1a1 bcc $c1a6
00c1a3 lda $1096
00c1a6 sta $1094
00c1a9 pla
00c1aa jmp $c11f
00c1ad sta $9c
00c1af jsl $0096b3
00c1b3 lda $9e
00c1b5 sta $98
00c1b7 lda $a0
00c1b9 sta $9a
00c1bb lda #$0064
00c1be sta $9c
00c1c0 jsl $0096e4
00c1c4 lda $03,s
00c1c6 cmp #$0080
00c1c9 bne $c1cd
00c1cb lsr $9e
00c1cd lda $9e
00c1cf clc
00c1d0 rts				; exit routine



00c1d1 phx
00c1d2 sep #$20			; set A => 8bit
00c1d4 lda $02
00c1d6 clc
00c1d7 adc #$14
00c1d9 sta $043a
00c1dc jsl $028ae0
00c1e0 jsr $b908
00c1e3 lda $04e0
00c1e6 rep #$30			; set A,X,Y => 16bit
00c1e8 jsr $bea3
00c1eb plx
00c1ec and #$00ff
00c1ef cmp #$00ff
00c1f2 rts				; exit routine



00c1f9 lda #$0020
00c1fc tsb $00d6
00c1ff lda #$0602
00c202 sta $03
00c204 lda #$bff0
00c207 sta $8e
00c209 bra $c20e
00c20e rep #$30			; set A,X,Y => 16bit
00c210 lda #$cf30
00c213 jsr $b930
00c216 bne $c238
00c218 bit #$4000
00c21b bne $c22e
00c21d bit #$8000
00c220 beq $c20e
00c222 jsr $b91c
00c225 stz $8e
00c227 lda #$0020
00c22a trb $00d6
00c22d rts				; exit routine



00c238 txa
00c239 sep #$20			; set A => 8bit
00c23b lda #$00
00c23d xba
00c23e cmp $0006
00c241 bne $c246
00c243 jmp $c2e3
00c246 pha
00c247 jsr $b91c
00c24a pla
00c24b cmp #$01
00c24d bcc $c2ae
00c24f beq $c28d
00c251 cmp #$03
00c253 bcc $c280
00c255 beq $c270
00c257 cmp #$05
00c259 bcc $c262
00c25b lda $0e9d
00c25e lsr a
00c25f lsr a
00c260 bra $c273
00c262 rep #$30			; set A,X,Y => 16bit
00c264 lda $0e9c
00c267 lsr a
00c268 lsr a
00c269 sep #$20			; set A => 8bit
00c26b lsr a
00c26c lsr a
00c26d lsr a
00c26e bra $c273
00c270 lda $0e9c
00c273 and #$1f
00c275 inc
00c276 lsr a
00c277 lsr a
00c278 ldx #$0009
00c27b ldy #$0609
00c27e bra $c2bd
00c280 lda $0e9b
00c283 and #$07
00c285 ldx #$0006
00c288 ldy #$0607
00c28b bra $c2bd
00c28d lda $1090
00c290 bpl $c29c
00c292 lda $06
00c294 eor #$02
00c296 and #$fe
00c298 sta $02
00c29a bra $c246
00c29c lda #$80
00c29e and $10a0
00c2a1 beq $c2a5
00c2a3 lda #$ff
00c2a5 inc
00c2a6 ldx #$0003
00c2a9 ldy #$0602
00c2ac bra $c2bd
00c2ae lda #$80
00c2b0 and $0ec6
00c2b3 beq $c2b7
00c2b7 ldx #$0000		; clear X
00c2ba ldy #$0602
00c2bd sty $03
00c2bf sta $01
00c2c1 lda $c359,x
00c2c4 sta $7f56d7
00c2c8 lda $c35a,x
00c2cb sta $7f56d9
00c2cf lda $c35b,x
00c2d2 sta $7f56db
00c2d6 ldx $01
00c2d8 stx $05
00c2da ldx #$c365
00c2dd jsr $9bc4
00c2e0 jmp $c20e
00c2e3 lda $02
00c2e5 beq $c303
00c2e7 cmp #$02
00c2e9 bcc $c2f9
00c2eb bne $c310
00c2ed lda $0e9b
00c2f0 and #$f8
00c2f2 ora $01
00c2f4 sta $0e9b
00c2f7 bra $c30b
00c2f9 lda $10a0
00c2fc eor #$80
00c2fe sta $10a0
00c301 bra $c30b
00c303 lda $0ec6
00c306 eor #$80
00c308 sta $0ec6
00c30b jsr $b908
00c30e bra $c2d6
00c310 cmp #$04
00c312 bcc $c345
00c314 beq $c32a
00c316 lda #$7c
00c318 trb $0e9d
00c31b lda $01
00c31d asl a
00c31e asl a
00c31f asl a
00c320 asl a
00c321 bpl $c325
00c323 lda #$7c
00c325 tsb $0e9d
00c328 bra $c30b
00c32a rep #$30			; set A,X,Y => 16bit
00c32c lda #$03e0
00c32f trb $0e9c
00c332 lda $00
00c334 and #$ff00
00c337 lsr a
00c338 cmp #$0400
00c33b bne $c340
00c33d lda #$03e0
00c340 tsb $0e9c
00c343 bra $c30b
00c345 lda #$1f
00c347 trb $0e9c
00c34a lda $01
00c34c asl a
00c34d asl a
00c34e cmp #$20
00c350 bne $c354
00c352 lda #$1f
00c354 tsb $0e9c
00c357 bra $c30b
00c368 lda #$0301
00c36b sta $03
00c36d ldx #$0c00
00c370 stx $8e
00c372 lda #$8c80
00c375 jsr $b930
00c378 bne $c3bd
00c37a bit #$0080
00c37d bne $c38a
00c37f bit #$8000
00c382 beq $c372
00c384 jsr $b91c
00c387 stz $8e
00c389 rts				; exit routine



00c38a jsr $b908
00c38d sep #$20			; set A => 8bit
00c38f lda $02
00c391 inc
00c392 sta $701ffd
00c396 dec
00c397 rep #$30			; set A,X,Y => 16bit
00c399 and #$00ff
00c39c sta $010e
00c39f jsr $c9f3
00c3a2 lda #$0040
00c3a5 tsb $00de
00c3a8 jsr $cf5f
00c3ab ldx #$c3f8
00c3ae jsr $9bc4
00c3b1 lda $9e
00c3b3 bit #$8000
00c3b6 bne $c384
00c3b8 bit #$0c00
00c3bb beq $c372
00c3bd lda #$0000
00c3c0 sep #$20
00c3c2 lda #$ec
00c3c4 sta $7f56da
00c3c8 sta $7f56dc
00c3cc sta $7f56de
00c3d0 lda $02
00c3d2 cmp $06
00c3d4 beq $c3dd
00c3d6 sta $06
00c3d8 jsr $b91c
00c3db lda $06
00c3dd asl a
00c3de tax
00c3df lda #$e0
00c3e1 sta $7f56da,x
00c3e5 lda #$08
00c3e7 tsb $00d4
00c3ea jsl $0c8000
00c3ee lda #$08
00c3f0 trb $00d4
00c3f3 rep #$30
00c3f5 jmp $c372
00c3fb lda #$0305
00c3fe sta $03
00c400 ldx #$fff0
00c403 stx $8e
00c405 bra $c459
00c407 lda #$cf30
00c40a jsr $b930
00c40d bit #$0300
00c410 bne $c427
00c412 bit #$0c00
00c415 bne $c459
00c417 bit #$8000
00c41a beq $c407
00c41c jsr $b91c
00c41f stz $8e
00c421 ldx #$c464
00c424 jmp $9bc4
00c427 sep #$20			; set A => 8bit
00c429 lda $01
00c42b cmp #$04
00c42d beq $c443
00c42f lda $04
00c431 cmp #$03
00c433 beq $c457
00c435 dec $04
00c437 lda $02
00c439 sbc #$02
00c43b bcs $c43f
00c43f sta $02
00c441 bra $c457
00c443 lda $04
00c445 cmp #$04
00c447 beq $c457
00c449 inc $04
00c44b lda $02
00c44d adc #$02
00c44f cmp #$04
00c451 bne $c455
00c453 lda #$03
00c455 sta $02
00c457 rep #$30			; set A,X,Y => 16bit
00c459 ldx #$c461
00c45c jsr $9bc4
00c45f bra $c407
00c467 lda #$0305
00c46a sta $03
00c46c ldx #$fff0
00c46f stx $8e
00c471 bra $c4b4
00c473 lda #$cf30
00c476 jsr $b930
00c479 bit #$0300
00c47c bne $c493
00c47e bit #$0c00
00c481 bne $c4b4
00c483 bit #$8000
00c486 beq $c473
00c488 jsr $b91c
00c48b stz $8e
00c48d ldx #$c4bf
00c490 jmp $9bc4
00c493 sep #$20			; set A => 8bit
00c495 lda $01
00c497 cmp #$04
00c499 beq $c4a8
00c49b lda #$03
00c49d cmp $04
00c49f beq $c4b2
00c4a1 sta $04
00c4a3 dec
00c4a4 sta $02
00c4a6 bra $c4b2
00c4a8 lda #$01
00c4aa cmp $04
00c4ac beq $c4b2
00c4ae sta $04
00c4b0 stz $02
00c4b2 rep #$30			; set A,X,Y => 16bit
00c4b4 ldx #$c4bc
00c4b7 jsr $9bc4
00c4ba bra $c473
00c4c2 ldx #$fff0
00c4c5 stx $8e
00c4c7 jsl $0096a0
00c4cb lda #$0080
00c4ce and $00d9
00c4d1 beq $c4e1
00c4e1 lda $07
00c4e3 and #$bfcf
00c4e6 beq $c4c7
00c4e8 and #$8000
00c4eb bne $c4f2
00c4ed jsr $b912
00c4f0 bra $c4c7
00c4f2 jsr $b91c
00c4f5 stz $8e
00c4f7 rts				; exit routine



00c4fb jsr $c581
00c4fe jsr $c596
00c501 jsr $c5ab
00c504 jsr $c5c0
00c507 jsr $c624
00c50a ldx #$c53b
00c50d ldy #$5000
00c510 lda #$0006
00c513 mvn $00,$7f
00c516 ldy #$4360
00c519 lda #$0007
00c51c mvn $00,$00
00c51f ldy #$5367
00c522 lda #$0006
00c525 mvn $00,$7f
00c528 ldy #$4370
00c52b lda #$0007
00c52e mvn $00,$00
00c531 sep #$20			; set A => 8bit
00c533 lda #$c0
00c535 tsb $0111
00c538 rep #$30			; set A,X,Y => 16bit
00c53a rts				; exit routine



00c559 pea $007f
00c55c plb
00c55d ldy #$5016
00c560 jsr $c56b
00c563 ldy #$537d
00c566 jsr $c56b
00c569 plb
00c56a rts				; exit routine



00c56b ldx #$000d
00c56e clc
00c56f sep #$20			; set A => 8bit
00c571 lda #$00
00c573 jsr $99ea
00c576 rep #$30			; set A,X,Y => 16bit
00c578 tya
00c579 adc #$0020
00c57c tay
00c57d dex
00c57e bne $c56f
00c580 rts				; exit routine



00c581 lda #$0000
00c584 sta $7f5007
00c588 ldx #$5007
00c58b ldy #$5009
00c58e lda #$01ad
00c591 mvn $7f,$7f
00c594 bra $c615
00c596 lda #$0100
00c599 sta $7f51b7
00c59d ldx #$51b7
00c5a0 ldy #$51b9
00c5a3 lda #$01ad
00c5a6 mvn $7f,$7f
00c5a9 bra $c615
00c5ab lda #$0000
00c5ae sta $7f536e
00c5b2 ldx #$536e
00c5b5 ldy #$5370
00c5b8 lda #$01ad
00c5bb mvn $7f,$7f
00c5be bra $c5ef
00c5c0 lda #$0100
00c5c3 sta $7f551e
00c5c7 ldx #$551e
00c5ca ldy #$5520
00c5cd lda #$01ad
00c5d0 mvn $7f,$7f
00c5d3 bra $c5ef
00c5d5 lda #$0000
00c5d8 sta $7e3007
00c5dc ldx #$3007
00c5df ldy #$3009
00c5e2 lda #$01ad
00c5e5 mvn $7e,$7e
00c5e8 lda #$0120
00c5eb sta $31b5
00c5ee rts				; exit routine



00c5ef tya
00c5f0 sec
00c5f1 sbc #$0042
00c5f4 tay
00c5f5 ldx #$c607
00c5f8 lda $000ec6
00c5fc and #$0080
00c5ff beq $c604
00c601 ldx #$c610
00c604 jmp $c77b
00c615 tya
00c616 sec
00c617 sbc #$0042
00c61a tay
00c61b ldx #$c621
00c61e jmp $c77b
00c624 jmp $c5d5
00c627 jsr $c5d5
00c62a lda #$0060
00c62d ldx #$3025
00c630 jsr $c67a
00c633 ldx #$3035
00c636 bra $c64c
00c638 jsr $c581
00c63b lda #$0030
00c63e ldx #$50f5
00c641 bra $c64c
00c643 jsr $c596
00c646 lda #$0030
00c649 ldx #$52a5
00c64c jsr $c67a
00c64f sec
00c650 sta $0010,x
00c653 sta $0012,x
00c656 sta $0014,x
00c659 sta $0016,x
00c65c sta $0018,x
00c65f sta $001a,x
00c662 sta $001c,x
00c665 sta $001e,x
00c668 tay
00c669 rep #$30			; set A,X,Y => 16bit
00c66b txa
00c66c adc #$000f
00c66f tax
00c670 sep #$20			; set A => 8bit
00c672 tya
00c673 sbc #$07
00c675 bne $c650
00c677 rep #$30			; set A,X,Y => 16bit
00c679 rts				; exit routine



00c67a sep #$20			; set A => 8bit
00c67c sta $0000,x
00c67f sta $0002,x
00c682 sta $0004,x
00c685 sta $0006,x
00c688 sta $0008,x
00c68b sta $000a,x
00c68e sta $000c,x
00c691 sta $000e,x
00c694 rts				; exit routine



00c695 ldy #$521d
00c698 phb				; save databank to stack
00c699 phy
00c69a jsr $c596
00c69d ply
00c69e ldx #$c6a6
00c6a1 jsr $c77b
00c6a4 plb
00c6a5 rts				; exit routine



00c6ab phb				; save databank to stack
00c6ac jsr $c596
00c6af ldx #$c6c6
00c6b2 ldy #$522d
00c6b5 jsr $c77b
00c6b8 jsr $c5c0
00c6bb ldx #$c6d3
00c6be ldy #$5634
00c6c1 jsr $c77b
00c6c4 plb
00c6c5 rts				; exit routine



00c6d8 phb				; save databank to stack
00c6d9 jsr $c596
00c6dc ldx #$c6f3
00c6df ldy #$528d
00c6e2 jsr $c77b
00c6e5 jsr $c5c0
00c6e8 ldx #$c6f6
00c6eb ldy #$5574
00c6ee jsr $c77b
00c6f1 plb
00c6f2 rts				; exit routine



00c707 phb				; save databank to stack
00c708 jsr $c596
00c70b ldx #$c75f
00c70e ldy #$527d
00c711 jsr $c77b
00c714 jsr $c5c0
00c717 ldx #$c764
00c71a ldy #$55b4
00c71d jsr $c77b
00c720 ldx #$55b4
00c723 ldy #$0000
00c726 lda $000101
00c72a jsr $c749
00c72d ldx #$562c
00c730 ldy #$000c
00c733 lda $000102
00c737 jsr $c749
00c73a ldx #$56a4
00c73d ldy #$0018
00c740 lda $000103
00c744 jsr $c749
00c747 plb
00c748 rts				; exit routine



00c749 and #$0080
00c74c beq $c75e
00c75e rts				; exit routine



00c77b phb				; save databank to stack
00c77c phb				; save databank to stack
00c77d pla
00c77e sta $000031
00c782 sep #$20			; set A => 8bit
00c784 lda $000000,x
00c788 beq $c7aa
00c78a xba
00c78b lda $000001,x
00c78f sta $0000,y
00c792 lda #$00
00c794 xba
00c795 dec
00c796 beq $c7a4
00c798 phx
00c799 asl a
00c79a dec
00c79b tyx
00c79c iny
00c79d iny
00c79e jsr $0030
00c7a1 plx
00c7a2 bra $c7a6
00c7a6 inx
00c7a7 inx
00c7a8 bra $c784
00c7aa rep #$30			; set A,X,Y => 16bit
00c7ac rts				; exit routine



00c7ad sep #$20			; set A => 8bit
00c7af lda #$c0
00c7b1 trb $0111
00c7b4 rts				; exit routine



00c7b5 php				; save processor status to stack
00c7b6 sep #$20			; set A => 8bit
00c7b8 lda #$80
00c7ba trb $00d6
00c7bd lda $00aa
00c7c0 and #$f0
00c7c2 sta $0110
00c7c5 lda $00aa
00c7c8 cmp $0110
00c7cb beq $c7d6
00c7cd inc $0110
00c7d0 jsl $0c8000
00c7d4 bra $c7c8
00c7d6 plp
00c7d7 rtl				; exit routine



00c7d8 php				; save processor status to stack
00c7d9 sep #$20			; set A => 8bit
00c7db lda $0110
00c7de sta $00aa
00c7e1 bit #$0f
00c7e3 beq $c7ef
00c7e5 dec
00c7e6 sta $0110
00c7e9 jsl $0c8000
00c7ed bra $c7e1
00c7ef lda #$80
00c7f1 tsb $00d6
00c7f4 lda #$80
00c7f6 sta $2100
00c7f9 sta $0110
00c7fc plp
00c7fd rtl				; exit routine



00c7fe jsr $c638
00c801 jsr $c5ab
00c804 ldx #$c90c
00c807 jsr $9bc4
00c80a ldx #$c903
00c80d jmp $9bc4
00c810 lda $010d
00c813 bpl $c818
00c815 lda #$0000
00c818 and #$ff00
00c81b sta $01
00c81d sep #$20			; set A => 8bit
00c81f lda #$18
00c821 sta $00ab
00c824 jsr $cc0c
00c827 rep #$30			; set A,X,Y => 16bit
00c829 ldx #$c942
00c82c jsr $9bc4
00c82f phb				; save databank to stack
00c830 ldx #$016f
00c833 ldy #$0e04
00c836 lda #$0005
00c839 mvn $00,$00
00c83c lda #$0020
00c83f tsb $00d2
00c842 jsr $c627
00c845 ldx #$51c5
00c848 ldy #$5015
00c84b lda #$019f
00c84e mvn $7f,$7f
00c851 ldx #$552c
00c854 ldy #$537c
00c857 lda #$019f
00c85a mvn $7f,$7f
00c85d plb
00c85e ldx #$c903
00c861 jsr $9bc4
00c864 lda #$0600
00c867 sta $01
00c869 sta $05
00c86b rts				; exit routine



00c86c lda #$0040
00c86f tsb $00db
00c872 bra $c87a
00c874 lda #$0001
00c877 tsb $00da
00c87a jsr $c643
00c87d jsr $c5c0
00c880 ldx #$c90c
00c883 bra $c8bd
00c885 ldx #$c92a
00c888 bra $c8bd
00c88a ldx #$c930
00c88d bra $c8bd
00c88f lda #$0080
00c892 trb $00d9
00c895 ldx #$c936
00c898 bra $c8bd
00c89a lda #$0080
00c89d tsb $00db
00c8a0 ldx #$c93c
00c8a3 bra $c8bd
00c8bd phx
00c8be jsr $9bc4
00c8c1 plx
00c8c2 inx
00c8c3 inx
00c8c4 inx
00c8c5 ldy #$0017
00c8c8 lda #$0002
00c8cb mvn $00,$00
00c8ce jsr $cad9
00c8d1 ldx #$c903
00c8d4 jmp $9bc4
00c8d7 ldx #$c912
00c8da bra $c8e9
00c8dc ldx #$c918
00c8df bra $c8e9
00c8e1 ldx #$c91e
00c8e4 bra $c8e9
00c8e6 ldx #$c924
00c8e9 phx
00c8ea jsr $9bc4
00c8ed plx
00c8ee inx
00c8ef inx
00c8f0 inx
00c8f1 lda #$000c
00c8f4 jsl $0c8000
00c8f8 pha
00c8f9 phx
00c8fa jsr $9bc4
00c8fd plx
00c8fe pla
00c8ff dec
00c900 bne $c8f4
00c902 rts				; exit routine



00c948 lda $015f
00c94b and #$00ff
00c94e sta $98
00c950 lda #$038c
00c953 sta $9c
00c955 jsl $0096b3
00c959 lda $9e
00c95b clc
00c95c adc #$0000
00c95f sta $0b
00c961 rts				; exit routine



00c962 php				; save processor status to stack
00c963 sep #$20			; set A => 8bit
00c965 rep #$10			; set X,Y => 16bit
00c967 pha
00c968 lda #$7f
00c96a sta $61
00c96c pla
00c96d plp
00c96e rts				; exit routine



00c96f php				; save processor status to stack
00c970 sep #$20			; set A => 8bit
00c972 rep #$10			; set X,Y => 16bit
00c974 pha
00c975 lda #$70
00c977 sta $61
00c979 pla
00c97a plp
00c97b rts				; exit routine



00c97c pha
00c97d phx
00c97e lda #$4646
00c981 sta $0e
00c983 lda #$2130
00c986 sta $10
00c988 ldx #$01c3
00c98b lda #$0000
00c98e clc
00c98f adc [$5f]
00c991 inc $5f
00c993 inc $5f
00c995 dex
00c996 bne $c98f
00c998 sta $12
00c99a plx
00c99b pla
00c99c rts				; exit routine



00c99d ldx #$0000		; clear X
00c9a0 lda $0e,x
00c9a2 cmp [$0b]
00c9a4 bne $c9b1
00c9a6 inc $0b
00c9a8 inc $0b
00c9aa inx
00c9ab inx
00c9ac cpx #$0006
00c9af bne $c9a0
00c9b1 rts				; exit routine



00c9b2 phb				; save databank to stack
00c9b3 phx
00c9b4 phy
00c9b5 pha
00c9b6 ldx #$3000
00c9b9 stx $5f
00c9bb jsr $c962
00c9be jsr $c97c
00c9c1 jsr $c94b
00c9c4 ldy $0b
00c9c6 ldx #$000e
00c9c9 lda #$0005
00c9cc mvn $00,$70
00c9cf sty $5f
00c9d1 ldx #$3000
00c9d4 lda #$0385
00c9d7 mvn $7f,$70
00c9da lda $12
00c9dc jsr $c96f
00c9df jsr $c97c
00c9e2 cmp $12
00c9e4 bne $c9eb
00c9e6 jsr $c99d
00c9e9 beq $c9ee
00c9ee pla
00c9ef ply
00c9f0 plx
00c9f1 plb
00c9f2 rts				; exit routine



00c9f3 php				; save processor status to stack
00c9f4 rep #$30			; set A,X,Y => 16bit
00c9f6 phb				; save databank to stack
00c9f7 pha
00c9f8 phd				; save direct page to stack
00c9f9 phx
00c9fa phy
00c9fb pha
00c9fc stz $8e
00c9fe phb				; save databank to stack
00c9ff ldx #$1000
00ca02 ldy #$3000
00ca05 lda #$004f
00ca08 mvn $00,$7f
00ca0b ldx #$1080
00ca0e lda #$004f
00ca11 mvn $00,$7f
00ca14 ldx #$0e84
00ca17 lda #$017b
00ca1a mvn $00,$7f
00ca1d plb
00ca1e pla
00ca1f ldx #$0003
00ca22 jsr $c9b2
00ca25 clc
00ca26 adc #$0003
00ca29 dex
00ca2a bne $ca22
00ca2c lda #$fff0
00ca2f sta $8e
00ca31 jmp $981b
00ca34 phx
00ca35 phy
00ca36 pha
00ca37 lda $01,s
00ca39 jsr $c94b
00ca3c clc
00ca3d adc #$0006
00ca40 sta $5f
00ca42 jsr $c96f
00ca45 jsr $c97c
00ca48 jsr $c99d
00ca4b bne $ca74
00ca4d lda $01,s
00ca4f jsr $c94b
00ca52 clc
00ca53 adc #$0006
00ca56 tax
00ca57 ldy #$3000
00ca5a lda #$0385
00ca5d mvn $70,$7f
00ca60 lda $12
00ca62 ldx #$3000
00ca65 stx $5f
00ca67 jsr $c962
00ca6a jsr $c97c
00ca6d cmp $12
00ca6f bne $ca37
00ca71 clc
00ca72 bra $ca7f
00ca74 lda $01,s
00ca76 jsr $c94b
00ca79 lda #$0000
00ca7c sta [$0b]
00ca7e sec
00ca7f pla
00ca80 ply
00ca81 plx
00ca82 rts				; exit routine



00ca83 pea $cad5
00ca86 php				; save processor status to stack
00ca87 rep #$30			; set A,X,Y => 16bit
00ca89 phb				; save databank to stack
00ca8a pha
00ca8b phd				; save direct page to stack
00ca8c phx
00ca8d phy
00ca8e pha
00ca8f stz $8e
00ca91 lda $01,s
00ca93 ldx #$0003
00ca96 jsr $ca34
00ca99 bcc $caa7
00ca9b adc #$0002
00ca9e dex
00ca9f bne $ca96
00caa1 pla
00caa2 lda #$ffff
00caa5 bra $cacc
00caa7 ldx #$3000
00caaa ldy #$1000
00caad lda #$004f
00cab0 mvn $7f,$00
00cab3 ldy #$1080
00cab6 lda #$004f
00cab9 mvn $7f,$00
00cabc ldy #$0e84
00cabf lda #$017b
00cac2 mvn $7f,$00
00cac5 pla
00cac6 jsr $c9f3
00cac9 lda #$0000
00cacc sta $64
00cace lda #$fff0
00cad1 sta $8e
00cad3 jmp $981b
00cad6 lda $64
00cad8 rts				; exit routine



00cad9 php				; save processor status to stack
00cada rep #$30			; set A,X,Y => 16bit
00cadc phb				; save databank to stack
00cadd pha
00cade phd				; save direct page to stack
00cadf phx
00cae0 phy
00cae1 lda #$0000
00cae4 tcd
00cae5 sep #$20			; set A => 8bit
00cae7 lda #$01
00cae9 and $00da
00caec bne $cb0c
00caee lda #$40
00caf0 and $00db
00caf3 bne $cb27
00caf5 ldx #$9300
00caf8 stx $2130
00cafb lda #$02
00cafd and $00da
00cb00 bne $cb31
00cb02 lda #$80
00cb04 and $00db
00cb07 bne $cb6e
00cb09 jmp $cb96
00cb0c lda #$01
00cb0e trb $00da
00cb11 jsr $cc29
00cb14 ldx #$5555
00cb17 stx $0e04
00cb1a stx $0e06
00cb1d stx $0e08
00cb20 lda #$80
00cb22 trb $00de
00cb25 bra $cb99
00cb27 lda #$40
00cb29 trb $00db
00cb2c jsr $ccdd
00cb2f bra $cb99
00cb6e jsr $cd42
00cb71 jsr $cd80
00cb74 jsr $cc8e
00cb77 jsl $0c8000
00cb7b lda #$e0
00cb7d sta $7f56da
00cb81 sta $7f56de
00cb85 jsl $0c8000
00cb89 lda #$80
00cb8b trb $00db
00cb8e lda #$08
00cb90 trb $00d4
00cb93 jmp $981b
00cb96 jsr $cd42
00cb99 jsr $cd80
00cb9c jsr $cd62
00cb9f jsl $0c8000
00cba3 lda #$e0
00cba5 sta $2132
00cba8 ldx #$0000		; clear X
00cbab stx $2130
00cbae jmp $981b
00cbb1 rep #$30			; set A,X,Y => 16bit
00cbb3 phb				; save databank to stack
00cbb4 ldx #$cbdd
00cbb7 ldy #$56d7
00cbba lda #$0008
00cbbd mvn $00,$7f
00cbc0 plb
00cbc1 lda #$0080
00cbc4 tsb $00da
00cbc7 lda #$0020
00cbca tsb $0111
00cbcd lda $02
00cbcf and #$00ff
00cbd2 inc
00cbd3 asl a
00cbd4 tax
00cbd5 sep #$20			; set A => 8bit
00cbd7 lda #$08
00cbd9 tsb $00d4
00cbdc rts				; exit routine



00cc0c ldy #$9300
00cc0f sty $2130
00cc12 jsr $cbb1
00cc15 lda #$e0
00cc17 sta $7f56d8
00cc1b sta $7f56d8,x
00cc1f jsl $0c8000
00cc23 lda #$08
00cc25 trb $00d4
00cc28 rts				; exit routine



00cc29 lda #$08
00cc2b tsb $00d4
00cc2e ldx #$0007
00cc31 jsl $0c8000
00cc35 lda $7f56d8
00cc39 jsr $cc7b
00cc3c sta $7f56d8
00cc40 lda $7f56da
00cc44 jsr $cc7b
00cc47 sta $7f56da
00cc4b lda $7f56dc
00cc4f jsr $cc7b
00cc52 sta $7f56dc
00cc56 lda $7f56de
00cc5a jsr $cc7b
00cc5d sta $7f56de
00cc61 ldy $17
00cc63 jsr $9d75
00cc66 sty $17
00cc68 dex
00cc69 bne $cc31
00cc6b lda #$08
00cc6d trb $00d4
00cc70 lda #$20
00cc72 trb $0111
00cc75 lda #$80
00cc77 trb $00da
00cc7a rts				; exit routine



00cc7b clc
00cc7c adc $00cc86,x
00cc80 cmp #$f0
00cc82 bcc $cc86
00cc84 lda #$ef
00cc86 rts				; exit routine



00cc8e rep #$30			; set A,X,Y => 16bit
00cc90 phb				; save databank to stack
00cc91 ldx #$ccd4
00cc94 ldy #$56d7
00cc97 lda #$0008
00cc9a mvn $00,$7f
00cc9d plb
00cc9e lda #$0080
00cca1 tsb $00da
00cca4 lda #$0020
00cca7 tsb $0111
00ccaa sep #$20			; set A => 8bit
00ccac lda #$08
00ccae tsb $00d4
00ccb1 lda #$e9
00ccb3 ldy $17
00ccb5 jsr $9d75
00ccb8 sty $17
00ccba jsl $0c8000
00ccbe sta $7f56da
00ccc2 sta $7f56de
00ccc6 dec
00ccc7 dec
00ccc8 cmp #$e1
00ccca bne $ccb3
00cccc ldy $17
00ccce jsr $9d75
00ccd1 sty $17
00ccd3 rts				; exit routine



00ccdd lda #$08
00ccdf tsb $00d4
00cce2 ldx #$0007
00cce5 jsl $0c8000
00cce9 lda $7f56d8
00cced jsr $cd2f
00ccf0 sta $7f56d8
00ccf4 lda $7f56da
00ccf8 jsr $cd2f
00ccfb sta $7f56da
00ccff lda $7f56dc
00cd03 jsr $cd2f
00cd06 sta $7f56dc
00cd0a lda $7f56de
00cd0e jsr $cd2f
00cd11 sta $7f56de
00cd15 ldy $17
00cd17 jsr $9d75
00cd1a sty $17
00cd1c dex
00cd1d bne $cce5
00cd1f lda #$08
00cd21 trb $00d4
00cd24 lda #$20
00cd26 trb $0111
00cd29 lda #$80
00cd2b trb $00da
00cd2e rts				; exit routine



00cd2f clc
00cd30 adc $00cd3a,x
00cd34 cmp #$f0
00cd36 bcc $cd3a
00cd38 lda #$ef
00cd3a rts				; exit routine



00cd42 ldx #$0007
00cd45 jsl $0c8000
00cd49 lda $00cd5a,x
00cd4d sta $2132
00cd50 ldy $17
00cd52 jsr $9d75
00cd55 sty $17
00cd57 dex
00cd58 bne $cd45
00cd5a rts				; exit routine



00cd62 ldx #$0005
00cd65 jsl $0c8000
00cd69 lda $00cd7a,x
00cd6d sta $2132
00cd70 ldy $17
00cd72 jsr $9d75
00cd75 sty $17
00cd77 dex
00cd78 bne $cd65
00cd7a rts				; exit routine



00cd80 rep #$30			; set A,X,Y => 16bit
00cd82 phb				; save databank to stack
00cd83 ldx #$51c5
00cd86 ldy #$5015
00cd89 lda #$019f
00cd8c mvn $7f,$7f
00cd8f ldx #$552c
00cd92 ldy #$537c
00cd95 lda #$019f
00cd98 mvn $7f,$7f
00cd9b plb
00cd9c sep #$20			; set A => 8bit
00cd9e lda #$31
00cda0 sta $2121
00cda3 lda $0e9c
00cda6 sta $2122
00cda9 lda $0e9d
00cdac sta $2122
00cdaf lda #$20
00cdb1 tsb $00d2
00cdb4 rts				; exit routine



00cdb5 lda $00ab
00cdb8 and #$00ff
00cdbb cmp #$0018
00cdbe beq $cde9
00cdc0 lda $00ab
00cdc3 sec
00cdc4 sbc #$0008
00cdc7 sta $00ab
00cdca jsr $ce27
00cdcd lda $00ab
00cdd0 and #$00ff
00cdd3 asl a
00cdd4 tax
00cdd5 ldy #$0010
00cdd8 clc
00cdd9 lda $7e3015,x
00cddd adc #$0008
00cde0 sta $7e3005,x
00cde4 inx
00cde5 inx
00cde6 dey
00cde7 bne $cdd9
00cde9 rts				; exit routine



00cdea sep #$20			; set A => 8bit
00cdec lda $00ac
00cdef clc
00cdf0 adc $00ae
00cdf3 sta $00ac
00cdf6 sbc #$02
00cdf8 bcc $cdfd
00cdfa sta $00ac
00cdfd lda #$00
00cdff adc $00ad
00ce02 sta $0064
00ce05 lda $00ab
00ce08 sec
00ce09 sbc #$10
00ce0b rep #$30			; set A,X,Y => 16bit
00ce0d and #$00ff
00ce10 tay
00ce11 sep #$20			; set A => 8bit
00ce13 ldx #$0020
00ce16 lda $7e3025
00ce1a rts				; exit routine



00ce1b sta $7e3005,x
00ce1f inx
00ce20 inx
00ce21 dey
00ce22 bne $ce1b
00ce24 rep #$30			; set A,X,Y => 16bit
00ce26 rts				; exit routine



00ce27 jsr $cdea
00ce2a clc
00ce2b adc $0064
00ce2e bra $ce1b
00ce30 lda $00ab
00ce33 and #$00ff
00ce36 cmp #$0078
00ce39 beq $ce61
00ce3b lda $00ab
00ce3e clc
00ce3f adc #$0008
00ce42 sta $00ab
00ce45 and #$00ff
00ce48 asl a
00ce49 tax
00ce4a ldy #$0008
00ce4d sec
00ce4e lda $7e3003,x
00ce52 sbc #$0008
00ce55 sta $7e3013,x
00ce59 dex
00ce5a dex
00ce5b dey
00ce5c bne $ce4e
00ce5e jsr $ce62
00ce61 rts				; exit routine



00ce62 jsr $cdea
00ce65 sec
00ce66 sbc $0064
00ce69 bra $ce1b
00ce6b sep #$30			; set A,X,Y => 8bit
00ce6d lda $00b0
00ce70 beq $cebd
00ce72 dec $00b0
00ce75 lda $00af
00ce78 sec
00ce79 sbc $00b1
00ce7c sta $00af
00ce7f rep #$30			; set A,X,Y => 16bit
00ce81 and #$00ff
00ce84 cmp #$0010
00ce87 bcc $cebe
00ce89 asl a
00ce8a tax
00ce8b lda $00b1
00ce8e and #$00ff
00ce91 adc #$0008
00ce94 tay
00ce95 cmp #$0010
00ce98 bne $cead
00ce9a clc
00ce9b lda $7f5045,x
00ce9f adc #$0008
00cea2 sta $7f5035,x
00cea6 inx
00cea7 inx
00cea8 dey
00cea9 bne $ce9b
00ceab bra $cebd
00cead lda $7f503d,x
00ceb1 adc #$0004
00ceb4 sta $7f5035,x
00ceb8 inx
00ceb9 inx
00ceba dey
00cebb bne $cead
00cebd rts				; exit routine



00cebe cmp #$0008
00cec1 bcc $cebd
00cec3 ldy #$0008
00cec6 ldx #$0010
00cec9 clc
00ceca lda $7f5045,x
00cece adc #$0008
00ced1 sta $7f5045,x
00ced5 inx
00ced6 inx
00ced7 dey
00ced8 bne $ceca
00ceda rts				; exit routine



00cedb sep #$30			; set A,X,Y => 8bit
00cedd lda $00b0
00cee0 beq $cf43
00cee2 dec $00b0
00cee5 lda $00af
00cee8 clc
00cee9 adc $00b1
00ceec sta $00af
00ceef rep #$30			; set A,X,Y => 16bit
00cef1 and #$00ff
00cef4 cmp #$0011
00cef7 bcc $cf44
00cef9 asl a
00cefa tax
00cefb ldy #$0008
00cefe lda $00b1
00cf01 and #$00ff
00cf04 cmp #$0008
00cf07 beq $cf23
00cf09 sec
00cf0a lda $7f503b,x
00cf0e sbc #$0004
00cf11 sta $7f5043,x
00cf15 dex
00cf16 dex
00cf17 dey
00cf18 bne $cf0a
00cf1a lda $7f5045
00cf1e ldy #$0004
00cf21 bra $cf3a
00cf23 lda $7f5033,x
00cf27 sbc #$0008
00cf2a sta $7f5043,x
00cf2e dex
00cf2f dex
00cf30 dey
00cf31 bne $cf23
00cf33 lda $7f5045
00cf37 ldy #$0008
00cf3a sta $7f5043,x
00cf3e dex
00cf3f dex
00cf40 dey
00cf41 bne $cf3a
00cf43 rts				; exit routine



00cf44 cmp #$0010
00cf47 bcc $cf43
00cf49 eor #$ffff
00cf4c adc #$0090
00cf4f ldy #$0008
00cf52 ldx #$0010
00cf55 sta $7f5045,x
00cf59 inx
00cf5a inx
00cf5b dey
00cf5c bne $cf55
00cf5e rts				; exit routine



00cf5f php				; save processor status to stack
00cf60 phd				; save direct page to stack
00cf61 rep #$30			; set A,X,Y => 16bit
00cf63 lda #$0000
00cf66 tcd
00cf67 lda #$0000
00cf6a jsr $cf82
00cf6d lda #$0001
00cf70 jsr $cf82
00cf73 lda #$0002
00cf76 jsr $cf82
00cf79 lda #$0010
00cf7c tsb $00d2
00cf7f pld
00cf80 plp
00cf81 rts				; exit routine



00cf82 pha
00cf83 jsr $c94b
00cf86 clc
00cf87 adc #$00b4
00cf8a tax
00cf8b lda $700000,x
00cf8f dec
00cf90 and #$0003
00cf93 asl a
00cf94 sta $64
00cf96 asl a
00cf97 adc $64
00cf99 adc #$cfa5
00cf9c tay
00cf9d pla
00cf9e asl a
00cf9f tax
00cfa0 tya
00cfa1 sta $0107,x
00cfa4 rts				; exit routine



00cfbd sep #$20			; set A => 8bit
00cfbf dec $015f
00cfc2 bpl $cfc7
00cfc7 dec $0160
00cfca bpl $cfcf
00cfcc inc $0160
00cfcf dec $0161
00cfd2 bpl $cfd7
00cfd4 inc $0161
00cfd7 rep #$30			; set A,X,Y => 16bit
00cfd9 lda $015e
00cfdc and #$1f00
00cfdf asl a
00cfe0 asl a
00cfe1 sta $0162
00cfe4 lda $015f
00cfe7 and #$1f00
00cfea lsr a
00cfeb lsr a
00cfec lsr a
00cfed tsb $0162
00cff0 lda $0161
00cff3 and #$001f
00cff6 tsb $0162
00cff9 sep #$20			; set A => 8bit
00cffb jsl $0c8000
00cfff lda #$31
00d001 sta $2121
00d004 lda $0162
00d007 sta $2122
00d00a lda $0163
00d00d sta $2122
00d010 rts				; exit routine



00d011 php				; save processor status to stack
00d012 rep #$30			; set A,X,Y => 16bit
00d014 pha
00d015 lda $008e
00d018 and #$4030
00d01b eor #$ffff
00d01e and $0015
00d021 beq $d026
00d023 jsr $b912
00d026 pla
00d027 plp
00d028 rts				; exit routine



00d029 php				; save processor status to stack
00d02a phd				; save direct page to stack
00d02b phb				; save databank to stack
00d02c phk
00d02d plb
00d02e sep #$20			; set A => 8bit
00d030 rep #$10			; set X,Y => 16bit
00d032 pea $0000
00d035 pld
00d036 lda #$03
00d038 sta $19
00d03a lda [$17]
00d03c cmp #$04
00d03e beq $d045
00d040 jsr $d04c
00d043 bra $d048
00d048 plb
00d049 pld
00d04a plp
00d04b rtl				; exit routine



00d04c lda #$08
00d04e and $00da
00d051 bne $d06b
00d053 lda #$08
00d055 tsb $00da
00d058 jsl $0c8000
00d05c jsl $0096a0
00d060 pei ($17)
00d062 ldx #$d097
00d065 jsr $9bc4
00d068 plx
00d069 stx $17
00d06b lda #$03
00d06d sta $19
00d06f jmp $9d75
00d0a0 php				; save processor status to stack
00d0a1 phb				; save databank to stack
00d0a2 phd				; save direct page to stack
00d0a3 rep #$30			; set A,X,Y => 16bit
00d0a5 pha
00d0a6 phx
00d0a7 phy
00d0a8 lda #$0000
00d0ab tcd
00d0ac lda #$0010
00d0af tsb $00da
00d0b2 stz $8e
00d0b4 ldx #$d1b5
00d0b7 ldy #$0c30
00d0ba lda #$000f
00d0bd mvn $00,$00
00d0c0 sep #$20			; set A => 8bit
00d0c2 lda $1090
00d0c5 bpl $d0ca
00d0c7 sta $10a1
00d0ca lda #$ff
00d0cc sta $19a5
00d0cf lda #$10
00d0d1 trb $00d6
00d0d4 lda $7e365e
00d0d8 jsr $d1a9
00d0db sta $7e365e
00d0df lda $7e3663
00d0e3 jsr $d1a9
00d0e6 sta $7e3663
00d0ea rep #$30			; set A,X,Y => 16bit
00d0ec lda #$5555
00d0ef sta $0e02
00d0f2 php				; save processor status to stack
00d0f3 phd				; save direct page to stack
00d0f4 jsl $02e5ac
00d0f8 pld
00d0f9 plp
00d0fa ldx #$d1c5
00d0fd jsr $9bc4
00d100 lda $1090
00d103 ora #$ff00
00d106 tax
00d107 lda #$00c0
00d10a inx
00d10b beq $d115
00d10d and $10a1
00d110 beq $d11a
00d112 lda #$00c0
00d115 and $1021
00d118 bne $d15c
00d11a lda #$00f8
00d11d trb $1021
00d120 trb $10a1
00d123 lda $1014
00d126 bne $d12b
00d128 inc $1014
00d12b lda $1094
00d12e bne $d133
00d130 inc $1094
00d133 jsl $00c7d8
00d137 lda #$008f
00d13a trb $0111
00d13d lda #$0010
00d140 tsb $00d6
00d143 jsl $0c8000
00d147 jsl $0096a0
00d14b lda #$0010
00d14e trb $00da
00d151 jsl $0192a1
00d155 ply
00d156 plx
00d157 pla
00d158 pld
00d159 plb
00d15a plp
00d15b rtl				; exit routine
00d15c ldx #$d1a6
00d15f jsr $9bc4
00d162 lda $9e
00d164 beq $d0fa
00d166 lda #$0010
00d169 trb $00da
00d16c jsl $0c8000
00d170 sep #$30
00d172 stz $2130
00d175 lda #$b7
00d177 sta $2131
00d17a lda #$c0
00d17c sta $2132
00d17f ldy #$0f
00d181 jsl $0c8000
00d185 jsl $0c8000
00d189 jsl $0c8000
00d18d jsl $0c8000
00d191 inc
00d192 dey
00d193 sta $2132
00d196 sty $0110
00d199 bne $d181
00d19b stz $4200
00d19e lda #$80
00d1a0 sta $2100
00d1a3 jmp $803a



00d1a9 bmi $d1b4
00d1ab cmp #$02
00d1ad bcc $d1b2
00d1af lda #$02
00d1b1 rts				; exit routine



00d1b2 lda #$00
00d1b4 rts				; exit routine



00d1c8 pea $2100
00d1cb pld
00d1cc sep #$20			; set A => 8bit
00d1ce rep #$10			; set X,Y => 16bit
00d1d0 ldx $0017
00d1d3 phx
00d1d4 jsl $0c8000
00d1d8 lda #$80
00d1da sta $15
00d1dc ldx #$2ff0
00d1df stx $16
00d1e1 ldx #$0000		; clear X
00d1e4 stx $18
00d1e6 stx $18
00d1e8 stx $18
00d1ea stx $18
00d1ec stx $18
00d1ee stx $18
00d1f0 stx $18
00d1f2 stx $18
00d1f4 ldx #$ff00
00d1f7 stx $18
00d1f9 stx $18
00d1fb stx $18
00d1fd stx $18
00d1ff stx $18
00d201 stx $18
00d203 stx $18
00d205 stx $18
00d207 php				; save processor status to stack
00d208 phb				; save databank to stack
00d209 phd				; save direct page to stack
00d20a jsl $028000
00d20e pld
00d20f plb
00d210 plp
00d211 jsl $0c8000
00d215 lda #$80
00d217 sta $15
00d219 rep #$30			; set A,X,Y => 16bit
00d21b lda #$ff00
00d21e sta $00f0
00d221 ldx #$2ff0
00d224 stx $16
00d226 pea $0004
00d229 plb
00d22a ldx #$97e8
00d22d ldy #$0001
00d230 jsl $008ddf		; call routine "Copy tiles to VRAM (00:8ddf)"
00d234 plb
00d235 plx
00d236 stx $0017
00d239 rtl				; exit routine



00d23a sep #$30			; set A,X,Y => 8bit
00d23c jsl $0c8000
00d240 jsl $0c8000
00d244 lda #$10
00d246 tsb $00d2
00d249 jsl $0c8000
00d24d rep #$30			; set A,X,Y => 16bit
00d24f ldx #$d26b
00d252 ldy #$5007
00d255 lda #$000c
00d258 mvn $00,$7f
00d25b ldy #$4360
00d25e lda #$0004
00d261 mvn $00,$00
00d264 lda #$0040
00d267 tsb $0111
00d26a rts				; exit routine



00d27d sep #$30			; set A,X,Y => 8bit
00d27f jsl $0c8000
00d283 lda #$0d
00d285 sta $2121
00d288 lda $0e9c
00d28b sta $2122
00d28e lda $0e9d
00d291 sta $2122
00d294 lda #$1d
00d296 sta $2121
00d299 lda $0e9c
00d29c sta $2122
00d29f lda $0e9d
00d2a2 sta $2122
00d2a5 lda #$40
00d2a7 trb $0111
00d2aa stz $210e
00d2ad stz $210e
00d2b0 rts				; exit routine



00d2b1 sep #$30			; set A,X,Y => 8bit
00d2b3 lda #$40
00d2b5 trb $0111
00d2b8 lda $0111
00d2bb sta $420c
00d2be rts				; exit routine



00d2bf lda $9e
00d2c1 sta $7f500e
00d2c5 rts				; exit routine



00d2c6 php				; save processor status to stack
00d2c7 phb				; save databank to stack
00d2c8 phd				; save direct page to stack
00d2c9 phk
00d2ca plb
00d2cb rep #$30			; set A,X,Y => 16bit
00d2cd pha
00d2ce phx
00d2cf phy
00d2d0 lda #$0000
00d2d3 tcd
00d2d4 sep #$20			; set A => 8bit
00d2d6 ldx #$0103
00d2d9 stx $03
00d2db lda #$00
00d2dd sta $01
00d2df stz $02
00d2e1 sta $05
00d2e3 stz $06
00d2e5 lda #$40
00d2e7 trb $1020
00d2ea jsr $daaa
00d2ed ldx #$d3fe
00d2f0 jsr $9bc4
00d2f3 sep #$20			; set A => 8bit
00d2f5 rep #$10			; set X,Y => 16bit
00d2f7 ldx #$d3f5
00d2fa jsr $9bc4
00d2fd ldx #$d3fb
00d300 jsr $9bc4
00d303 ldx #$fff0
00d306 stx $8e
00d308 ldx #$d3f8
00d30b jsr $9bc4
00d30e jsl $0096a0
00d312 ldx $07
00d314 stx $15
00d316 lda $16
00d318 bit #$03
00d31a bne $d308
00d31c lda $15
00d31e bit #$80
00d320 bne $d327
00d322 jsr $d011
00d325 bra $d30e
00d327 lda $01
00d329 sta $7e3659
00d32d beq $d365
00d32f dec
00d330 beq $d339
00d332 ldx #$4000
00d335 stx $90
00d337 bra $d30e
00d339 jsr $b908
00d33c lda #$40
00d33e tsb $1020
00d341 jsr $d3b7
00d344 ldx #$d3f2
00d347 jsr $9bc4
00d34a rep #$30			; set A,X,Y => 16bit
00d34c stz $8e
00d34e ply
00d34f plx
00d350 pla
00d351 pld
00d352 plb
00d353 plp
00d354 rtl				; exit routine



00d355 plx
00d356 stx $03
00d358 plx
00d359 stx $01
00d35b stx $05
00d35d lda $16
00d35f and #$80
00d361 bne $d2f3
00d363 bra $d341
00d365 jsr $b908
00d368 stz $8e
00d36a stz $8f
00d36c pei ($01)
00d36e pei ($03)
00d370 stz $14
00d372 lda $1021
00d375 and #$f8
00d377 bne $d382
00d379 jsr $d429
00d37c lda $16
00d37e and #$80
00d380 bne $d355
00d382 inc $14
00d384 lda $1090
00d387 inc
00d388 beq $d355
00d38a lda $10a1
00d38d and #$f8
00d38f bne $d355
00d391 lda $10a0
00d394 and #$80
00d396 bne $d355
00d398 jsr $d429
00d39b lda $16
00d39d and #$80
00d39f beq $d355
00d3b7 lda #$30
00d3b9 trb $1020
00d3bc trb $10a0
00d3bf lda $1050
00d3c2 cmp #$11
00d3c4 bne $d3cb
00d3c6 lda #$20
00d3c8 tsb $10a0
00d3cb lda $10d0
00d3ce cmp #$11
00d3d0 bne $d3d7
00d3d2 lda #$30
00d3d4 tsb $1020
00d3d7 lda $1050
00d3da cmp #$30
00d3dc bne $d3e4
00d3de lda $1052
00d3e1 jsr $db40
00d3e4 lda $10d0
00d3e7 cmp #$30
00d3e9 bne $d3f1
00d3f1 rts				; exit routine



00d401 php				; save processor status to stack
00d402 rep #$20			; set A => 16bit
00d404 sep #$10			; set X,Y => 8bit
00d406 ldx $14
00d408 beq $d417
00d40a lda #$4000
00d40d ldx $1050
00d410 bne $d422
00d412 lda #$4030
00d415 bra $d422
00d417 lda #$0040
00d41a and $00d9
00d41d beq $d422
00d41f lda #$0030
00d422 eor #$fff0
00d425 sta $8e
00d427 plp
00d428 rts				; exit routine



00d429 ldx #$0202
00d42c stx $03
00d42e ldx #$0000		; clear X
00d431 lda $14
00d433 beq $d438
00d435 ldx #$0005
00d438 rep #$30			; set A,X,Y => 16bit
00d43a lda $7e365a,x
00d43e sta $01
00d440 sta $05
00d442 sep #$20			; set A => 8bit
00d444 lda #$04
00d446 tsb $00da
00d449 jsr $d53d
00d44c ldx #$d57b
00d44f jsr $9bc4
00d452 ldx #$d581
00d455 jsr $9bc4
00d458 jsr $d401
00d45b ldx #$d57e
00d45e jsr $9bc4
00d461 jsl $0096a0
00d465 ldx $07
00d467 stx $15
00d469 beq $d461
00d46b lda $16
00d46d bit #$80
00d46f bne $d4d5
00d471 bit #$0f
00d473 bne $d45b
00d475 lda $15
00d477 bit #$80
00d479 bne $d480
00d47b jsr $d011
00d47e bra $d461
00d480 jsr $b908
00d483 stz $8e
00d485 stz $8f
00d487 jsr $d552
00d48a lda $02
00d48c asl a
00d48d ora $01
00d48f beq $d4e5
00d491 cmp #$02
00d493 bcc $d4c8
00d495 beq $d4bb
00d497 lda #$04
00d499 sta $04e0
00d49c jsr $d727
00d49f lda $16
00d4a1 bit #$80
00d4a3 bne $d4b9
00d4a5 ldx #$0000		; clear X
00d4a8 lda $14
00d4aa beq $d4af
00d4ac ldx #$0080
00d4af eor $1051,x
00d4b2 asl a
00d4b3 asl a
00d4b4 asl a
00d4b5 sec
00d4b6 rol a
00d4b7 bra $d507
00d4b9 bra $d449
00d4bb jsr $d58a
00d4be lda $16
00d4c0 bit #$80
00d4c2 bne $d4b9
00d4c4 lda #$30
00d4c6 bra $d507
00d4c8 jsr $d668
00d4cb lda $16
00d4cd bit #$80
00d4cf bne $d4b9
00d4d1 lda #$20
00d4d3 bra $d507
00d4d5 jsr $b91c
00d4d8 stz $8e
00d4da stz $8f
00d4dc jsr $d53d
00d4df lda #$04
00d4e1 trb $00da
00d4e4 rts				; exit routine



00d4e5 ldx #$0000		; clear X
00d4e8 lda $14
00d4ea beq $d4ef
00d4ec ldx #$0080
00d4ef jsr $d518
00d4f2 lda #$40
00d4f4 tsb $00d9
00d4f7 jsr $d727
00d4fa lda #$40
00d4fc trb $00d9
00d4ff lda $16
00d501 bit #$80
00d503 bne $d4b9
00d505 lda #$00
00d507 tay
00d508 ldx #$0000		; clear X
00d50b lda $14
00d50d beq $d512
00d50f ldx #$0080
00d512 tya
00d513 sta $1050,x
00d516 bra $d4d8
00d518 lda $1031,x
00d51b cmp #$ff
00d51d beq $d537
00d51f sta $043a
00d522 pha
00d523 phx
00d524 jsl $028ae0
00d528 plx
00d529 pla
00d52a cmp #$29
00d52c bcc $d53c
00d52e cmp #$2c
00d530 beq $d53c
00d532 lda $1030,x
00d535 bne $d53c
00d53c rts				; exit routine



00d53d ldx #$0000		; clear X
00d540 lda $14
00d542 beq $d547
00d544 ldx #$0005
00d547 rep #$30			; set A,X,Y => 16bit
00d549 lda $01
00d54b sta $7e365a,x
00d54f sep #$20			; set A => 8bit
00d551 rts				; exit routine



00d552 ldx #$0000		; clear X
00d555 lda $14
00d557 beq $d55c
00d559 ldx #$0005
00d55c rep #$30			; set A,X,Y => 16bit
00d55e lda $01
00d560 cmp $7e365a,x
00d564 beq $d578
00d566 sta $7e365a,x
00d56a lda #$0000
00d56d sta $7e365c,x
00d571 sep #$20			; set A => 8bit
00d573 sta $7e365e,x
00d577 rts				; exit routine



00d578 sep #$20			; set A => 8bit
00d57a rts				; exit routine



00d58a pei ($01)
00d58c pei ($03)
00d58e ldx #$0104
00d591 stx $03
00d593 ldx #$0000		; clear X
00d596 lda $14
00d598 beq $d59d
00d59a ldx #$0005
00d59d rep #$30			; set A,X,Y => 16bit
00d59f lda $7e365c,x
00d5a3 sta $01
00d5a5 sta $05
00d5a7 sep #$20			; set A => 8bit
00d5a9 ldx #$d63e
00d5ac jsr $9bc4
00d5af ldx #$d63b
00d5b2 jsr $9bc4
00d5b5 jsr $d401
00d5b8 ldx #$d641
00d5bb jsr $9bc4
00d5be jsl $0096a0
00d5c2 ldx $07
00d5c4 stx $15
00d5c6 beq $d5be
00d5c8 lda $16
00d5ca bit #$80
00d5cc bne $d619
00d5ce bit #$03
00d5d0 bne $d5b8
00d5d2 lda $15
00d5d4 bit #$80
00d5d6 bne $d5dd
00d5d8 jsr $d011
00d5db bra $d5be
00d5dd jsr $d644
00d5e0 ldx #$0000
00d5e3 stx $8e
00d5e5 lda $14
00d5e7 beq $d5ec
00d5ec phx
00d5ed lda $1052,x
00d5f0 jsl $00da6a
00d5f4 plx
00d5f5 cmp #$00
00d5f7 bne $d5fe
00d5f9 jsr $b912
00d5fc bra $d5b5
00d5fe jsr $b908
00d601 lda #$04
00d603 sta $04e0
00d606 phx
00d607 jsr $d727
00d60a plx
00d60b lda $16
00d60d bit #$80
00d60f bne $d5a9
00d611 lda $1052,x
00d614 jsr $dbfd
00d617 bra $d61c
00d619 jsr $b91c
00d61c ldx #$0000		; clear X
00d61f stx $8e
00d621 lda $14
00d623 beq $d628
00d625 ldx #$0005
00d628 rep #$30			; set A,X,Y => 16bit
00d62a lda $01
00d62c sta $7e365c,x
00d630 sep #$20			; set A => 8bit
00d632 plx
00d633 stx $03
00d635 plx
00d636 stx $01
00d638 stx $05
00d63a rts				; exit routine



00d644 ldx #$0000		; clear X
00d647 lda $14
00d649 beq $d64e
00d64b ldx #$0005
00d64e rep #$30			; set A,X,Y => 16bit
00d650 lda $01
00d652 cmp $7e365c,x
00d656 beq $d665
00d658 sta $7e365c,x
00d65c sep #$20			; set A => 8bit
00d65e lda #$00
00d660 sta $7e365e,x
00d664 rts				; exit routine



00d665 sep #$20			; set A => 8bit
00d667 rts				; exit routine



00d668 pei ($01)
00d66a pei ($03)
00d66c ldx #$0304
00d66f stx $03
00d671 ldx #$0000		; clear X
00d674 lda $14
00d676 beq $d67b
00d678 ldx #$0005
00d67b rep #$30			; set A,X,Y => 16bit
00d67d lda $7e365c,x
00d681 sta $01
00d683 sta $05
00d685 sep #$20			; set A => 8bit
00d687 ldx #$d721
00d68a jsr $9bc4
00d68d ldx #$d71e
00d690 jsr $9bc4
00d693 jsr $d401
00d696 ldx #$d724
00d699 jsr $9bc4
00d69c jsl $0096a0
00d6a0 ldx $07
00d6a2 stx $15
00d6a4 beq $d69c
00d6a6 lda $16
00d6a8 bit #$80
00d6aa bne $d6fc
00d6ac bit #$0f
00d6ae bne $d696
00d6b0 lda $15
00d6b2 bit #$80
00d6b4 bne $d6bb
00d6bb jsr $d644
00d6be ldx #$0000		; clear X
00d6c1 stx $8e
00d6c3 lda $14
00d6c5 beq $d6ca
00d6c7 ldx #$0080
00d6ca lda $1052,x
00d6cd cmp #$ff
00d6cf bne $d6d6
00d6d1 jsr $b912
00d6d4 bra $d693
00d6d6 jsr $dc3f
00d6d9 inc
00d6da bne $d6d1
00d6dc jsr $b908
00d6df lda $1052,x
00d6e2 jsr $dc1b
00d6e5 lda $1052,x
00d6e8 sta $043a
00d6eb phx
00d6ec jsl $028ae0
00d6f0 jsr $d727
00d6f3 plx
00d6f4 lda $16
00d6f6 bit #$80
00d6f8 bne $d687
00d6fa bra $d6ff
00d6fc jsr $b91c
00d6ff ldx #$0000		; clear X
00d702 stx $8e
00d704 lda $14
00d706 beq $d70b
00d708 ldx #$0005
00d70b rep #$30			; set A,X,Y => 16bit
00d70d lda $01
00d70f sta $7e365c,x
00d713 sep #$20			; set A => 8bit
00d715 plx
00d716 stx $03
00d718 plx
00d719 stx $01
00d71b stx $05
00d71d rts				; exit routine



00d727 pei ($01)
00d729 pei ($03)
00d72b ldx #$da5b
00d72e jsr $9bc4
00d731 ldx #$0403
00d734 stx $03
00d736 jsr $d401
00d739 rep #$30			; set A,X,Y => 16bit
00d73b lda #$0f00
00d73e trb $8e
00d740 sep #$20			; set A => 8bit
00d742 ldx #$ffff
00d745 stx $05
00d747 inx
00d748 lda $14
00d74a beq $d74f
00d74c ldx #$0005
00d74f lda #$80
00d751 sta $4202
00d754 lda $7e365e,x
00d758 beq $d7be
00d75a jsl $00971e
00d75e bmi $d7aa
00d760 ldy $4216
00d763 cmp #$02
00d765 bcc $d78d
00d767 lda $04e0
00d76a bit #$01
00d76c beq $d7be
00d76e lda $1010,y
00d771 bmi $d7be
00d773 lda $1021,y
00d776 bit #$c0
00d778 bne $d7be
00d77a rep #$30			; set A,X,Y => 16bit
00d77c lda $7e365e,x
00d780 and #$0007
00d783 dec
00d784 dec
00d785 ora #$0100
00d788 tax
00d789 sep #$20			; set A => 8bit
00d78b bra $d7fc
00d78d lda $04e0
00d790 bit #$04
00d792 beq $d7be
00d794 lda $1010,y
00d797 bmi $d7be
00d799 rep #$30
00d79b lda $7e365e,x
00d79f and #$0007
00d7a2 ora #$0200
00d7a5 tax
00d7a6 sep #$20
00d7a8 bra $d801
00d7aa bit #$01
00d7ac beq $d7b7
00d7ae lda $04e0
00d7b1 bit #$02
00d7b3 bne $d7fe
00d7be lda $04e0
00d7c1 bit #$80
00d7c3 bne $d7d6
00d7c5 lda $04e0
00d7c8 bit #$04
00d7ca beq $d7d1
00d7cc ldx #$0200
00d7cf bra $d801
00d7d6 lda $04e0
00d7d9 bit #$01
00d7db beq $d7fe
00d7dd ldx #$0100
00d7e0 lda $1110
00d7e3 inc
00d7e4 beq $d7ed
00d7e6 lda $1121
00d7e9 and #$c0
00d7eb beq $d7fc
00d7ed inx
00d7ee lda $1190
00d7f1 inc
00d7f2 beq $d7fb
00d7f4 lda $11a1
00d7f7 and #$c0
00d7f9 beq $d7fc
00d7fb inx
00d7fc bra $d801
00d7fe ldx #$0000		; clear X
00d801 stx $01
00d803 ldy $05
00d805 iny
00d806 bne $d869
00d808 stx $05
00d80a bra $d869
00d80c lda #$04
00d80e and $04e0
00d811 bne $d7c5
00d813 lda #$08
00d815 and $04e0
00d818 beq $d875
00d81a lda #$03
00d81c bra $d85a
00d81e lda $02
00d820 cmp #$03
00d822 beq $d869
00d824 cmp #$01
00d826 beq $d80c
00d828 bcs $d813
00d835 lda $02
00d837 beq $d869
00d839 cmp #$02
00d83b bcc $d851
00d83d beq $d84a
00d84a lda #$01
00d84c and $04e0
00d84f bne $d7d6
00d851 lda #$02
00d853 and $04e0
00d856 beq $d875
00d85a sta $02
00d85c jsr $da23
00d85f bra $d869
00d861 jsr $d905
00d864 bra $d869
00d866 jsr $d993
00d869 ldx #$da5e
00d86c jsr $9bc4
00d86f ldx $07
00d871 cpx $15
00d873 bne $d87b
00d875 jsl $0096a0
00d879 ldx $07
00d87b stx $15
00d87d beq $d89e
00d87f lda $16
00d881 bit #$80
00d883 bne $d8a7
00d885 bit #$02
00d887 bne $d861
00d889 bit #$01
00d88b bne $d866
00d88d bit #$08
00d88f bne $d835
00d891 bit #$04
00d893 bne $d81e
00d895 lda $15
00d897 bit #$80
00d899 bne $d8ac
00d89b jsr $d011
00d89e lda $0e97
00d8a1 and #$01
00d8a3 bne $d875
00d8a5 bra $d869
00d8a7 jsr $b91c
00d8aa bra $d8af
00d8ac jsr $b908
00d8af lda $0e97
00d8b2 dec
00d8b3 bit #$02
00d8b5 beq $d8c5
00d8b7 bit #$01
00d8b9 bne $d8bf
00d8bb jsl $0096a0
00d8bf ldx #$da5e
00d8c2 jsr $9bc4
00d8c5 ldx #$0000		; clear X
00d8c8 stx $8e
00d8ca txy
00d8cb lda $14
00d8cd beq $d8d5
00d8cf ldx #$0005
00d8d2 ldy #$0080
00d8d5 lda $02
00d8d7 beq $d8ed
00d8d9 cmp #$02
00d8db bcc $d8e7
00d8dd beq $d8e3
00d8df lda #$80
00d8e1 bra $d8ef
00d8e3 lda $01
00d8e5 bra $d8ef
00d8e7 lda $01
00d8e9 adc #$02
00d8eb bra $d8ef
00d8ed lda #$81
00d8ef sta $1051,y
00d8f2 sta $7e365e,x
00d8f6 ldx #$d3fe
00d8f9 jsr $9bc4
00d8fc plx
00d8fd stx $03
00d8ff plx
00d900 stx $01
00d902 stx $05
00d904 rts				; exit routine



00d905 lda $02
00d907 beq $d951
00d909 cmp #$02
00d90b beq $d97c
00d90d bcs $d951
00d90f sep #$30
00d911 lda $01
00d913 asl a
00d914 asl a
00d915 tax
00d916 lda $0a2d,x
00d919 rep #$10
00d91b dec
00d91c beq $d92f
00d91e cmp $0a2d
00d921 beq $d967
00d923 cmp $0a31
00d926 beq $d952
00d928 cmp $0a35
00d92b bne $d91b
00d92d bra $d939
00d92f lda $95
00d931 and #$02
00d933 beq $d951
00d935 lda #$18
00d937 bra $d91b
00d939 ldx #$0002
00d93c lda $1210
00d93f inc
00d940 beq $d949
00d942 lda $1221
00d945 and #$c0
00d947 beq $d94e
00d94e txa
00d94f sta $01
00d951 rts				; exit routine
00d952 ldx #$0001
00d955 lda $1190
00d958 inc
00d959 beq $d962
00d95b lda $11a1
00d95e and #$c0
00d960 beq $d94e
00d967 ldx #$0000
00d96a lda $1110
00d96d inc
00d96e beq $d977
00d970 lda $1121
00d973 and #$c0
00d975 beq $d94e



00d97c lda $1090
00d97f inc
00d980 beq $d951
00d982 lda $01
00d984 bne $d98c
00d986 lda $95
00d988 and #$02
00d98a beq $d951
00d98c lda $01
00d98e eor #$01
00d990 sta $01
00d992 rts
00d993 lda $02
00d995 beq $d9e1
00d997 cmp #$02
00d999 beq $da0c
00d99b bcs $d9e1
00d99d sep #$30
00d99f lda $01
00d9a1 asl a
00d9a2 asl a
00d9a3 tax
00d9a4 lda $0a2d,x
00d9a7 rep #$10
00d9a9 inc
00d9aa cmp #$18
00d9ac beq $d9bf
00d9ae cmp $0a2d
00d9b1 beq $d9f7
00d9b3 cmp $0a31
00d9b6 beq $d9e2
00d9b8 cmp $0a35
00d9bb bne $d9a9
00d9bd bra $d9c9
00d9bf lda $95
00d9c1 and #$01
00d9c3 beq $d9e1
00d9c5 lda #$00
00d9c7 bra $d9a9
00d9c9 ldx #$0002
00d9cc lda $1210
00d9cf inc
00d9d0 beq $d9d9
00d9d2 lda $1221
00d9d5 and #$c0
00d9d7 beq $d9de
00d9de txa
00d9df sta $01
00d9e1 rts				; exit routine
00d9e2 ldx #$0001
00d9e5 lda $1190
00d9e8 inc
00d9e9 beq $d9f2
00d9eb lda $11a1
00d9ee and #$c0
00d9f0 beq $d9de
00d9f7 ldx #$0000
00d9fa lda $1110
00d9fd inc
00d9fe beq $da07
00da00 lda $1121
00da03 and #$c0
00da05 beq $d9de



00da0c lda $1090
00da0f inc
00da10 beq $d9e1
00da12 lda $01
00da14 beq $da1c
00da1c lda $01
00da1e eor #$01
00da20 sta $01
00da22 rts
00da23 cmp #$01
00da25 bcc $da5a
00da27 beq $da36
00da29 cmp #$03
00da2b beq $da5a
00da5a rts				; exit routine



00da6a php				; save processor status to stack
00da6b sep #$30			; set A,X,Y => 8bit
00da6d cmp #$ff
00da6f beq $da91
00da71 cmp #$dd
00da73 bcs $da9a
00da75 ldx #$00
00da77 cmp $0e9e,x
00da7a beq $da95
00da7c inx
00da7d inx
00da7e cpx #$08
00da80 bne $da77
00da82 lda #$ff
00da84 ldx #$00
00da86 cmp $0e9e,x
00da89 beq $da91
00da8b inx
00da8c inx
00da8d cpx #$08
00da8f bne $da86
00da91 lda #$00
00da93 bra $daa8
00da95 lda $0e9f,x
00da98 bra $daa8
00daa8 plp
00daa9 rtl				; exit routine



00daaa php				; save processor status to stack
00daab sep #$30			; set A,X,Y => 8bit
00daad ldx #$ff
00daaf lda $0e9f
00dab2 bne $dab7
00dab4 stx $0e9e
00dab7 lda $0ea1
00daba bne $dabf
00dabc stx $0ea0
00dabf lda $0ea3
00dac2 bne $dac7
00dac4 stx $0ea2
00dac7 lda $0ea5
00daca bne $dacf
00dacc stx $0ea4
00dacf plp
00dad0 rts				; exit routine



00dad1 sep #$20			; set A => 8bit
00dad3 dec $0166
00dad6 lda $9e
00dad8 cmp #$10
00dada bcc $db06
00dadc cmp #$14
00dade bcc $dafc
00dae0 cmp #$dd
00dae2 bcc $db06
00dafc jsl $00da6a
00db00 jsr $db0a
00db03 sta $0e9f,x
00db06 inc $0166
00db09 rts				; exit routine



00db0a cmp #$63
00db0c bcc $db19
00db19 adc $0166
00db1c cmp #$64
00db1e bcc $db2c
00db2c rts				; exit routine



00db2d lda $9e
00db2f jsl $00da6a
00db33 cmp #$0063
00db36 bcc $db3e
00db3e lda $9e
00db40 php				; save processor status to stack
00db41 rep #$30			; set A,X,Y => 16bit
00db43 phx
00db44 phy
00db45 sep #$30			; set A,X,Y => 8bit
00db47 cmp #$10
00db49 bcc $db87
00db4b cmp #$14
00db4d bcc $db75
00db4f cmp #$20
00db51 bcc $db93
00db53 cmp #$2f
00db55 bcc $dba1
00db75 tay
00db76 jsl $00da6a
00db7a cmp #$63
00db7c bcs $dbdb
00db7e tya
00db7f sta $0e9e,x
00db82 inc $0e9f,x
00db85 bra $dbdb
00db87 phd				; save direct page to stack
00db88 pea $0ea6
00db8b pld
00db8c jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
00db90 pld
00db91 bra $dbdb
00db93 sbc #$13
00db95 phd				; save direct page to stack
00db96 pea $1038
00db99 pld
00db9a jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
00db9e pld
00db9f bra $dbdb
00dba1 pha
00dba2 cmp #$26
00dba4 beq $dbe1
00dba6 sec
00dba7 sbc #$20
00dba9 phd
00dbaa pea $1032
00dbad pld
00dbae jsl $00974e
00dbb2 pld
00dbb3 pla
00dbb4 sta $1031
00dbb7 ldy #$00
00dbb9 jsr $9111
00dbbc lda #$04
00dbbe tsb $00d4
00dbc1 bra $dbdb
00dbdb rep #$30			; set A,X,Y => 16bit
00dbdd ply
00dbde plx
00dbdf plp
00dbe0 rts				; exit routine



00dbf9 jsr $dbfd
00dbfc rtl				; exit routine



00dbfd php				; save processor status to stack
00dbfe rep #$30			; set A,X,Y => 16bit
00dc00 phx
00dc01 phy
00dc02 sep #$30			; set A,X,Y => 8bit
00dc04 tay
00dc05 jsl $00da6a
00dc09 cmp #$00
00dc0b bne $dc10
00dc10 dec $0e9f,x
00dc13 lda #$ff
00dc15 rep #$30			; set A,X,Y => 16bit
00dc17 ply
00dc18 plx
00dc19 plp
00dc1a rts				; exit routine



00dc1b php				; save processor status to stack
00dc1c rep #$30			; set A,X,Y => 16bit
00dc1e phx
00dc1f phy
00dc20 sep #$30			; set A,X,Y => 8bit
00dc22 sec
00dc23 sbc #$14
00dc25 lsr a
00dc26 lsr a
00dc27 ldx $0014
00dc2a beq $dc2e
00dc2c ora #$80
00dc2e tax
00dc2f lda $1018,x
00dc32 cmp #$63
00dc34 bcs $dc39
00dc36 inc $1018,x
00dc39 rep #$30			; set A,X,Y => 16bit
00dc3b ply
00dc3c plx
00dc3d plp
00dc3e rts				; exit routine



00dc3f php				; save processor status to stack
00dc40 rep #$30			; set A,X,Y => 16bit
00dc42 phx
00dc43 phy
00dc44 sep #$30			; set A,X,Y => 8bit
00dc46 sec
00dc47 sbc #$14
00dc49 lsr a
00dc4a lsr a
00dc4b ldx $0014
00dc4e beq $dc52
00dc50 ora #$80
00dc52 tax
00dc53 lda $1018,x
00dc56 beq $dc5d
00dc58 dec $1018,x
00dc5b lda #$ff
00dc5d rep #$30			; set A,X,Y => 16bit
00dc5f ply
00dc60 plx
00dc61 plp
00dc62 rts				; exit routine



00dc63 php				; save processor status to stack
00dc64 phd				; save direct page to stack
00dc65 rep #$30			; set A,X,Y => 16bit
00dc67 lda #$005e
00dc6a tcd
00dc6b sec
00dc6c lda $58
00dc6e sbc $5c
00dc70 tax
00dc71 lda $ddb8,x
00dc74 sta $6e
00dc76 lda $55
00dc78 and #$00ff
00dc7b tay
00dc7c ldx $5c
00dc7e pea $007f
00dc81 plb
00dc82 clc
00dc83 jmp ($00cc)
00dd16 lda $001e,x
00dd19 eor #$00ff
00dd1c sta $201e,x
00dd1f lda $001c,x
00dd22 eor #$00ff
00dd25 sta $201c,x
00dd28 lda $001a,x
00dd2b eor #$00ff
00dd2e sta $201a,x
00dd31 lda $0018,x
00dd34 eor #$00ff
00dd37 sta $2018,x
00dd3a lda $0016,x
00dd3d eor #$00ff
00dd40 sta $2016,x
00dd43 lda $0014,x
00dd46 eor #$00ff
00dd49 sta $2014,x
00dd4c lda $0012,x
00dd4f eor #$00ff
00dd52 sta $2012,x
00dd55 lda $0010,x
00dd58 eor #$00ff
00dd5b sta $2010,x
00dd5e lda $000e,x
00dd61 eor #$00ff
00dd64 sta $200e,x
00dd67 lda $000c,x
00dd6a eor #$00ff
00dd6d sta $200c,x
00dd70 lda $000a,x
00dd73 eor #$00ff
00dd76 sta $200a,x
00dd79 lda $0008,x
00dd7c eor #$00ff
00dd7f sta $2008,x
00dd82 lda $0006,x
00dd85 eor #$00ff
00dd88 sta $2006,x
00dd8b lda $0004,x
00dd8e eor #$00ff
00dd91 sta $2004,x
00dd94 lda $0002,x
00dd97 eor #$00ff
00dd9a sta $2002,x
00dd9d lda $0000,x
00dda0 eor #$00ff
00dda3 sta $2000,x
00dda6 txa
00dda7 adc $56
00dda9 tax
00ddaa dey
00ddab beq $ddb0
00ddad jmp ($00cc)
00ddb0 plb
00ddb1 lda $58
00ddb3 sta $5c
00ddb5 pld
00ddb6 plp
00ddb7 rts				; exit routine



00ddfa php				; save processor status to stack
00ddfb phd				; save direct page to stack
00ddfc rep #$30			; set A,X,Y => 16bit
00ddfe pea $005e
00de01 pld
00de02 lda $5e
00de04 sta $5c
00de06 sta $58
00de08 stz $5a
00de0a cmp $62
00de0c beq $de11
00de0e jsr $df48
00de11 pld
00de12 plp
00de13 rts				; exit routine



00de14 phd				; save direct page to stack
00de15 jsr $e044
00de18 asl a
00de19 asl a
00de1a tax
00de1b tsc
00de1c sec
00de1d sbc #$0016
00de20 tcs
00de21 tcd
00de22 lda $00b4
00de25 sta $0b
00de27 lda $e554,x
00de2a tay
00de2b lsr a
00de2c lsr a
00de2d and #$0ffe
00de30 sta $0d
00de32 tya
00de33 and #$0007
00de36 sta $0f
00de38 lda $e556,x
00de3b tay
00de3c and #$0007
00de3f sta $11
00de41 tya
00de42 lsr a
00de43 lsr a
00de44 lsr a
00de45 and #$000f
00de48 sta $13
00de4a sep #$20			; set A => 8bit
00de4c lda $e557,x
00de4f sta $4202
00de52 lda $0b
00de54 jsl $00971e
00de58 rep #$30			; set A,X,Y => 16bit
00de5a clc
00de5b lda $00b6
00de5e adc $4216
00de61 tay
00de62 lda $00b8
00de65 adc #$0008
00de68 sbc $0f
00de6a asl a
00de6b tax
00de6c lda $df2a,x
00de6f sta $00cc
00de72 lda $00b8
00de75 asl a
00de76 tax
00de77 lda $df1a,x
00de7a sta $07
00de7c eor #$ffff
00de7f sta $05
00de81 sep #$20			; set A => 8bit
00de83 ldx $11
00de85 lda $df12,x
00de88 ldx $0f
00de8a beq $de90
00de8c lsr a
00de8d dex
00de8e bne $de8c
00de90 sta $09
00de92 sta $0a
00de94 rep #$30			; set A,X,Y => 16bit
00de96 pea $007f
00de99 plb
00de9a jsr $debc
00de9d plb
00de9e lda $11
00dea0 adc $00b8
00dea3 cmp #$0008
00dea6 bcc $deb1
00dea8 inc $00b6
00deab inc $00b6
00deae sbc #$0008
00deb1 sta $00b8
00deb4 tsc
00deb5 clc
00deb6 adc #$0016
00deb9 tcs
00deba pld
00debb rts				; exit routine



00debc ldx $0d
00debe stz $01
00dec0 lda $078030,x
00dec4 eor #$00ff
00dec7 and $09
00dec9 jmp ($00cc)
00decc lsr a
00decd ror $01
00decf lsr a
00ded0 ror $01
00ded2 lsr a
00ded3 ror $01
00ded5 lsr a
00ded6 ror $01
00ded8 lsr a
00ded9 ror $01
00dedb lsr a
00dedc ror $01
00dede lsr a
00dedf ror $01
00dee1 sta $03
00dee3 and $07
00dee5 ora $0000,y
00dee8 sta $0000,y
00deeb lda $02
00deed and $05
00deef ora $0002,y
00def2 sta $0002,y
00def5 bra $df04
00defa asl a
00defb asl a
00defc asl a
00defd asl a
00defe ora $0000,y
00df01 sta $0000,y
00df04 clc
00df05 tya
00df06 adc $0b
00df08 tay
00df09 txa
00df0a adc #$0040
00df0d tax
00df0e dec $13
00df10 bne $debe
00df12 rts				; exit routine



00df48 php				; save processor status to stack
00df49 phd				; save direct page to stack
00df4a sep #$20			; set A => 8bit
00df4c pea $005e
00df4f pld
00df50 lda $56
00df52 sta $4202
00df55 lda $55
00df57 jsl $00971e
00df5b rep #$30			; set A,X,Y => 16bit
00df5d clc
00df5e lda $5c
00df60 adc #$0000
00df63 tay
00df64 ldx #$0000		; clear X
00df67 lda $4216
00df6a pea $007f
00df6d plb
00df6e jsr $9998
00df71 plb
00df72 clc
00df73 lda $5c
00df75 adc #$2000
00df78 tay
00df79 ldx #$00ff
00df7c lda $4216
00df7f pea $007f
00df82 plb
00df83 jsr $9998
00df86 plb
00df87 clc
00df88 lda $4216
00df8b adc $5c
00df8d sta $5e
00df8f lda $56
00df91 adc $5c
00df93 sta $60
00df95 pld
00df96 plp
00df97 rts				; exit routine



00df98 php				; save processor status to stack
00df99 phd				; save direct page to stack
00df9a rep #$30			; set A,X,Y => 16bit
00df9c tsc
00df9d sec
00df9e sbc #$0012
00dfa1 tcs
00dfa2 tcd
00dfa3 lda $1c
00dfa5 sta $03
00dfa7 lda $1e
00dfa9 sta $05
00dfab lda $20
00dfad sta $01
00dfaf lda $18
00dfb1 sta $0d
00dfb3 lda $1a
00dfb5 sta $0f
00dfb7 jsr $dfc3
00dfba tsc
00dfbb clc
00dfbc adc #$0012
00dfbf tcs
00dfc0 pld
00dfc1 plp
00dfc2 rts				; exit routine



00dfc3 pea $007f
00dfc6 plb
00dfc7 sec
00dfc8 lda #$0040
00dfcb sbc $01
00dfcd cmp $0d
00dfcf bcc $dfd3
00dfd1 lda $0d
00dfd3 sta $07
00dfd5 jsr $dfff
00dfd8 sec
00dfd9 lda $0d
00dfdb sbc $07
00dfdd beq $dff0
00dfdf tay
00dfe0 lda $03
00dfe2 pha
00dfe3 clc
00dfe4 adc $07
00dfe6 sta $03
00dfe8 sty $07
00dfea jsr $dfff
00dfed pla
00dfee sta $03
00dff0 lda $0d
00dff2 asl a
00dff3 asl a
00dff4 asl a
00dff5 adc $03
00dff7 sta $03
00dff9 dec $0f
00dffb bne $dfc7
00dffd plb
00dffe rts				; exit routine



00dfff ldx $07
00e001 lda $009952,x
00e005 sta $0000cc
00e009 ldx $03
00e00b ldy $05
00e00d lda #$0008
00e010 sta $09
00e012 clc
00e013 pea $e018
00e016 jmp ($00cc)
00e019 txa
00e01a adc $0d
00e01c tax
00e01d tya
00e01e adc #$0040
00e021 tay
00e022 dec $09
00e024 bne $e013
00e026 lda $07
00e028 adc $01
00e02a cmp #$0040
00e02d bcc $e03b
00e02f stz $01
00e031 lda $05
00e033 adc $07
00e035 adc #$01bf
00e038 sta $05
00e03a rts				; exit routine



00e03b sta $01
00e03d lda $05
00e03f adc $07
00e041 sta $05
00e043 rts				; exit routine



00e044 tay
00e045 lda #$0080
00e048 and $00dd
00e04b bne $e058
00e04d tya
00e04e ldx $00ca
00e051 sta $7e35d9,x
00e055 inc $00ca
00e058 tya
00e059 rts				; exit routine



00e05a lda #$0008
00e05d and $00db
00e060 bne $e071
00e062 jsr $e07b
00e065 lda $00d0
00e068 and #$0090
00e06b cmp #$0010
00e06e beq $e062
00e070 rts				; exit routine



00e071 jsr $e07b
00e074 lda $17
00e076 cmp $3d
00e078 bne $e071
00e07a rts				; exit routine



00e07b lda [$17]
00e07d inc $17
00e07f and #$00ff
00e082 cmp #$0080
00e085 bcc $e08f
00e087 pha
00e088 jsr $de14
00e08b pla
00e08c jmp $e129
00e08f cmp #$0030
00e092 bcc $e097
00e094 jmp $9ddf
00e097 asl a
00e098 tax
00e099 jsr ($e1cf,x)
00e09c rep #$30			; set A,X,Y => 16bit
00e09e rts				; exit routine



00e09f jsr $e0a4
00e0a2 bra $e0aa
00e0a4 jsr $dc63
00e0a7 stz $00ca
00e0aa phd				; save direct page to stack
00e0ab lda #$005e
00e0ae tcd
00e0af jsr $ddfa
00e0b2 lda $62
00e0b4 cmp $58
00e0b6 bne $e127
00e0b8 jsl $0c8000
00e0bc jsr $9cef
00e0bf lda $00e0
00e0c2 and #$00c0
00e0c5 cmp #$00c0
00e0c8 bne $e0cd
00e0ca jsr $9caa
00e0cd lda #$0008
00e0d0 and $00d0
00e0d3 beq $e0da
00e0d5 jsr $e699
00e0d8 bra $e0fd
00e0da jsr $e5cd
00e0dd lda #$0000
00e0e0 tcd
00e0e1 jsr $a342
00e0e4 lda #$005e
00e0e7 tcd
00e0e8 lda #$0008
00e0eb tsb $00d0
00e0ee sec
00e0ef lda $66
00e0f1 sbc $64
00e0f3 tsb $62
00e0f5 lda #$0010
00e0f8 and $00da
00e0fb bne $e11e
00e0fd jsl $0096a0
00e101 lda #$0020
00e104 and $00dd
00e107 bne $e11e
00e109 lda #$0020
00e10c and $00d0
00e10f bne $e116
00e111 lda $0094
00e114 bra $e119
00e119 and #$8080
00e11c beq $e0fd
00e11e lda $66
00e120 sta $58
00e122 sta $5c
00e124 jsr $df48
00e127 pld
00e128 rts				; exit routine



00e129 phd				; save direct page to stack
00e12a pha
00e12b lda #$005e
00e12e tcd
00e12f pei ($58)
00e131 lda #$0080
00e134 and $00dd
00e137 bne $e17c
00e139 lda $03,s
00e13b cmp #$00ff
00e13e bne $e146
00e140 jsr $dc63
00e143 stz $00ca
00e146 lda $60
00e148 cmp $58
00e14a bcc $e153
00e14c bne $e17c
00e14e lda $5a
00e150 beq $e17c
00e152 clc
00e153 lda $5c
00e155 adc $56
00e157 cmp $60
00e159 bne $e176
00e176 jsr $e0aa
00e179 jsr $e1a9
00e17c pla
00e17d cmp $58
00e17f bne $e1a6
00e181 sep #$20			; set A => 8bit
00e183 ldx $58
00e185 clc
00e186 lda $54
00e188 bmi $e196
00e18a adc $5a
00e18c cmp #$08
00e18e bcc $e1a0
00e190 inx
00e191 inx
00e192 sbc #$08
00e194 bra $e18c
00e1a0 sta $5a
00e1a2 stx $58
00e1a4 rep #$30			; set A,X,Y => 16bit
00e1a6 pla
00e1a7 pld
00e1a8 rts				; exit routine



00e1a9 lda #$0000
00e1ac tcd
00e1ad sep #$20			; set A => 8bit
00e1af lda #$80
00e1b1 tsb $00dd
00e1b4 lda #$7e
00e1b6 xba
00e1b7 lda $00ca
00e1ba rep #$30			; set A,X,Y => 16bit
00e1bc beq $e1c4
00e1be ldx #$35d9
00e1c1 jsr $a7f9
00e1c4 lda #$0080
00e1c7 trb $00dd
00e1ca lda #$005e
00e1cd tcd
00e1ce rts				; exit routine



00e45b lda [$17]
00e45d inc $17
00e45f and #$00ff
00e462 asl a
00e463 tax
00e464 jmp ($e22f,x)
00e467 lda #$0020
00e46a and $00da
00e46d beq $e49f
00e49f lda #$00ff
00e4a2 jmp $e087
00e525 lda [$17]
00e527 inc $17
00e529 and #$00ff
00e52c bra $e533
00e533 tay
00e534 pei ($9f)
00e536 plb
00e537 plb
00e538 ldx $9e
00e53a bra $e54b
00e53c lda [$17]
00e53e inc $17
00e540 inc $17
00e542 tax
00e543 lda [$17]
00e545 inc $17
00e547 and #$00ff
00e54a tay
00e54b lda $00b2
00e54e and #$00ff
00e551 cmp #$0080
00e554 bcc $e559
00e559 sta $9e
00e55b jsr $e565
00e55e sta $9e
00e560 stz $a0
00e562 phk
00e563 plb
00e564 rts				; exit routine



00e565 pea $0000
00e568 lda $0000,x
00e56b and #$00ff
00e56e cmp #$0030
00e571 bcc $e58b
00e573 cmp #$0080
00e576 bcc $e591
00e578 phx
00e579 asl a
00e57a asl a
00e57b tax
00e57c lda $00e556,x
00e580 and #$0007
00e583 plx
00e584 adc $9e
00e586 clc
00e587 adc $01,s
00e589 sta $01,s
00e58b inx
00e58c dey
00e58d bne $e568
00e58f pla
00e590 rts				; exit routine



00e591 phb				; save databank to stack
00e592 pea $0003
00e595 plb
00e596 phx
00e597 phy
00e598 ldx #$ba86
00e59b phx
00e59c sec
00e59d sbc #$0030
00e5a0 beq $e5b2
00e5a2 tay
00e5a3 lda $0000,x
00e5a6 and #$00ff
00e5a9 sec
00e5aa adc $01,s
00e5ac sta $01,s
00e5ae tax
00e5af dey
00e5b0 bne $e5a3
00e5b2 plx
00e5b3 lda $0000,x
00e5b6 and #$00ff
00e5b9 tay
00e5ba inx
00e5bb jsr $e565
00e5be ply
00e5bf plx
00e5c0 plb
00e5c1 plb
00e5c2 bra $e586


; MISSING: $00e5c4-$00e5cc ($8 bytes)


00e5cd php				; save processor status to stack
00e5ce rep #$30			; set A,X,Y => 16bit
00e5d0 lda $00c8
00e5d3 and #$00ff
00e5d6 beq $e613
00e5d8 cmp #$0002
00e5db bcc $e62a
00e5dd beq $e5f9
00e5df lda #$4000
00e5e2 sta $01f6
00e5e5 lda #$1000
00e5e8 sta $01f4
00e5eb pea $0000
00e5ee pea $4000
00e5f1 pea $2000
00e5f4 pea $0009
00e5f7 bra $e642
00e5f9 lda #$4000
00e5fc sta $01f6
00e5ff lda #$0600
00e602 sta $01f4
00e605 pea $0000
00e608 pea $4000
00e60b pea $2000
00e60e pea $0003
00e611 bra $e642
00e613 lda #$4000
00e616 sta $01f6
00e619 lda #$0900
00e61c sta $01f4
00e61f pea $0000
00e622 pea $4000
00e625 pea $2000
00e628 bra $e63f
00e62a lda #$4700
00e62d sta $01f6
00e630 lda #$0900
00e633 sta $01f4
00e636 pea $0010
00e639 pea $4610
00e63c pea $2680
00e63f pea $0005
00e642 pea $0034
00e645 jsr $df98
00e648 clc
00e649 tsc
00e64a adc #$000a
00e64d tcs
00e64e sec
00e64f lda $01f6
00e652 sbc #$4000
00e655 lsr a
00e656 adc #$3800
00e659 sta $01f8
00e65c lda #$0040
00e65f tsb $00dd
00e662 plp
00e663 rts				; exit routine



; {{ NO GAP }}



00e664 php				; save processor status to stack
00e665 rep #$30			; set A,X,Y => 16bit
00e667 lda #$4000
00e66a sta $01f6
00e66d lda #$3000
00e670 sta $01f8
00e673 lda #$0200
00e676 sta $01f4
00e679 pea $0000
00e67c pea $4000
00e67f pea $2000
00e682 pea $0002
00e685 pea $0004
00e688 jsr $df98
00e68b clc
00e68c tsc
00e68d adc #$000a
00e690 tcs
00e691 lda #$0040
00e694 tsb $00dd
00e697 plp
00e698 rts				; exit routine



; {{ NO GAP }}



00e699 php				; save processor status to stack
00e69a phd				; save direct page to stack
00e69b sep #$20			; set A => 8bit
00e69d rep #$10			; set X,Y => 16bit
00e69f pea $005e
00e6a2 pld
00e6a3 lda $6b
00e6a5 sta $4202
00e6a8 lda $56
00e6aa jsl $00971e
00e6ae rep #$30			; set A,X,Y => 16bit
00e6b0 lda $4216
00e6b3 sta $3e
00e6b5 lda $68
00e6b7 sta $3a
00e6b9 stz $3c
00e6bb jsl $0096e4
00e6bf tsc
00e6c0 sec
00e6c1 sbc #$0012
00e6c4 tcs
00e6c5 tcd
00e6c6 clc
00e6c7 lda $009e
00e6ca sta $07
00e6cc lda $009c
00e6cf sta $05
00e6d1 lda $00a2
00e6d4 sta $09
00e6d6 lda $00c2
00e6d9 adc #$2000
00e6dc sta $0b
00e6de adc $05
00e6e0 sta $0d
00e6e2 lda $00c4
00e6e5 adc #$2000
00e6e8 sta $0f
00e6ea sec
00e6eb lda $00c6
00e6ee sbc $05
00e6f0 sta $11
00e6f2 ldx $00b4
00e6f5 stx $03
00e6f7 lda $9952,x
00e6fa sta $00ce
00e6fd jsr $e71c
00e700 lda $09
00e702 beq $e713

; MISSING: $00e703-$00e712 ($f bytes)

00e713 tsc
00e714 clc
00e715 adc #$0012
00e718 tcs
00e719 pld
00e71a plp
00e71b rts				; exit routine



; {{ NO GAP }}



00e71c pea $007f
00e71f plb
00e720 lda $11
00e722 ldx $0d
00e724 ldy $0b
00e726 clc
00e727 sta $01
00e729 pea $e72e
00e72c jmp ($00ce)
00e72f txa
00e730 adc $03
00e732 tax
00e733 tya
00e734 adc $03
00e736 tay
00e737 sec
00e738 lda $01
00e73a sbc $03
00e73c bne $e726
00e73e ldx $0f
00e740 lda $05
00e742 jsr $985d
00e745 plb
00e746 stx $0f
00e748 jsr $e5cd
00e74b jsl $0c8000
00e74f dec $07
00e751 bne $e71c
00e753 rts				; exit routine



; MISSING: $00e754-$00e95c ($208 bytes)



00e95d lda #$005e
00e960 tcd
00e961 lda $58
00e963 and #$0007
00e966 asl a
00e967 tax
00e968 lda $60
00e96a asl a
00e96b tay
00e96c lda $eac6,x
00e96f and $eb5f,y
00e972 sta $06
00e974 lda $eab6,x
00e977 sta $04
00e979 jsr $eb67
00e97c tax
00e97d lda $7f2000,x
00e981 and $04
00e983 ora $06
00e985 sta $7f2000,x
00e989 rts				; exit routine



; {{ NO GAP }}



00e98a lda #$005e
00e98d tcd
00e98e lda $58
00e990 cmp $5c
00e992 beq $e9b8
00e994 lda $5a
00e996 cmp $5e
00e998 bne $e9bb
00e99a sec
00e99b lda $5c
00e99d sbc $58
00e99f cmp #$0008
00e9a2 bcs $e9b5
00e9a4 pei ($58)
00e9a6 jsr $e95d
00e9a9 inc $58
00e9ab lda $5c
00e9ad cmp $58
00e9af bcs $e9a6
00e9b1 pla
00e9b2 sta $58
00e9b4 rts				; exit routine



; {{ NO GAP }}



00e9b5 jmp $ead6
00e9b8 jmp $ea7b
00ea7b lda #$005e
00ea7e tcd
00ea7f lda $58
00ea81 and #$0007
00ea84 asl a
00ea85 tax
00ea86 lda $60
00ea88 asl a
00ea89 tay
00ea8a lda $eac6,x
00ea8d and $eb5f,y
00ea90 sta $06
00ea92 lda $eab6,x
00ea95 sta $04
00ea97 jsr $eb67
00ea9a tax
00ea9b sec
00ea9c lda $5e
00ea9e sbc $5a
00eaa0 tay
00eaa1 clc
00eaa2 lda $7f2000,x
00eaa6 and $04
00eaa8 ora $06
00eaaa sta $7f2000,x
00eaae txa
00eaaf adc $56
00eab1 tax
00eab2 dey
00eab3 bpl $eaa2
00eab5 rts				; exit routine



; MISSING: $00eab6-$00ead5 ($1f bytes)



00ead6 lda #$005e
00ead9 tcd
00eada lda $60
00eadc asl a
00eadd tax
00eade lda $eb5f,x
00eae1 sta $04
00eae3 jsr $eb67
00eae6 tax
00eae7 lda $58
00eae9 and #$0007
00eaec asl a
00eaed tay
00eaee lda $eb3b,y
00eaf1 and $04
00eaf3 sta $06
00eaf5 lda $eb4d,y
00eaf8 and $7f2000,x
00eafc ora $06
00eafe sta $7f2000,x
00eb02 lda $58
00eb04 and #$00f8
00eb07 adc #$000f
00eb0a inx
00eb0b inx
00eb0c cmp $5c
00eb0e bcs $eb1f
00eb10 tay
00eb11 lda $04
00eb13 sta $7f2000,x
00eb17 tya
00eb18 adc #$0008
00eb1b inx
00eb1c inx
00eb1d bra $eb0c
00eb1f lda $5c
00eb21 and #$0007
00eb24 asl a
00eb25 tay
00eb26 lda $eb4f,y
00eb29 and $04
00eb2b sta $06
00eb2d lda $eb3d,y
00eb30 and $7f2000,x
00eb34 ora $06
00eb36 sta $7f2000,x
00eb3a rts				; exit routine



; MISSING: $00eb3b-$00eb66 ($2b bytes)



00eb67 sep #$20			; set A => 8bit
00eb69 lda $5a
00eb6b sta $4202
00eb6e lda $56
00eb70 jsl $00971e
00eb74 rep #$30			; set A,X,Y => 16bit
00eb76 lda $58
00eb78 and #$fff8
00eb7b lsr a
00eb7c lsr a
00eb7d adc $4216
00eb80 sta $62
00eb82 rts				; exit routine



; {{ NO GAP }}



00eb83 ldy #$2000
00eb86 lda #$00ff
00eb89 pea $007f
00eb8c plb
00eb8d jsr $99bd
00eb90 plb
00eb91 rts				; exit routine



; {{ NO GAP }}



00eb92 ldy #$2000
00eb95 ldx #$0000		; clear X
00eb98 lda #$0750
00eb9b pea $007f
00eb9e plb
00eb9f jsr $9998
00eba2 plb
00eba3 rts				; exit routine



; {{ NO GAP }}



00eba4 ldy #$2750
00eba7 ldx #$0000		; clear X
00ebaa lda #$0750
00ebad pea $007f
00ebb0 plb
00ebb1 jsr $9998
00ebb4 plb
00ebb5 rts				; exit routine



; MISSING: $00ebb6-$00ebd0 ($1a bytes)



00ebd1 ldx #$2000
00ebd4 bra $ebd9
00ebd6 ldx #$2750
00ebd9 pea $007f
00ebdc plb
00ebdd ldy #$0009
00ebe0 clc
00ebe1 jsr $eca5
00ebe4 txa
00ebe5 adc #$0034
00ebe8 tax
00ebe9 jsr $ee7b
00ebec txa
00ebed adc #$0034
00ebf0 tax
00ebf1 jsr $ed90
00ebf4 txa
00ebf5 adc #$0034
00ebf8 tax
00ebf9 jsr $ef66
00ebfc txa
00ebfd adc #$0034
00ec00 tax
00ec01 dey
00ec02 bne $ebe1
00ec04 plb
00ec05 rts				; exit routine



; {{ NO GAP }}



00ec06 ldx #$2000
00ec09 bra $ec0e
00ec0b ldx #$2750
00ec0e pea $007f
00ec11 plb
00ec12 ldy #$0009
00ec15 clc
00ec16 jsr $ee7b
00ec19 txa
00ec1a adc #$0034
00ec1d tax
00ec1e jsr $eca5
00ec21 txa
00ec22 adc #$0034
00ec25 tax
00ec26 jsr $ef66
00ec29 txa
00ec2a adc #$0034
00ec2d tax
00ec2e jsr $ed90
00ec31 txa
00ec32 adc #$0034
00ec35 tax
00ec36 dey
00ec37 bne $ec16
00ec39 plb
00ec3a rts				; exit routine



; {{ NO GAP }}



00ec3b ldx #$2000
00ec3e bra $ec43
00ec40 ldx #$2750
00ec43 pea $007f
00ec46 plb
00ec47 ldy #$0009
00ec4a clc
00ec4b jsr $ef66
00ec4e txa
00ec4f adc #$0034
00ec52 tax
00ec53 jsr $ed90
00ec56 txa
00ec57 adc #$0034
00ec5a tax
00ec5b jsr $eca5
00ec5e txa
00ec5f adc #$0034
00ec62 tax
00ec63 jsr $ee7b
00ec66 txa
00ec67 adc #$0034
00ec6a tax
00ec6b dey
00ec6c bne $ec4b
00ec6e plb
00ec6f rts				; exit routine



; {{ NO GAP }}



00ec70 ldx #$2000
00ec73 bra $ec78
00ec75 ldx #$2750
00ec78 pea $007f
00ec7b plb
00ec7c ldy #$0009
00ec7f clc
00ec80 jsr $ed90
00ec83 txa
00ec84 adc #$0034
00ec87 tax
00ec88 jsr $ef66
00ec8b txa
00ec8c adc #$0034
00ec8f tax
00ec90 jsr $ee7b
00ec93 txa
00ec94 adc #$0034
00ec97 tax
00ec98 jsr $eca5
00ec9b txa
00ec9c adc #$0034
00ec9f tax
00eca0 dey
00eca1 bne $ec80
00eca3 plb
00eca4 rts				; exit routine



; {{ NO GAP }}



00eca5 lda $0000,x
00eca8 and #$7777
00ecab sta $0000,x
00ecae lda $0002,x
00ecb1 and #$7777
00ecb4 sta $0002,x
00ecb7 lda $0004,x
00ecba and #$7777
00ecbd sta $0004,x
00ecc0 lda $0006,x
00ecc3 and #$7777
00ecc6 sta $0006,x
00ecc9 lda $0008,x
00eccc and #$7777
00eccf sta $0008,x
00ecd2 lda $000a,x
00ecd5 and #$7777
00ecd8 sta $000a,x
00ecdb lda $000c,x
00ecde and #$7777
00ece1 sta $000c,x
00ece4 lda $000e,x
00ece7 and #$7777
00ecea sta $000e,x
00eced lda $0010,x
00ecf0 and #$7777
00ecf3 sta $0010,x
00ecf6 lda $0012,x
00ecf9 and #$7777
00ecfc sta $0012,x
00ecff lda $0014,x
00ed02 and #$7777
00ed05 sta $0014,x
00ed08 lda $0016,x
00ed0b and #$7777
00ed0e sta $0016,x
00ed11 lda $0018,x
00ed14 and #$7777
00ed17 sta $0018,x
00ed1a lda $001a,x
00ed1d and #$7777
00ed20 sta $001a,x
00ed23 lda $001c,x
00ed26 and #$7777
00ed29 sta $001c,x
00ed2c lda $001e,x
00ed2f and #$7777
00ed32 sta $001e,x
00ed35 lda $0020,x
00ed38 and #$7777
00ed3b sta $0020,x
00ed3e lda $0022,x
00ed41 and #$7777
00ed44 sta $0022,x
00ed47 lda $0024,x
00ed4a and #$7777
00ed4d sta $0024,x
00ed50 lda $0026,x
00ed53 and #$7777
00ed56 sta $0026,x
00ed59 lda $0028,x
00ed5c and #$7777
00ed5f sta $0028,x
00ed62 lda $002a,x
00ed65 and #$7777
00ed68 sta $002a,x
00ed6b lda $002c,x
00ed6e and #$7777
00ed71 sta $002c,x
00ed74 lda $002e,x
00ed77 and #$7777
00ed7a sta $002e,x
00ed7d lda $0030,x
00ed80 and #$7777
00ed83 sta $0030,x
00ed86 lda $0032,x
00ed89 and #$7777
00ed8c sta $0032,x
00ed8f rts				; exit routine



; {{ NO GAP }}



00ed90 lda $0000,x
00ed93 and #$bbbb
00ed96 sta $0000,x
00ed99 lda $0002,x
00ed9c and #$bbbb
00ed9f sta $0002,x
00eda2 lda $0004,x
00eda5 and #$bbbb
00eda8 sta $0004,x
00edab lda $0006,x
00edae and #$bbbb
00edb1 sta $0006,x
00edb4 lda $0008,x
00edb7 and #$bbbb
00edba sta $0008,x
00edbd lda $000a,x
00edc0 and #$bbbb
00edc3 sta $000a,x
00edc6 lda $000c,x
00edc9 and #$bbbb
00edcc sta $000c,x
00edcf lda $000e,x
00edd2 and #$bbbb
00edd5 sta $000e,x
00edd8 lda $0010,x
00eddb and #$bbbb
00edde sta $0010,x
00ede1 lda $0012,x
00ede4 and #$bbbb
00ede7 sta $0012,x
00edea lda $0014,x
00eded and #$bbbb
00edf0 sta $0014,x
00edf3 lda $0016,x
00edf6 and #$bbbb
00edf9 sta $0016,x
00edfc lda $0018,x
00edff and #$bbbb
00ee02 sta $0018,x
00ee05 lda $001a,x
00ee08 and #$bbbb
00ee0b sta $001a,x
00ee0e lda $001c,x
00ee11 and #$bbbb
00ee14 sta $001c,x
00ee17 lda $001e,x
00ee1a and #$bbbb
00ee1d sta $001e,x
00ee20 lda $0020,x
00ee23 and #$bbbb
00ee26 sta $0020,x
00ee29 lda $0022,x
00ee2c and #$bbbb
00ee2f sta $0022,x
00ee32 lda $0024,x
00ee35 and #$bbbb
00ee38 sta $0024,x
00ee3b lda $0026,x
00ee3e and #$bbbb
00ee41 sta $0026,x
00ee44 lda $0028,x
00ee47 and #$bbbb
00ee4a sta $0028,x
00ee4d lda $002a,x
00ee50 and #$bbbb
00ee53 sta $002a,x
00ee56 lda $002c,x
00ee59 and #$bbbb
00ee5c sta $002c,x
00ee5f lda $002e,x
00ee62 and #$bbbb
00ee65 sta $002e,x
00ee68 lda $0030,x
00ee6b and #$bbbb
00ee6e sta $0030,x
00ee71 lda $0032,x
00ee74 and #$bbbb
00ee77 sta $0032,x
00ee7a rts				; exit routine



; {{ NO GAP }}



00ee7b lda $0000,x
00ee7e and #$dddd
00ee81 sta $0000,x
00ee84 lda $0002,x
00ee87 and #$dddd
00ee8a sta $0002,x
00ee8d lda $0004,x
00ee90 and #$dddd
00ee93 sta $0004,x
00ee96 lda $0006,x
00ee99 and #$dddd
00ee9c sta $0006,x
00ee9f lda $0008,x
00eea2 and #$dddd
00eea5 sta $0008,x
00eea8 lda $000a,x
00eeab and #$dddd
00eeae sta $000a,x
00eeb1 lda $000c,x
00eeb4 and #$dddd
00eeb7 sta $000c,x
00eeba lda $000e,x
00eebd and #$dddd
00eec0 sta $000e,x
00eec3 lda $0010,x
00eec6 and #$dddd
00eec9 sta $0010,x
00eecc lda $0012,x
00eecf and #$dddd
00eed2 sta $0012,x
00eed5 lda $0014,x
00eed8 and #$dddd
00eedb sta $0014,x
00eede lda $0016,x
00eee1 and #$dddd
00eee4 sta $0016,x
00eee7 lda $0018,x
00eeea and #$dddd
00eeed sta $0018,x
00eef0 lda $001a,x
00eef3 and #$dddd
00eef6 sta $001a,x
00eef9 lda $001c,x
00eefc and #$dddd
00eeff sta $001c,x
00ef02 lda $001e,x
00ef05 and #$dddd
00ef08 sta $001e,x
00ef0b lda $0020,x
00ef0e and #$dddd
00ef11 sta $0020,x
00ef14 lda $0022,x
00ef17 and #$dddd
00ef1a sta $0022,x
00ef1d lda $0024,x
00ef20 and #$dddd
00ef23 sta $0024,x
00ef26 lda $0026,x
00ef29 and #$dddd
00ef2c sta $0026,x
00ef2f lda $0028,x
00ef32 and #$dddd
00ef35 sta $0028,x
00ef38 lda $002a,x
00ef3b and #$dddd
00ef3e sta $002a,x
00ef41 lda $002c,x
00ef44 and #$dddd
00ef47 sta $002c,x
00ef4a lda $002e,x
00ef4d and #$dddd
00ef50 sta $002e,x
00ef53 lda $0030,x
00ef56 and #$dddd
00ef59 sta $0030,x
00ef5c lda $0032,x
00ef5f and #$dddd
00ef62 sta $0032,x
00ef65 rts				; exit routine



; {{ NO GAP }}



00ef66 lda $0000,x
00ef69 and #$eeee
00ef6c sta $0000,x
00ef6f lda $0002,x
00ef72 and #$eeee
00ef75 sta $0002,x
00ef78 lda $0004,x
00ef7b and #$eeee
00ef7e sta $0004,x
00ef81 lda $0006,x
00ef84 and #$eeee
00ef87 sta $0006,x
00ef8a lda $0008,x
00ef8d and #$eeee
00ef90 sta $0008,x
00ef93 lda $000a,x
00ef96 and #$eeee
00ef99 sta $000a,x
00ef9c lda $000c,x
00ef9f and #$eeee
00efa2 sta $000c,x
00efa5 lda $000e,x
00efa8 and #$eeee
00efab sta $000e,x
00efae lda $0010,x
00efb1 and #$eeee
00efb4 sta $0010,x
00efb7 lda $0012,x
00efba and #$eeee
00efbd sta $0012,x
00efc0 lda $0014,x
00efc3 and #$eeee
00efc6 sta $0014,x
00efc9 lda $0016,x
00efcc and #$eeee
00efcf sta $0016,x
00efd2 lda $0018,x
00efd5 and #$eeee
00efd8 sta $0018,x
00efdb lda $001a,x
00efde and #$eeee
00efe1 sta $001a,x
00efe4 lda $001c,x
00efe7 and #$eeee
00efea sta $001c,x
00efed lda $001e,x
00eff0 and #$eeee
00eff3 sta $001e,x
00eff6 lda $0020,x
00eff9 and #$eeee
00effc sta $0020,x
00efff lda $0022,x
00f002 and #$eeee
00f005 sta $0022,x
00f008 lda $0024,x
00f00b and #$eeee
00f00e sta $0024,x
00f011 lda $0026,x
00f014 and #$eeee
00f017 sta $0026,x
00f01a lda $0028,x
00f01d and #$eeee
00f020 sta $0028,x
00f023 lda $002a,x
00f026 and #$eeee
00f029 sta $002a,x
00f02c lda $002c,x
00f02f and #$eeee
00f032 sta $002c,x
00f035 lda $002e,x
00f038 and #$eeee
00f03b sta $002e,x
00f03e lda $0030,x
00f041 and #$eeee
00f044 sta $0030,x
00f047 lda $0032,x
00f04a and #$eeee
00f04d sta $0032,x
00f050 rts				; exit routine



; MISSING: $00f051-$00f06e ($1d bytes)



00f06f pea $007f
00f072 plb
00f073 lda #$ff00
00f076 sta $2ea0
00f079 lda #$8000
00f07c ldy #$2ea2
00f07f jsr $9a02
00f082 plb
00f083 pea $0014
00f086 pea $4e14
00f089 pea $2ea0
00f08c pea $0001
00f08f pea $0002
00f092 jsr $df98
00f095 clc
00f096 tsc
00f097 adc #$000a
00f09a tcs
00f09b lda #$4e00
00f09e sta $01f6
00f0a1 lda #$3f00
00f0a4 sta $01f8
00f0a7 lda #$0200
00f0aa sta $01f4
00f0ad lda #$0040
00f0b0 tsb $00dd
00f0b3 jsl $0c8000
00f0b7 rts				; exit routine



; MISSING: $00f0b8-$00ffff ($f47 bytes)



; END OF BANK 00



; START OF BANK 01



; MISSING: $018000-$0180fa ($fa bytes)



0180fb sep #$20			; set A => 8bit
0180fd rep #$10			; set X,Y => 16bit
0180ff lda #$ff
018101 sta $19a5
018104 stz $1a46
018107 stz $1a45
01810a stz $19ac
01810d stz $19af
018110 lda #$02
018112 sta $19d7
018115 lda #$40
018117 sta $19b4
01811a lda #$10
01811c sta $1993
01811f jsr $817b
018122 jsr $81b9
018125 jsr $81db
018128 rep #$30			; set A,X,Y => 16bit
01812a stz $19ee
01812d lda #$00f8
018130 sta $1902
018133 sta $1906
018136 lda #$0008
018139 sta $1900
01813c sta $1904
01813f jsl $0b87b9
018143 sep #$20			; set A => 8bit
018145 rep #$10			; set X,Y => 16bit
018147 stz $1a46
01814a ldx #$9400
01814d stx $2181
018150 lda #$01
018152 sta $2183
018155 ldy #$1000
018158 stz $2180
01815b dey
01815c bne $8158
01815e rep #$30			; set A,X,Y => 16bit
018160 phb				; save databank to stack
018161 lda #$ffff
018164 sta $1a72
018167 ldx #$1a72
01816a ldy #$1a73
01816d lda #$023b
018170 mvn $00,$00
018173 plb
018174 lda #$ffff
018177 sta $9400
01817a rtl				; exit routine



; {{ NO GAP }}



01817b phb				; save databank to stack
01817c php				; save processor status to stack
01817d rep #$30			; set A,X,Y => 16bit
01817f lda #$0000
018182 sta $7fc488
018186 ldy #$c489
018189 ldx #$c488
01818c lda #$00ff
01818f mvn $7f,$7f
018192 ldy #$c568
018195 ldx #$d824
018198 lda #$000f
01819b mvn $07,$7f
01819e ldy #$c4f8
0181a1 ldx #$d824
0181a4 lda #$000f
0181a7 mvn $07,$7f
0181aa ldy #$c548
0181ad ldx #$d834
0181b0 lda #$000f
0181b3 mvn $07,$7f
0181b6 plp
0181b7 plb
0181b8 rts				; exit routine



; {{ NO GAP }}



0181b9 php				; save processor status to stack
0181ba sep #$20			; set A => 8bit
0181bc rep #$10			; set X,Y => 16bit
0181be lda #$80
0181c0 sta $2115
0181c3 stz $2116
0181c6 lda #$40
0181c8 sta $2117
0181cb rep #$30			; set A,X,Y => 16bit
0181cd ldx #$1000
0181d0 lda #$01ff
0181d3 sta $2118
0181d6 dex
0181d7 bne $81d3
0181d9 plp
0181da rts				; exit routine



; {{ NO GAP }}



0181db sep #$20			; set A => 8bit
0181dd rep #$10			; set X,Y => 16bit
0181df phd				; save direct page to stack
0181e0 pea $192b
0181e3 pld
0181e4 ldx #$0780
0181e7 ldy #$c708
0181ea lda #$10
0181ec jsr $8207
0181ef ldx #$0900
0181f2 ldy #$c908
0181f5 lda #$0c
0181f7 jsr $8207
0181fa ldx #$0a80
0181fd ldy #$ca48
018200 lda #$1c
018202 jsr $8207
018205 pld
018206 rts				; exit routine



; {{ NO GAP }}



018207 php				; save processor status to stack
018208 rep #$30			; set A,X,Y => 16bit
01820a stx $00
01820c sty $02
01820e and #$00ff
018211 sta $04
018213 sta $06
018215 jsr $822e
018218 lda $00
01821a clc
01821b adc #$0018
01821e sta $00
018220 lda $02
018222 clc
018223 adc #$0020
018226 sta $02
018228 dec $06
01822a bne $8215
01822c plp
01822d rts				; exit routine



; {{ NO GAP }}



01822e phb				; save databank to stack
01822f php				; save processor status to stack
018230 rep #$30			; set A,X,Y => 16bit
018232 phb				; save databank to stack
018233 lda $192b
018236 clc
018237 adc #$ca20
01823a tax
01823b ldy $192d
01823e lda #$000f
018241 mvn $04,$7f
018244 plb
018245 txa
018246 sec
018247 sbc #$ca20
01824a tax
01824b sep #$20			; set A => 8bit
01824d rep #$10			; set X,Y => 16bit
01824f pea $007f
018252 plb
018253 pla
018254 xba
018255 lda #$08
018257 sta $1933
01825a lda $04ca20,x
01825e inx
01825f sta $0000,y
018262 iny
018263 lda #$00
018265 sta $0000,y
018268 iny
018269 dec $1933
01826c bne $825a
01826e plp
01826f plb
018270 rts				; exit routine



; {{ NO GAP }}



; ROUTINE: VBLANK interupt handler ($01:8271)
; called from $008113 with "jml $018271"
018271 sep #$20			; set A => 8bit
018273 rep #$10			; set X,Y => 16bit
018275 phk
018276 plb
018277 ldx #$ffff
01827a stx $195f
01827d ldx #$8000
018280 stx $1a48
018283 stz $192a
018286 jsr $8c5a
018289 lda $0e91
01828c sta $19f0
01828f ldx $0e89
018292 stx $19f1
018295 lda #$80
018297 sta $0110
01829a jsr $914c
01829d lda $0e88
0182a0 cmp #$15
0182a2 bne $82a8
0182a4 jsl $009a60
0182a8 inc $19f7
0182ab stz $19f8
0182ae jsr $e9b2
0182b1 jsr $82f1
0182b4 lda $19b0
0182b7 beq $82bd
0182b9 jsl $01b24b
0182bd lda $19f8
0182c0 bne $82a8
0182c2 jsr $ab5c
0182c5 jsr $a080
0182c8 lda $19f7
0182cb bne $82c8
0182cd bra $82a8
0182cf php				; save processor status to stack
0182d0 phx
0182d1 phy
0182d2 sep #$20			; set A => 8bit
0182d4 rep #$10			; set X,Y => 16bit
0182d6 bra $82e2

0182d8 php				; save processor status to stack
0182d9 phx
0182da phy
0182db sep #$20			; set A => 8bit
0182dd rep #$10			; set X,Y => 16bit
0182df jsr $ab5c
0182e2 jsr $a080
0182e5 lda $19f7
0182e8 bne $82e5
0182ea inc $19f7
0182ed ply
0182ee plx
0182ef plp
0182f0 rts				; exit routine



; {{ NO GAP }}



0182f1 rep #$20			; set A => 16bit
0182f3 and #$00ff
0182f6 asl a
0182f7 tax
0182f8 sep #$20			; set A => 8bit
0182fa jmp ($82fd,x)
01831f sep #$20
018321 rep #$10
018323 phb
018324 lda $19a5
018327 bne $832c
018329 jsr $8a2c
01832c plb
01832d rtl
018336 php
018337 phb
018338 phk
018339 plb
01833a sep #$20
01833c rep #$10
01833e lda $19a5
018341 bmi $8357
018343 jsr $8e06
018346 jsr $9739
018349 lda #$00
01834b xba
01834c lda $1a46
01834f asl a
018350 tax
018351 jsr ($835a,x)
018354 stz $1a46
018357 plb
018358 plp
018359 rtl



; MISSING: $01835a-$01836b ($11 bytes)



01836c ldx #$0000		; clear X
01836f txa
018370 xba
018371 lda $839e,x
018374 sta $2121
018377 ldy #$2200
01837a sty $4300
01837d ldy $839f,x
018380 sty $4302
018383 lda #$7f
018385 sta $4304
018388 lda $83a1,x
01838b tay
01838c sty $4305
01838f lda #$01
018391 sta $420b
018394 inx
018395 inx
018396 inx
018397 inx
018398 cpx #$0020
01839b bne $8371
01839d rts				; exit routine



; MISSING: $01839e-$0183bd ($1f bytes)



0183be jsr $83cb
0183c1 lda $1a4c
0183c4 dec
0183c5 bne $83ca
0183c7 jsr $8400
0183ca rts



; MISSING: 0183ca ??



; ROUTINE: Copy from WRAM to VRAM through DMA (channel 0) up to 4 times, options at $19fa-$1a12
; M flag should be set so A is 8bit
; X flag should be cleared so X and Y are 16bit
; parameters:
;		$19fa => 1 byte, VMAIN flags
;		$19fb-$1a02 => 8 bytes, 2-byte pairs, 4 of them, each is destination address in VRAM
;		$1a03-$1a0a => 8 bytes, 2-byte pairs, 4 of them, each is source address offset
;		$1a0b-$1a12 => 8 bytes, 2-byte pairs, 4 of them, each is DMA transfer size in bytes
; known usages: load tilemap data
0183cb ldx #$0000		; setup X as a counter starting at $0000
; start of loop - setup and run dma transfer up to 4 times {
	0183ce ldy $1a0b,x		; set y to DMA transfer size (value at x + $1a0b, should be lowram address?)
	0183d1 beq $83ff		; branch to routine exit when y = $0000 (no bytes to transfer)
	0183d3 sty $4305		; set DMA transfer size
	0183d6 ldy #$1801		; $18 means destination is VRAM register $2118, $01 means write 2 bytes each time
	0183d9 sty $4300		; write dma control and destination registers
							; setup source
	0183dc ldy $1a03,x			; lower 16 bits of source address (value at x + $1a03, should be lowram address?)
	0183df sty $4302			; set source offset
	0183e2 lda #$00				; upper 8 bits of source address
	0183e4 sta $4304			; set source bank to $00
	0183e7 ldy $19fb,x		; set y to destination address in VRAM (value at x + $19fb, should be lowram address?)
	0183ea sty $2116		; set destination address [VMADDL/VMADDH]
	0183ed lda $19fa		; load VMAIN flags from $19fa
	0183f0 sta $2115		; set video port control [VMAIN]
	0183f3 lda #$01			; bitmask for DMA channel 0
	0183f5 sta $420b		; start dma transfer on channel 0
	0183f8 inx				; increment counter
	0183f9 inx				; increment counter
	0183fa cpx #$0008		; compare counter to $0008
	0183fd bne $83ce		; if x != 8, jump to start of loop
}
0183ff rts				; exit routine



; ROUTINE: Copy from WRAM to VRAM through DMA (channel 0) up to 4 times, options at $1a13
; M flag should be set so A is 8bit
; X flag should be cleared so X and Y are 16bit
; variables:
;		$1a13 => 1 byte, VMAIN flags
;		$1a14-$1a1b => 8 bytes, 2-byte pairs, 4 of them, each is destination address in VRAM
;		$1a1c-$1a23 => 8 bytes, 2-byte pairs, 4 of them, each is source address offset
;		$1a24-$1a2b => 8 bytes, 2-byte pairs, 4 of them, each is DMA transfer size in bytes
018400 ldx #$0000		; setup X as a counter starting at $0000
; start of loop - setup and run dma transfer up to 4 times {
	018403 ldy $1a24,x		; set y to DMA transfer size (value at x + $1a24, should be lowram address?)
	018406 beq $8434		; branch to routine exit when y = $0000 (no bytes to transfer)
	018408 sty $4305		; set DMA transfer size
	01840b ldy #$1801		; $18 means destination is VRAM register $2118, $01 means write 2 bytes each time
	01840e sty $4300		; write dma control and destination registers
							; setup source
	018411 ldy $1a1c,x			; lower 16 bits of source address (value at x + $1a1c, should be lowram address?)
	018414 sty $4302			; set source offset
	018417 lda #$00				; upper 8 bits of source address
	018419 sta $4304			; set source bank to $00
	01841c ldy $1a14,x		; set y to destination address in VRAM (value at x + $1a14, should be lowram address?)
	01841f sty $2116		; set destination address [VMADDL/VMADDH]
	018422 lda $1a13		; load VMAIN flags from $1a13
	018425 sta $2115		; set video port control [VMAIN]
	018428 lda #$01			; bitmask for DMA channel 0
	01842a sta $420b		; start dma transfer on channel 0
	01842d inx				; increment counter
	01842e inx				; increment counter
	01842f cpx #$0008		; compare counter to $0008
	018432 bne $8403		; if x != 8, jump to start of loop
}
018434 rts				; exit routine



; ROUTINE: Copy $2000 bytes from WRAM $7fd274 to VRAM $0000 through DMA (channel 0)
; M flag should be set so A is 8bit
; X flag should be cleared so X and Y are 16bit
; TODO: cleanup, rewrite
						; setup destination
018435 ldx #$0000			; destination address in VRAM is $0000
018438 stx $2116			; set destination address [VMADDL/VMADDH]
01843b lda #$80				; $80 means increment destination address by 1 word (2 bytes) on write
01843d sta $2115			; set video port control [VMAIN]
018440 ldx #$1801			; $18 means destination is VRAM register $2118, $01 means write 2 bytes each time
018443 stx $4300			; write dma control and destination registers
						; setup source
018446 ldx #$d274			; lower 16 bits of source address
018449 stx $4302			; set source offset to $d274
01844c lda #$7f				; upper 8 bits of source address
01844e sta $4304			; set source bank to $7F
018451 ldx #$2000		; we're going to copy $2000 bytes
018454 stx $4305		; set DMA transfer size to $2000
018457 lda #$01			; bitmask for DMA channel 0
018459 sta $420b		; start DMA transfer on channel 0
01845c rts				; exit routine



01845d ldx #$c588
018460 lda #$00
018462 pha
018463 sta $2121
018466 ldy #$2200
018469 sty $4300
01846c stx $4302
01846f lda #$7f
018471 sta $4304
018474 ldy #$0010
018477 sty $4305
01847a lda #$01
01847c sta $420b
01847f rep #$20			; set A => 16bit
018481 txa
018482 clc
018483 adc #$0010
018486 tax
018487 sep #$20			; set A => 8bit
018489 pla
01848a clc
01848b adc #$10
01848d cmp #$80
01848f bne $8462
018491 rts				; exit routine



; ROUTINE: Copy $2e00 bytes from WRAM $7f0000 to VRAM $6900 through DMA (channel 0)
; M flag should be set so A is 8bit
; X flag should be cleared so X and Y are 16bit
; TODO: cleanup, rewrite
						; setup destination
018492 ldx #$6900			; destination address in VRAM is $6900
018495 stx $2116			; set destination address [VMADDL/VMADDH]
018498 lda #$80				; $80 means increment destination address by 1 word (2 bytes) on write
01849a sta $2115			; set video port control [VMAIN]
01849d ldx #$1801			; $18 means destination is VRAM register $2118, $01 means write 2 bytes each time
0184a0 stx $4300			; write dma control and destination registers
						; setup source
0184a3 stz $4302			; set source offset to $000000
0184a6 ldx #$7f00			; upper 16 bits of source address
0184a9 stx $4303			; source address is $7f0000 (Extended RAM - WRAM)
0184ac ldx #$2e00		; we're going to copy $2e00 bytes
0184af stx $4305		; set DMA transfer size to $2e00
0184b2 lda #$01			; bitmask for DMA channel 0
0184b4 sta $420b		; start DMA transfer on channel 0
0184b7 rts				; exit routine



; ROUTINE: Copy $0c00 bytes from WRAM $7f4000 to VRAM $6100 through DMA (channel 0)
; M flag should be set so A is 8bit
; X flag should be cleared so X and Y are 16bit
; TODO: cleanup, rewrite
						; setup destination
0184b8 ldx #$6100			; destination address in VRAM is $6100
0184bb stx $2116			; set destination address [VMADDL/VMADDH]
0184be lda #$80				; $80 means increment destination address by 1 word (2 bytes) on write
0184c0 sta $2115			; set video port control [VMAIN]
0184c3 ldx #$1801			; $18 means destination is VRAM register $2118, $01 means write 2 bytes each time
0184c6 stx $4300			; write dma control and destination registers
						; setup source
0184c9 ldx #$4000			; lower 16 bits of source address
0184cc stx $4302			; set source offset to $4000
0184cf lda #$7f				; upper 8 bits of source address
0184d1 sta $4304			; set source bank to $7F
0184d4 ldx #$0c00		; we're going to copy $0c00 bytes
0184d7 stx $4305		; set DMA transfer size to $0c00
0184da lda #$01			; bitmask for DMA channel 0
0184dc sta $420b		; start DMA transfer on channel 0
0184df rts				; exit routine



; ROUTINE: Copy some s
;		Copy $0c00 bytes from LowRAM $000c40 to OAM $0020 through DMA (channel 0)
;		and Copy $001c bytes from LowRAM $000c40 to OAM $0102 through DMA (channel 0)
; TODO: finish, 
; M flag should be set so A is 8bit
; X flag should be cleared so X and Y are 16bit
0184e0 ldx #$0020		; 
0184e3 stx $2102		; set the OAM address register [OAMADDL/OAMADDH]
0184e6 ldx #$0400		; $00 means cpu=>ppu, auto increment, absolute, write same address twice LH
						; $04 means destination is $2104 OAM data register [OAMDATA]
0184e9 stx $4300		; write dma control and destination registers
						; setup source
0184ec ldx #$0c40			; lower 16 bits of source address
0184ef stx $4302			; set source offset to $0c40
0184f2 stz $4304			; set source bank to $00
0184f5 ldx #$01c0		; we're going to copy $0c00 bytes
0184f8 stx $4305		; set DMA transfer size to $0c00
0184fb lda #$01			; bitmask for DMA channel 0
0184fd sta $420b		; start DMA transfer on channel 0
018500 ldx #$0102		; 
018503 stx $2102		; set the OAM address register [OAMADDL/OAMADDH]
018506 ldx #$0400		; $00 means cpu=>ppu, auto increment, absolute, write same address twice LH
						; $04 means destination is $2104 OAM data register [OAMDATA]
018509 stx $4300		; write dma control and destination registers
						; setup source
01850c ldx #$0e04			; lower 16 bits of source address
01850f stx $4302			; set source offset to $0e04
018512 stz $4304			; set source bank to $00
018515 ldx #$001c		; we're going to copy $001c bytes
018518 stx $4305		; set DMA transfer size to $001c
01851b lda #$01			; bitmask for DMA channel 0
01851d sta $420b		; start DMA transfer on channel 0
018520 rts				; exit routine
018527 php
018528 phb
018529 phk
01852a plb
01852b rep #$30
01852d inc $19a6
018530 sep #$20
018532 stz $19f7
018535 lda $19a5
018538 inc
018539 beq $8553
01853b bmi $8546
01853d jsr $8672
018540 ldx $1a48
018543 stx $2102
018546 lda #$00
018548 xba
018549 lda $1a45
01854c and #$03
01854e asl a
01854f tax
018550 jsr ($8556,x)
018553 plb
018554 plp
018555 rtl



; MISSING: 018556-01855d ($7 bytes)



01855e lda $0110
018561 bpl $8567
018563 stz $1a45
018566 rts				; exit routine



018567 ldx #$0100
01856a stx $080d
01856d ldx #$0400
018570 stx $080f
018573 lda #$80
018575 sta $0811
018578 bra $858b
01857a ldx #$7ac8
01857d stx $080d
018580 ldx #$f9a8
018583 stx $080f
018586 lda #$0f
018588 sta $0811
01858b ldx #$0000		; clear X
01858e stx $212a
018591 stz $212e
018594 stz $212f
018597 lda #$ff
018599 stz $2126
01859c sta $2127
01859f stz $2128
0185a2 sta $2129
0185a5 lda #$22
0185a7 sta $2123
0185aa sta $2124
0185ad sta $2125
0185b0 lda $1a50
0185b3 and #$0f
0185b5 ora #$50
0185b7 sta $2130
0185ba lda #$81
0185bc sta $0809
0185bf lda #$ff
0185c1 sta $0801
0185c4 stz $0802
0185c7 sta $080a
0185ca stz $080b
0185cd stz $080c
0185d0 dec
0185d1 sta $0800
0185d4 lda #$03
0185d6 sta $1a45
0185d9 rts				; exit routine
0185da lda #$0f
0185dc sta $0110
0185df lda $080e
0185e2 bit #$80
0185e4 bne $8651
0185e6 pha
0185e7 sec
0185e8 sbc #$1e
0185ea beq $85ee
0185ec bpl $85f0
0185ee lda #$01
0185f0 sta $0800
0185f3 pla
0185f4 sta $0804
0185f7 sta $0807
0185fa pha
0185fb eor #$ff
0185fd sta $0805
018600 sta $0808
018603 lda #$80
018605 sec
018606 sbc $01,s
018608 sta $0803
01860b sta $0806
01860e pla
01860f lda $0800
018612 cmp #$0c
018614 bcs $861b
018616 stz $2106
018619 bra $8626



01861b lda $080e
01861e asl a
01861f and #$f0
018621 ora #$07
018623 sta $2106
018626 rep #$20
018628 lda $080f
01862b adc $080d
01862e sta $080d
018631 lda $080f
018634 adc #$0018
018637 sta $080f
01863a sep #$20
01863c ldx #$2601
01863f stx $4310
018642 ldx #$0800
018645 stx $4312
018648 stz $4314
01864b lda #$02
01864d tsb $0111
018650 rts
018651 lda #$02
018653 trb $0111
018656 stz $2123
018659 stz $2124
01865c stz $2125
01865f lda $1a50
018662 sta $2130
018665 stz $1a45
018668 lda $0811
01866b sta $0110
01866e stz $2106
018671 rts
018672 phd
018673 pea $1900
018676 pld
018677 rep #$20
018679 lda $00
01867b clc
01867c adc $08
01867e and #$01ff
018681 sta $00
018683 sep #$20
018685 sta $210d
018688 xba
018689 sta $210d
01868c rep #$20
01868e lda $02
018690 clc
018691 adc $0a
018693 and #$00ff
018696 sta $02
018698 sep #$20
01869a sta $210e
01869d xba
01869e sta $210e
0186a1 lda #$00
0186a3 xba
0186a4 lda $1a4c
0186a7 asl a
0186a8 tax
0186a9 jsr ($86b5,x)
0186ac ldx #$0000
0186af stx $08
0186b1 stx $0a
0186b3 pld
0186b4 rts
0186c7 lda $00
0186c9 sta $210f
0186cc lda $01
0186ce sta $210f
0186d1 lda $02
0186d3 sta $2110
0186d6 lda $03
0186d8 sta $2110
0186db rts
0186dc rep #$20			; set A => 16bit
0186de lda $08
0186e0 bit #$0001
0186e3 bne $86e7
0186e5 stz $0c
0186e7 clc
0186e8 adc $0c
0186ea sta $0c
0186ec bit #$0001
0186ef bne $8707
0186f1 stz $0c
0186f3 cmp #$8000
0186f6 ror a
0186f7 adc $04
0186f9 and #$01ff
0186fc sta $04
0186fe sep #$20			; set A => 8bit
018700 sta $210f
018703 xba
018704 sta $210f
018707 rep #$20			; set A => 16bit
018709 lda $0a
01870b bit #$0001
01870e bne $8712
018710 stz $0e
018712 clc
018713 adc $0e
018715 sta $0e
018717 bit #$0001
01871a bne $8732
01871c stz $0e
01871e cmp #$8000
018721 ror a
018722 adc $06
018724 and #$01ff
018727 sta $06
018729 sep #$20			; set A => 8bit
01872b sta $2110
01872e xba
01872f sta $2110
018732 sep #$20			; set A => 8bit
018734 rts				; exit routine



018735 dec $1a59
018738 bne $8752
01873a rep #$20			; set A => 16bit
01873c lda $0c
01873e clc
01873f adc $04
018741 sta $04
018743 lda $0e
018745 clc
018746 adc $06
018748 sta $06
01874a sep #$20			; set A => 8bit
01874c lda $1a58
01874f sta $1a59
018752 rep #$20			; set A => 16bit
018754 lda $04
018756 clc
018757 adc $00
018759 and #$01ff
01875c sep #$20			; set A => 8bit
01875e sta $210f
018761 xba
018762 sta $210f
018765 rep #$20			; set A => 16bit
018767 lda $06
018769 clc
01876a adc $02
01876c and #$00ff
01876f sep #$20			; set A => 8bit
018771 sta $2110
018774 xba
018775 sta $2110
018778 rts				; exit routine



018779 rep #$20			; set A => 16bit
01877b lda $04
01877d and #$01ff
018780 sta $04
018782 sep #$20			; set A => 8bit
018784 sta $210f
018787 xba
018788 sta $210f
01878b rep #$20			; set A => 16bit
01878d lda $06
01878f and #$00ff
018792 sta $06
018794 sep #$20			; set A => 8bit
018796 sta $2110
018799 xba
01879a sta $2110
01879d rts				; exit routine



0187e0 php				; save processor status to stack
0187e1 sep #$20			; set A => 8bit
0187e3 rep #$10			; set X,Y => 16bit
0187e5 lda #$00
0187e7 xba
0187e8 lda $19d7
0187eb asl a
0187ec tax
0187ed lda $0190d4,x
0187f1 clc
0187f2 adc $192d
0187f5 sta $192d
0187f8 lda $0190d5,x
0187fc clc
0187fd adc $192e
018800 sta $192e
018803 jsr $8c1e
018806 jsr $8c3c
018809 plp
01880a rts				; exit routine



01880b php				; save processor status to stack
01880c sep #$20			; set A => 8bit
01880e rep #$10			; set X,Y => 16bit
018810 lda #$00
018812 xba
018813 lda $192d
018816 tax
018817 lda $192e
01881a sta $4202
01881d lda $1924
018820 sta $4203
018823 rep #$30			; set A,X,Y => 16bit
018825 txa
018826 clc
018827 adc $4216
01882a tax
01882b plp
01882c rts				; exit routine



01885f pha
018860 and #$07
018862 pha
018863 pha
018864 lda $19b4
018867 and #$f8
018869 sta $19b4
01886c pla
01886d ora $19b4
018870 sta $19b4
018873 pla
018874 cmp #$00
018876 beq $88a0
018878 cmp #$01
01887a bne $888f
01887c lda #$40
01887e sta $1994
018881 ldx #$0204
018884 stx $1995
018887 ldx #$020c
01888a stx $1997
01888d bra $88a0
01888f lda #$c0
018891 sta $1994
018894 ldx #$020c
018897 stx $1995
01889a ldx #$0204
01889d stx $1997
0188a0 pla
0188a1 rts				; exit routine



0188cc php				; save processor status to stack
0188cd sep #$20			; set A => 8bit
0188cf rep #$10			; set X,Y => 16bit
0188d1 lda $19bf
0188d4 sta $4202
0188d7 lda #$40
0188d9 sta $4203
0188dc lda #$00
0188de xba
0188df lda $19bd
0188e2 pha
0188e3 and #$0f
0188e5 asl a
0188e6 rep #$30			; set A,X,Y => 16bit
0188e8 clc
0188e9 adc $4216
0188ec sta $192b
0188ef sep #$20			; set A => 8bit
0188f1 rep #$10			; set X,Y => 16bit
0188f3 ldx #$4000
0188f6 pla
0188f7 and #$10
0188f9 beq $88fe
0188fb ldx #$4400
0188fe rep #$30			; set A,X,Y => 16bit
018900 txa
018901 clc
018902 adc $192b
018905 sta $192b
018908 plp
018909 rts				; exit routine
018a2c sep #$20
018a2e rep #$10
018a30 phk
018a31 plb
018a32 lda $19ac
018a35 bit #$01
018a37 bne $8a50
018a39 pha
018a3a inc
018a3b and #$03
018a3d sta $19ac
018a40 pla
018a41 bit #$02
018a43 bne $8a4a
018a45 jsl $079030
018a49 rts
018a4a jsr $a2a5
018a4d jsr $a34a
018a50 rts



018a51 php				; save processor status to stack
018a52 rep #$30			; set A,X,Y => 16bit
018a54 phx
018a55 phy
018a56 pha
018a57 phd				; save direct page to stack
018a58 pea $1a72
018a5b pld
018a5c sep #$20			; set A => 8bit
018a5e rep #$10			; set X,Y => 16bit
018a60 lda $0020
018a63 beq $8ab3
018a65 sta $192b
018a68 ldx #$0000		; clear X
018a6b ldy #$0016
018a6e sep #$20			; set A => 8bit
018a70 rep #$10			; set X,Y => 16bit
018a72 lda $0f,x
018a74 cmp $192b
018a77 beq $8a97
018a79 rep #$30			; set A,X,Y => 16bit
018a7b txa
018a7c clc
018a7d adc #$001a
018a80 tax
018a81 dey
018a82 bne $8a6e
018a97 lda $0e,x
018a99 phx
018a9a jsr $8aca
018a9d plx
018a9e sta $0024
018aa1 lda $13,x
018aa3 sta $0022
018aa6 lda $15,x
018aa8 sta $0023
018aab rep #$30			; set A,X,Y => 16bit
018aad pld
018aae pla
018aaf plx
018ab0 ply
018ab1 plp
018ab2 rtl				; exit routine



018ab3 lda $0e8b
018ab6 asl a
018ab7 asl a
018ab8 asl a
018ab9 asl a
018aba jsr $8aca
018abd sta $0024
018ac0 rep #$30			; set A,X,Y => 16bit
018ac2 lda $199d
018ac5 sta $0022
018ac8 bra $8aab
018aca ldx #$0008
018acd and #$30
018acf beq $8ae2
018ad1 ldx #$0001
018ad4 cmp #$10
018ad6 beq $8ae2
018ad8 ldx #$0004
018adb cmp #$20
018add beq $8ae2
018adf ldx #$0002
018ae2 txa
018ae3 rts				; exit routine



018ae4 php				; save processor status to stack
018ae5 phb				; save databank to stack
018ae6 phd				; save direct page to stack
018ae7 rep #$30			; set A,X,Y => 16bit
018ae9 phx
018aea phy
018aeb pha
018aec pea $1a72
018aef pld
018af0 lda $192b
018af3 and #$00ff
018af6 asl a
018af7 sta $192d
018afa asl a
018afb asl a
018afc pha
018afd clc
018afe adc $192d
018b01 sta $192d
018b04 pla
018b05 asl a
018b06 clc
018b07 adc $192d
018b0a tax
018b0b lda $10,x
018b0d and #$00ff
018b10 cmp #$0005
018b13 bcs $8b6b
018b15 asl a
018b16 phx
018b17 tax
018b18 lda $00fdcf,x
018b1c sta $192d
018b1f plx
018b20 lda $192c
018b23 and #$0003
018b26 asl a
018b27 asl a
018b28 asl a
018b29 asl a
018b2a sta $192f
018b2d sep #$20			; set A => 8bit
018b2f rep #$10			; set X,Y => 16bit
018b31 lda $0e,x
018b33 and #$cf
018b35 ora $192f
018b38 sta $0e,x
018b3a rep #$30			; set A,X,Y => 16bit
018b3c lda $192f
018b3f clc
018b40 adc $192d
018b43 tay
018b44 jsr $ae89
018b47 phx
018b48 lda $192b
018b4b and #$00ff
018b4e asl a
018b4f asl a
018b50 tax
018b51 lda $01a639,x
018b55 tay
018b56 plx
018b57 lda $01,x
018b59 sta $0c02,y
018b5c lda $03,x
018b5e sta $0c06,y
018b61 lda $05,x
018b63 sta $0c0a,y
018b66 lda $07,x
018b68 sta $0c0e,y
018b6b stx $192d
018b6e pla
018b6f plx
018b70 ply
018b71 pld
018b72 plb
018b73 plp
018b74 rts				; exit routine



; ROUTINE: Clear bits in 2 byte value at $008e using mask of $4030
; TODO: What is this doing? why is it useful?
; TODO: watch in debugger to make sure this is right
018b75 php				; save process status to stack
018b76 sep #$20			; set A => 8bit, TODO: why is this done right before reversing it?
018b78 rep #$30			; set A,X,Y => 16bit
018b7a lda #$4030		; set A to $4030 (4030 = 0100 0000 0011 0000) to use as a bitmask
018b7d trb $008e		; clear bits in value at bank:008e that are set in A
018b80 plp				; restore process status from stack
018b81 rts				; exit routine
018b82 php
018b83 sep #$20
018b85 rep #$30
018b87 lda #$4030
018b8a tsb $008e
018b8d plp
018b8e rts



018b8f sep #$20			; set A => 8bit
018b91 rep #$10			; set X,Y => 16bit
018b93 lda #$00
018b95 xba
018b96 lda $1914
018b99 and #$1f
018b9b sta $192b
018b9e cmp #$14
018ba0 bcc $8bc0
018ba2 lda $1917
018ba5 rol a
018ba6 rol a
018ba7 rol a
018ba8 and #$03
018baa inc
018bab jsl $009776
018baf beq $8bb9
018bb1 lda $192b
018bb4 clc
018bb5 adc #$08
018bb7 bra $8bbc
018bb9 lda $192b
018bbc sta $0a9c
018bbf rts				; exit routine



018bc0 ldx $19e8
018bc3 lda $1a7f,x
018bc6 bit #$20
018bc8 beq $8bb9
018bd0 jsr $8bd4
018bd3 rtl				; exit routine



018bd4 php				; save processor status to stack
018bd5 phd				; save direct page to stack
018bd6 sep #$20			; set A => 8bit
018bd8 rep #$10			; set X,Y => 16bit
018bda pea $1a72
018bdd pld
018bde ldx #$0000		; clear X
018be1 ldy #$0000		; clear Y
018be4 sep #$20			; set A => 8bit
018be6 rep #$10			; set X,Y => 16bit
018be8 lda $00,x
018bea cmp #$ff
018bec beq $8c08
018bee lda $0d,x
018bf0 and #$03
018bf2 cmp $192b
018bf5 bne $8c08
018bf7 lda $0f,x
018bf9 cmp $192c
018bfc bne $8c08
018bfe stx $192b
018c01 tya
018c02 sta $192d
018c05 pld
018c06 plp
018c07 rts				; exit routine



018c08 rep #$30			; set A,X,Y => 16bit
018c0a txa
018c0b clc
018c0c adc #$001a
018c0f tax
018c10 iny
018c11 cpy #$0016
018c14 bne $8be4
018c1e php				; save processor status to stack
018c1f sep #$20			; set A => 8bit
018c21 rep #$10			; set X,Y => 16bit
018c23 lda $192d
018c26 bpl $8c2e
018c2e cmp $1924
018c31 bcc $8c3a
018c3a plp
018c3b rts				; exit routine



018c3c php				; save processor status to stack
018c3d sep #$20			; set A => 8bit
018c3f rep #$10			; set X,Y => 16bit
018c41 lda $192e
018c44 bpl $8c4c
018c46 clc
018c47 adc $1925
018c4a bra $8c55
018c4c cmp $1925
018c4f bcc $8c58
018c55 sta $192e
018c58 plp
018c59 rts				; exit routine



018c5a php				; save processor status to stack
018c5b phx
018c5c phy
018c5d rep #$30			; set A,X,Y => 16bit
018c5f phk
018c60 plb
018c61 ldx #$199d
018c64 ldy #$832e
018c67 lda $0000,y
018c6a sta $0000,x
018c6d lda $0002,y
018c70 sta $0002,x
018c73 lda $0004,y
018c76 sta $0004,x
018c79 lda $0006,y
018c7c sta $0006,x
018c7f ply
018c80 plx
018c81 plp
018c82 rts				; exit routine



018c83 php				; save processor status to stack
018c84 lda $1928
018c87 sta $211b
018c8a stz $211b
018c8d lda #$00
018c8f xba
018c90 lda $19d7
018c93 tax
018c94 lda $8cab,x
018c97 sta $211c
018c9a rep #$20			; set A => 16bit
018c9c txa
018c9d inc
018c9e and #$0001
018ca1 asl a
018ca2 tax
018ca3 lda $2134
018ca6 sta $1908,x
018ca9 plp
018caa rts				; exit routine



018caf phx
018cb0 phy
018cb1 php				; save processor status to stack
018cb2 sep #$20			; set A => 8bit
018cb4 sta $198f
018cb7 stz $1990
018cba lda #$f5
018cbc jsl $009776
018cc0 bne $8cc7
018cc2 lda $19b4
018cc5 bpl $8cd8
018cc7 lda #$55
018cc9 ldx $1995
018ccc sta $0c00,x
018ccf ldx $1997
018cd2 sta $0c00,x
018cd5 jmp $8dd4
018cd8 and #$07
018cda beq $8cf7
018cdc ldx #$0005
018cdf dec
018ce0 beq $8ce5
018ce2 ldx #$0000		; clear X
018ce5 lda $8dd8,x
018ce8 sta $1994
018ceb ldy $8dd9,x
018cee sty $1995
018cf1 ldy $8ddb,x
018cf4 sty $1997
018cf7 lda $0e8d
018cfa beq $8d00
018d00 lda $19cb
018d03 and #$70
018d05 lsr a
018d06 lsr a
018d07 lsr a
018d08 tax
018d09 sep #$10			; set X,Y => 8bit
018d0b rep #$10			; set X,Y => 16bit
018d0d lda $1a54
018d10 sec
018d11 sbc $8de2,x
018d14 sta $198b
018d17 lda $1a54
018d1a sec
018d1b sbc $8de3,x
018d1e sta $198c
018d21 rep #$20			; set A => 16bit
018d23 lda $198f
018d26 asl a
018d27 asl a
018d28 asl a
018d29 tax
018d2a stz $198d
018d2d lda #$0000
018d30 sep #$20			; set A => 8bit
018d32 lda $1994
018d35 tay
018d36 lda #$02
018d38 pha
018d39 lda $1993
018d3c clc
018d3d adc $00f141,x
018d41 sta $0c02,y
018d44 lda $00f142,x
018d48 ora $19b2
018d4b ora $198b
018d4e sta $0c03,y
018d51 phx
018d52 ldx $198d
018d55 lda $199d,x
018d58 clc
018d59 adc $199a
018d5c sta $0c00,y
018d5f inx
018d60 lda $199d,x
018d63 clc
018d64 adc $1999
018d67 sta $0c01,y
018d6a inx
018d6b stx $198d
018d6e plx
018d6f inx
018d70 inx
018d71 iny
018d72 iny
018d73 iny
018d74 iny
018d75 pla
018d76 dec
018d77 bne $8d38
018d79 lda #$02
018d7b pha
018d7c lda $1993
018d7f clc
018d80 adc $00f141,x
018d84 sta $0c02,y
018d87 lda $00f142,x
018d8b bit #$01
018d8d beq $8d95
018d8f dec
018d90 ora $19b2
018d93 bra $8d98
018d95 ora $19b3
018d98 ora $198c
018d9b sta $0c03,y
018d9e phx
018d9f ldx $198d
018da2 lda $199d,x
018da5 clc
018da6 adc $199a
018da9 sta $0c00,y
018dac inx
018dad lda $199d,x
018db0 clc
018db1 adc $1999
018db4 sta $0c01,y
018db7 inx
018db8 stx $198d
018dbb plx
018dbc inx
018dbd inx
018dbe iny
018dbf iny
018dc0 iny
018dc1 iny
018dc2 pla
018dc3 dec
018dc4 bne $8d7b
018dc6 ldx $1995
018dc9 stz $0c00,x
018dcc ldx $1997
018dcf lda #$55
018dd1 sta $0c00,x
018dd4 plp
018dd5 ply
018dd6 plx
018dd7 rts				; exit routine



018df2 php				; save processor status to stack
018df3 sep #$20			; set A => 8bit
018df5 rep #$10			; set X,Y => 16bit
018df7 lda $1a46
018dfa bne $8df7
018dfc plp
018dfd rts				; exit routine
018e06 sep #$20
018e08 rep #$10
018e0a lda $19a5
018e0d beq $8e12
018e12 lda #$00
018e14 xba
018e15 lda $19ac
018e18 asl a
018e19 tax
018e1a jmp ($8dfe,x)
018e1d lda $19ac
018e20 inc
018e21 and #$03
018e23 sta $19ac
018e26 jsr $8f0d
018e29 ldx #$0001
018e2c lda $19df
018e2f cmp #$ff
018e31 beq $8e39



018e33 jsr $8f4f
018e36 ldx #$0003
018e39 txa
018e3a sta $420b
018e3d jsr $8f2d
018e40 ldx #$0001
018e43 lda $19e1
018e46 cmp #$ff
018e48 beq $8e50
018e4a jsr $8f6e
018e4d ldx #$0003
018e50 txa
018e51 sta $420b
018e54 phb
018e55 pea $007f
018e58 plb
018e59 pla
018e5a inc $ced8
018e5d inc $ceda
018e60 inc $cedc
018e63 inc $cede
018e66 inc $cee0
018e69 inc $cee2
018e6c inc $cee4
018e6f inc $cee6
018e72 inc $cee8
018e75 inc $ceea
018e78 inc $ceec
018e7b inc $ceee
018e7e inc $cef0
018e81 inc $cef2
018e84 plb
018e85 sep #$20
018e87 rep #$10
018e89 lda #$00
018e8b xba
018e8c lda $19cb
018e8f and #$70
018e91 tay
018e92 lda $1a51
018e95 cpy #$0070
018e98 bne $8e9c
018e9a ora #$10
018e9c sta $2131
018e9f lda $1a50
018ea2 sta $2130
018ea5 rts
018ea6 jsr $8f0d
018ea9 lda #$01
018eab sta $420b
018eae jsr $8f2d
018eb1 lda #$01
018eb3 sta $420b
018eb6 bra $8e85
018eb8 lda $19ac
018ebb inc
018ebc and #$03
018ebe sta $19ac
018ec1 lda $19ab
018ec4 cmp #$ff
018ec6 beq $8ea6
018ec8 phb				; save databank to stack
018ec9 pea $007f
018ecc plb
018ecd pla
018ece inc $cec8
018ed1 inc $ceca
018ed4 inc $cecc
018ed7 inc $cece
018eda inc $ced0
018edd inc $ced2
018ee0 inc $ced4
018ee3 inc $ced6
018ee6 plb
018ee7 ldx #$cdc8
018eea stx $1cc3
018eed ldx #$0000		; clear X
018ef0 stx $1cc5
018ef3 ldy #$0002
018ef6 phx
018ef7 jsr $8f0d
018efa plx
018efb jsr $8f8d
018efe sta $420b
018f01 jsr $8f2d
018f04 jsr $8f8d
018f07 sta $420b
018f0a jmp $8e85
018f0d lda #$20
018f0f sta $2102
018f12 stz $2103
018f15 stz $4300
018f18 lda #$04
018f1a sta $4301
018f1d ldx #$0c40
018f20 stx $4302
018f23 stz $4304
018f26 ldx #$01c0
018f29 stx $4305
018f2c rts
018f2d lda #$02
018f2f sta $2102
018f32 lda #$01
018f34 sta $2103
018f37 stz $4300
018f3a lda #$04
018f3c sta $4301
018f3f ldx #$0e04
018f42 stx $4302
018f45 stz $4304
018f48 ldx #$001c
018f4b stx $4305
018f4e rts
018f4f lda #$70
018f51 sta $2121
018f54 stz $4310
018f57 lda #$22
018f59 sta $4311
018f5c lda #$7f
018f5e sta $4314
018f61 ldx #$c5f8
018f64 stx $4312
018f67 ldx #$0010
018f6a stx $4315
018f6d rts				; exit routine



018f6e lda #$d0
018f70 sta $2121
018f73 stz $4310
018f76 lda #$22
018f78 sta $4311
018f7b lda #$7f
018f7d sta $4314
018f80 ldx #$c528
018f83 stx $4312
018f86 ldx #$0010
018f89 stx $4315
018f8c rts				; exit routine



018f8d php				; save processor status to stack
018f8e rep #$30			; set A,X,Y => 16bit
018f90 ldx $1cc5
018f93 lda $0019da,x
018f97 cmp #$ffff
018f9a beq $8fd6
018f9c sta $2116
018f9f lda $1cc3
018fa2 sta $4312
018fa5 lda #$0080
018fa8 sta $4315
018fab sep #$20			; set A => 8bit
018fad rep #$10			; set X,Y => 16bit
018faf lda #$80
018fb1 sta $2115
018fb4 lda #$01
018fb6 sta $4310
018fb9 lda #$18
018fbb sta $4311
018fbe lda #$7f
018fc0 sta $4314
018fc3 rep #$30			; set A,X,Y => 16bit
018fc5 ldx #$ce48
018fc8 stx $1cc3
018fcb inc $1cc5
018fce inc $1cc5
018fd1 lda #$0003
018fd4 plp
018fd5 rts				; exit routine



018fd6 rep #$30			; set A,X,Y => 16bit
018fd8 lda #$0001
018fdb plp
018fdc rts				; exit routine



019037 phx
019038 php				; save processor status to stack
019039 sep #$20			; set A => 8bit
01903b rep #$10			; set X,Y => 16bit
01903d xba
01903e pha
01903f xba
019040 rep #$30			; set A,X,Y => 16bit
019042 and #$00ff
019045 tax
019046 lda $7ff274,x
01904a and #$0007
01904d sep #$20			; set A => 8bit
01904f rep #$10			; set X,Y => 16bit
019051 xba
019052 pla
019053 xba
019054 plp
019055 plx
019056 rts				; exit routine



019057 php				; save processor status to stack
019058 rep #$30			; set A,X,Y => 16bit
01905a lda $1900
01905d and #$01f0
019060 lsr a
019061 lsr a
019062 lsr a
019063 lsr a
019064 sta $19bd
019067 lda $1902
01906a and #$00f0
01906d lsr a
01906e lsr a
01906f lsr a
019070 lsr a
019071 inc
019072 and #$000f
019075 sta $19bf
019078 plp
019079 rts				; exit routine



01907a pha
01907b phx
01907c php				; save processor status to stack
01907d sep #$20			; set A => 8bit
01907f rep #$10			; set X,Y => 16bit
019081 lda #$00
019083 xba
019084 lda $19d7
019087 asl a
019088 asl a
019089 tax
01908a rep #$30			; set A,X,Y => 16bit
01908c lda $0190ac,x
019090 clc
019091 adc $19bd
019094 and #$001f
019097 sta $19bd
01909a lda $0190ae,x
01909e clc
01909f adc $19bf
0190a2 and #$000f
0190a5 sta $19bf
0190a8 plp
0190a9 plx
0190aa pla
0190ab rts				; exit routine



0190bc phx
0190bd php				; save processor status to stack
0190be sep #$20			; set A => 8bit
0190c0 rep #$10			; set X,Y => 16bit
0190c2 ldx $0e89
0190c5 stx $192d
0190c8 jsr $87e0
0190cb ldx $192d
0190ce stx $0e89
0190d1 plp
0190d2 plx
0190d3 rts				; exit routine



0190dc phx
0190dd php				; save processor status to stack
0190de rep #$30			; set A,X,Y => 16bit
0190e0 pha
0190e1 and #$00ff
0190e4 clc
0190e5 adc $19b5
0190e8 tax
0190e9 pla
0190ea sep #$20			; set A => 8bit
0190ec rep #$10			; set X,Y => 16bit
0190ee lda $07b013,x
0190f2 plp
0190f3 plx
0190f4 rts				; exit routine



01912a php				; save processor status to stack
01912b phx
01912c sep #$20			; set A => 8bit
01912e rep #$10			; set X,Y => 16bit
019130 ldx #$0f08
019133 stx $0501
019136 lda $19f5
019139 sta $0500
01913c lda $19f6
01913f beq $9149
019149 plx
01914a plp
01914b rts				; exit routine



01914c jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
01914f jsl $0b8149
019153 jsr $c839
019156 jsr $af55
019159 jsl $0b87b9
01915d jsl $0b836a
019161 jsr $fd7b		; jump to the "Copy tile data to WRAM" routine
019164 jsl $0b83b8
019168 jsl $0b83f2
01916c jsr $81db
01916f jsr $fe0b
019172 jsl $0b84fb
019176 ldy $0e89
019179 jsr $fd50
01917c sty $0e89
01917f jsl $0b8223
019183 jsl $0b8560
019187 jsr $c750
01918a ldx #$0000		; clear X
01918d stx $1908
019190 stx $190a
019193 ldx #$0008
019196 stx $1900
019199 ldx #$00f8
01919c stx $1902
01919f php				; save processor status to stack
0191a0 jsr $9fae
0191a3 plp
0191a4 jsr $a226
0191a7 ldx #$ffff
0191aa stx $195f
0191ad jsr $a403
0191b0 jsr $e76a
0191b3 jsr $ab5c
0191b6 jsr $ab5c
0191b9 jsr $ab5c
0191bc jsr $c8a8
0191bf jsl $0b82aa
0191c3 lda $1cc2
0191c6 beq $91d8
0191d8 jsr $94cc
0191db jsr $e61c
0191de jsr $a08a
0191e1 jsl $0c8000
0191e5 lda $0110
0191e8 bpl $91e1
0191ea lda $0111
0191ed pha
0191ee stz $0111
0191f1 stz $420c
0191f4 jsl $0b841d
0191f8 jsr $8435		; jump to "Copy $2000 bytes from WRAM $7fd274 to VRAM $0000 through DMA (channel 0)" routine
0191fb jsr $845d
0191fe jsr $8492
019201 jsr $84b8
019204 jsr $836c
019207 jsr $fe6b
01920a jsr $8672
01920d jsr $84e0
019210 lda $1916
019213 and #$1f
019215 sta $19ee
019218 sta $19f5
01921b lda #$26
01921d sta $19ef
019220 jsl $01b24b
019224 lda $19f6
019227 beq $9233
019233 pla
019234 sta $0111
019237 stz $1a46
01923a stz $19ac
01923d lda $0e91
019240 cmp #$05
019242 beq $9267
019244 lda #$02
019246 sta $1a45
019249 jsl $0c8000
01924d lda $1a45
019250 bne $9249
019252 ldx #$0000
019255 stx $0015
019258 stz $19a5
01925b jsr $8b82
01925e lda $0e91
019261 beq $9267
019263 jsl $009aec
019267 rts				; exit routine



019268 lda #$ff
01926a sta $19a5
01926d lda #$11
01926f sta $050a
019272 jsl $00bc9c
019276 bra $9286
019278 lda #$ff
01927a sta $19a5
01927d lda #$11
01927f sta $050a
019282 jsl $00bca5
019286 lda $0104
019289 cmp #$14
01928b beq $9292
01928d jsl $0192a1
019291 rts				; exit routine



0192a1 php				; save processor status to stack
0192a2 phb				; save databank to stack
0192a3 sep #$20			; set A => 8bit
0192a5 rep #$10			; set X,Y => 16bit
0192a7 lda #$ff
0192a9 sta $19a5
0192ac ldx #$0000		; clear X
0192af stx $0015
0192b2 dex
0192b3 stx $195f
0192b6 lda #$03
0192b8 sta $2101
0192bb lda #$01
0192bd pha
0192be plb
0192bf stz $19ac
0192c2 lda $0605
0192c5 cmp $19f5
0192c8 beq $92d0
0192ca ldx #$3080
0192cd stx $050a
0192d0 jsr $c839
0192d3 jsl $0b87b9
0192d7 jsr $fe0b
0192da php				; save processor status to stack
0192db jsr $9fae
0192de plp
0192df jsr $a226
0192e2 ldx #$0000		; clear X
0192e5 stx $1908
0192e8 stx $190a
0192eb ldx #$0008
0192ee stx $1900
0192f1 ldx #$00f8
0192f4 stx $1902
0192f7 jsl $0b82aa
0192fb jsr $a3ef
0192fe jsr $e76a
019301 jsr $ab5c
019304 jsr $ab5c
019307 jsr $ab5c
01930a jsr $e61c
01930d jsr $a08a
019310 jsr $94cc
019313 jsr $c8a8
019316 jsl $0c8000
01931a lda $0110
01931d bpl $9316
01931f lda $0111
019322 pha
019323 stz $0111
019326 stz $420c
019329 jsl $0b841d
01932d jsr $8435		; jump to "Copy $2000 bytes from WRAM $7fd274 to VRAM $0000 through DMA (channel 0)" routine
019330 jsr $845d
019333 jsr $8492
019336 jsr $84b8
019339 jsr $836c
01933c jsr $84e0
01933f jsr $fe6b
019342 jsr $8672
019345 pla
019346 sta $0111
019349 jsl $00bd2a
01934d jsr $912a
019350 inc $19f7
019353 jsr $82cf
019356 stz $19a5
019359 plb
01935a plp
01935b rtl				; exit routine



01935c jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
01935f lda $19cc
019362 cmp #$84
019364 beq $936a
019366 cmp #$85
019368 bne $9389
01936a jsr $94cc
01936d ldx $0e89
019370 phx
019371 ldx $19f1
019374 stx $0e89
019377 lda #$33
019379 jsr $baac
01937c jsr $c95e
01937f ldy #$0004
019382 jsr $f7c6
019385 plx
019386 stx $0e89
019389 jsr $9057
01938c jsr $907a
01938f jsr $f985
019392 lda #$02
019394 sta $1a46
019397 jsr $90bc
01939a lda #$0f
01939c sta $1926
01939f jsr $946b
0193a2 lda #$00
0193a4 xba
0193a5 lda $192a
0193a8 asl a
0193a9 tax
0193aa jsr ($93c0,x)
0193ad lda $1926
0193b0 sec
0193b1 sbc $1928
0193b4 sta $1926
0193b7 bpl $939f
0193b9 inc $19f8
0193bc jsr $8b82
0193bf rts				; exit routine



01946b lda $1929
01946e bpl $9479
019470 bit #$10
019472 bne $94c4
019474 ora #$10
019476 sta $1929
019479 lda #$00
01947b xba
01947c lda $0e8b
01947f asl a
019480 sta $192b
019483 lda $1929
019486 and #$0f
019488 cmp #$03
01948a bne $9493
01948c lda #$10
01948e sta $192b
019491 bra $94b0
019493 cmp #$04
019495 bne $94a2
0194a2 cmp #$05
0194a4 bne $94b0
0194a6 lda $192b
0194a9 lsr a
0194aa clc
0194ab adc #$0c
0194ad sta $192b
0194b0 lda $1929
0194b3 bmi $94c7
0194b5 lda $1926
0194b8 and #$08
0194ba lsr a
0194bb lsr a
0194bc lsr a
0194bd clc
0194be adc $192b
0194c1 jsr $8caf
0194c4 jmp $8c83
0194c7 lda $192b
0194ca bra $94c1
0194cc lda $1929
0194cf and #$0f
0194d1 cmp #$03
0194d3 bne $94d9
0194d9 lda $0e8b
0194dc asl a
0194dd jsr $8caf
0194e0 rts				; exit routine



0194ec php				; save processor status to stack
0194ed sep #$20			; set A => 8bit
0194ef rep #$10			; set X,Y => 16bit
0194f1 lda $19b0
0194f4 beq $9507
0194f6 jsr $9539
0194f9 lda $19ee
0194fc beq $9502
019502 stz $19b0
019505 plp
019506 rts				; exit routine



019539 sep #$20			; set A => 8bit
01953b rep #$10			; set X,Y => 16bit
01953d php				; save processor status to stack
01953e ldx $19f1
019541 stx $192d
019544 jsr $880b
019547 lda $7f8000,x
01954b inc
01954c sta $7f8000,x
019550 lda #$01
019552 sta $194b
019555 stz $1951
019558 lda $19c9
01955b sta $19ca
01955e lda #$00
019560 xba
019561 lda $19d5
019564 inc
019565 tax
019566 lda $7fd0f4,x
01956a sta $19c9
01956d php				; save processor status to stack
01956e rep #$30			; set A,X,Y => 16bit
019570 txa
019571 asl a
019572 asl a
019573 tax
019574 lda $7fcef4,x
019578 sta $19c5
01957b lda $7fcef6,x
01957f sta $19c7
019582 plp
019583 jsr $96d2
019586 jsr $9057
019589 lda #$00
01958b xba
01958c lda $0e8b
01958f asl a
019590 tax
019591 lda $19bd
019594 clc
019595 adc $0196ca,x
019599 and #$1f
01959b sta $19bd
01959e lda $19bf
0195a1 clc
0195a2 adc $0196cb,x
0195a6 and #$0f
0195a8 sta $19bf
0195ab jsr $88cc
0195ae lda #$00
0195b0 xba
0195b1 lda $0e8b
0195b4 asl a
0195b5 tax
0195b6 rep #$30			; set A,X,Y => 16bit
0195b8 lda $00f3f1,x
0195bc sta $194f
0195bf txa
0195c0 clc
0195c1 adc #$0008
0195c4 tax
0195c5 lda $00f5e7,x
0195c9 sta $194d
0195cc jsr $95d7
0195cf lda $19ca
0195d2 sta $19c9
0195d5 plp
0195d6 rts				; exit routine



0195d7 phb				; save databank to stack
0195d8 sep #$20			; set A => 8bit
0195da rep #$10			; set X,Y => 16bit
0195dc jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
0195df jsl $0b8000
0195e3 sep #$20			; set A => 8bit
0195e5 rep #$10			; set X,Y => 16bit
0195e7 lda #$14
0195e9 sta $1926
0195ec sep #$20			; set A => 8bit
0195ee rep #$10			; set X,Y => 16bit
0195f0 lda $1951
0195f3 beq $95fa
0195f5 dec $1951
0195f8 bra $9618
0195fa lda #$00
0195fc xba
0195fd ldx $194f
019600 lda $00f3f9,x
019604 bpl $9611
019606 and #$7f
019608 sta $1951
01960b inx
01960c stx $194f
01960f bra $9618
019611 inx
019612 stx $194f
019615 jsr $8caf
019618 jsr $9646
01961b jsr $82d8
01961e sep #$20			; set A => 8bit
019620 rep #$10			; set X,Y => 16bit
019622 lda $1926
019625 cmp #$0b
019627 bne $9639
019629 lda $194b
01962c beq $9639
01962e ldx $192b
019631 stx $195f
019634 lda #$22
019636 jsr $baac
019639 dec $1926
01963c bpl $95ec
01963e jsr $c44f
019641 jsr $8b82
019644 plb
019645 rts				; exit routine



019646 php				; save processor status to stack
019647 sep #$20			; set A => 8bit
019649 rep #$10			; set X,Y => 16bit
01964b ldx $194d
01964e lda $00f5f7,x
019652 inx
019653 cmp #$ff
019655 beq $967b
019657 cmp #$80
019659 beq $966e
01965b sta $1949
01965e lda #$0c
019660 sta $194a
019663 ldy $199d
019666 sty $192d
019669 jsr $9680
01966c bra $964e
01966e lda $00f5f7,x
019672 inx
019673 sta $1949
019676 jsr $9edc
019679 bra $964e
01967b stx $194d
01967e plp
01967f rts				; exit routine



019680 php				; save processor status to stack
019681 rep #$30			; set A,X,Y => 16bit
019683 lda $1949
019686 jsr $9f26
019689 lda $1949
01968c and #$00ff
01968f asl a
019690 asl a
019691 clc
019692 adc #$0c00
019695 tay
019696 sep #$20			; set A => 8bit
019698 rep #$10			; set X,Y => 16bit
01969a lda $00f5f7,x
01969e inx
01969f sta $0002,y
0196a2 lda $00f5f7,x
0196a6 inx
0196a7 ora $194a
0196aa ora $1a54
0196ad sta $0003,y
0196b0 lda $00f5f7,x
0196b4 inx
0196b5 clc
0196b6 adc $192d
0196b9 sta $0000,y
0196bc lda $00f5f7,x
0196c0 inx
0196c1 clc
0196c2 adc $192e
0196c5 sta $0001,y
0196c8 plp
0196c9 rts				; exit routine



0196d2 phb				; save databank to stack
0196d3 php				; save processor status to stack
0196d4 phd				; save direct page to stack
0196d5 pea $195f
0196d8 pld
0196d9 ldx #$0002
0196dc ldy #$0000
0196df sep #$20			; set A => 8bit
0196e1 rep #$10			; set X,Y => 16bit
0196e3 stz $00,x
0196e5 stz $01,x
0196e7 lda $19c5,y
0196ea sta $00,x
0196ec jsr $9037
0196ef asl a
0196f0 asl a
0196f1 ora $1a52
0196f4 sta $01,x
0196f6 lda $19c9
0196f9 bpl $9706
019706 lda #$01
019708 cpy #$0000
01970b beq $971a
01970d asl a
01970e cpy #$0001
019711 beq $971a
019713 asl a
019714 cpy #$0002
019717 beq $971a
019719 asl a
01971a sta $192b
01971d lda $19c9
019720 and $192b
019723 beq $972b
01972b iny
01972c cpy #$0004
01972f beq $9735
019731 inx
019732 inx
019733 bra $96df
019735 pld
019736 plp
019737 plb
019738 rts				; exit routine
019739 php
01973a phd
01973b ldx $195f
01973e cpx #$ffff
019741 beq $9775



019743 lda #$80
019745 sta $2115
019748 pea $195f
01974b pld
01974c rep #$30			; set A,X,Y => 16bit
01974e lda $00
019750 sta $2116
019753 lda $02
019755 sta $2118
019758 lda $04
01975a sta $2118
01975d lda $00
01975f clc
019760 adc #$0020
019763 sta $2116
019766 lda $06
019768 sta $2118
01976b lda $08
01976d sta $2118
019770 lda #$ffff
019773 sta $00
019775 pld
019776 plp
019777 rts
019778 jsr $9786
01977b lda $19b0
01977e bne $9781
019780 rts				; exit routine



019781 jsl $01b24b
019785 rts				; exit routine



019786 sep #$20			; set A => 8bit
019788 rep #$10			; set X,Y => 16bit
01978a phd				; save direct page to stack
01978b pea $192b
01978e pld
01978f lda #$02
019791 jsr $baac
019794 jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
019797 lda #$00
019799 xba
01979a lda $0e8b
01979d asl a
01979e tax
01979f rep #$30			; set A,X,Y => 16bit
0197a1 lda $00f3d9,x
0197a5 sta $24
0197a7 lda $00f53f,x
0197ab sta $22
0197ad stz $26
0197af sep #$20			; set A => 8bit
0197b1 rep #$10			; set X,Y => 16bit
0197b3 lda #$0f
0197b5 sta $1926
0197b8 sep #$20			; set A => 8bit
0197ba rep #$10			; set X,Y => 16bit
0197bc lda $26
0197be beq $97c4
0197c0 dec $26
0197c2 bra $97de
0197c4 lda #$00
0197c6 xba
0197c7 ldx $24
0197c9 lda $00f3e1,x
0197cd bpl $97d8
0197cf and #$7f
0197d1 sta $26
0197d3 inx
0197d4 stx $24
0197d6 bra $97de
0197d8 inx
0197d9 stx $24
0197db jsr $8caf
0197de jsr $97f9
0197e1 jsr $82d8
0197e4 sep #$20			; set A => 8bit
0197e6 rep #$10			; set X,Y => 16bit
0197e8 lda $1926
0197eb dec
0197ec sta $1926
0197ef bpl $97b8
0197f1 jsr $c44f
0197f4 jsr $8b82
0197f7 pld
0197f8 rts				; exit routine



0197f9 php				; save processor status to stack
0197fa sep #$20			; set A => 8bit
0197fc rep #$10			; set X,Y => 16bit
0197fe ldx $22
019800 lda $00f547,x
019804 inx
019805 cmp #$ff
019807 beq $9824
019809 cmp #$80
01980b beq $9818
01980d sta $1e
01980f lda #$0c
019811 sta $1f
019813 jsr $9828
019816 bra $9800
019818 lda $00f547,x
01981c inx
01981d sta $1e
01981f jsr $9edc
019822 bra $9800
019824 stx $22
019826 plp
019827 rts				; exit routine



019828 php				; save processor status to stack
019829 rep #$30			; set A,X,Y => 16bit
01982b lda $1e
01982d jsr $9f26
019830 lda $1e
019832 and #$00ff
019835 asl a
019836 asl a
019837 clc
019838 adc #$0c00
01983b tay
01983c sep #$20			; set A => 8bit
01983e rep #$10			; set X,Y => 16bit
019840 lda $00f547,x
019844 inx
019845 sta $0002,y
019848 lda $00f547,x
01984c inx
01984d ora $194a
019850 ora $1a54
019853 sta $0003,y
019856 lda $00f547,x
01985a inx
01985b clc
01985c adc $199d
01985f sta $0000,y
019862 lda $00f547,x
019866 inx
019867 clc
019868 adc $199e
01986b sta $0001,y
01986e plp
01986f rts				; exit routine



019870 jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
019873 ldx $1926
019876 stx $1935
019879 lda $0e8b
01987c sta $1939
01987f jsr $98b2
019882 lda $1939
019885 clc
019886 adc #$0c
019888 jsr $8caf
01988b ldx $199d
01988e stx $1937
019891 jsr $998b
019894 jsr $9b2d
019897 jsr ($98a6,x)
01989a lda #$f2
01989c sta $050a
01989f jsr $c44f
0198a2 jsr $8b82
0198a5 rts				; exit routine



0198b2 xba
0198b3 lda #$00
0198b5 xba
0198b6 asl a
0198b7 tax
0198b8 ldy #$0050
0198bb jsr ($98aa,x)
0198be rts				; exit routine



0198bf lda #$70
0198c1 xba
0198c2 lda #$8c
0198c4 ora $1a54
0198c7 jsr $996b
0198ca sta $0c02,y
0198cd sta $0c06,y
0198d0 inc
0198d1 sta $0c0a,y
0198d4 sta $0c0e,y
0198d7 lda #$0c
0198d9 ora $1a54
0198dc xba
0198dd lda #$78
0198df bra $9945
0198e1 lda #$74
0198e3 xba
0198e4 lda #$4c
0198e6 ora $1a54
0198e9 jsr $997b
0198ec sta $0c06,y
0198ef sta $0c0e,y
0198f2 inc
0198f3 sta $0c02,y
0198f6 sta $0c0a,y
0198f9 lda #$4c
0198fb ora $1a54
0198fe xba
0198ff lda #$79
019901 bra $9945
019903 lda #$70
019905 xba
019906 lda #$0c
019908 ora $1a54
01990b jsr $996b
01990e sta $0c0a,y
019911 sta $0c0e,y
019914 inc
019915 sta $0c02,y
019918 sta $0c06,y
01991b lda #$8c
01991d ora $1a54
019920 xba
019921 lda #$78
019923 bra $9945
019925 lda #$74
019927 xba
019928 lda #$0c
01992a ora $1a54
01992d jsr $997b
019930 sta $0c02,y
019933 sta $0c0a,y
019936 inc
019937 sta $0c06,y
01993a sta $0c0e,y
01993d lda #$0c
01993f ora $1a54
019942 xba
019943 lda #$79
019945 php				; save processor status to stack
019946 rep #$30			; set A,X,Y => 16bit
019948 ldx #$0060
01994b sta $0c02,x
01994e sta $0c06,x
019951 sta $0c0a,x
019954 sta $0c0e,x
019957 sta $0c12,x
01995a sta $0c16,x
01995d sta $0c1a,x
019960 sta $0c1e,x
019963 sta $0c72,x
019966 sta $0c76,x
019969 plp
01996a rts				; exit routine



01996b sta $0c03,y
01996e sta $0c0b,y
019971 ora #$40
019973 sta $0c07,y
019976 sta $0c0f,y
019979 xba
01997a rts				; exit routine



01997b sta $0c03,y
01997e sta $0c07,y
019981 ora #$80
019983 sta $0c0b,y
019986 sta $0c0f,y
019989 xba
01998a rts				; exit routine



01998b jsr $9c96
01998e lda $1935
019991 bne $9996
019993 jmp $9a0c
019996 lda $1935
019999 asl a
01999a asl a
01999b sta $193f
01999e stz $1940
0199a1 lda #$00
0199a3 xba
0199a4 lda $1939
0199a7 asl a
0199a8 tax
0199a9 lda $9a04,x
0199ac sta $1941
0199af lda $9a05,x
0199b2 sta $1942
0199b5 ldx $1937
0199b8 stx $1943
0199bb stz $0e05
0199be lda $1943
0199c1 clc
0199c2 adc $1941
0199c5 sta $1943
0199c8 lda $1944
0199cb clc
0199cc adc $1942
0199cf sta $1944
0199d2 php				; save processor status to stack
0199d3 rep #$30			; set A,X,Y => 16bit
0199d5 lda $1943
0199d8 sta $0c50
0199db pha
0199dc clc
0199dd adc #$0008
0199e0 sta $0c54
0199e3 pla
0199e4 clc
0199e5 adc #$0800
0199e8 sta $0c58
0199eb clc
0199ec adc #$0008
0199ef sta $0c5c
0199f2 plp
0199f3 inc $1940
0199f6 jsr $9a7c
0199f9 dec $193f
0199fc beq $9a03
0199fe jsr $82d8
019a01 bra $99be
019a03 rts				; exit routine



019a0c jsr $82d8
019a0f rts				; exit routine



019a7c lda #$00
019a7e xba
019a7f lda $1940
019a82 cmp #$05
019a84 bcc $9acd
019a86 sec
019a87 sbc #$05
019a89 lsr a
019a8a sta $1945
019a8d lda $1939
019a90 asl a
019a91 tax
019a92 lda $9ace,x
019a95 clc
019a96 adc $1943
019a99 sta $1946
019a9c lda $9acf,x
019a9f clc
019aa0 adc $1944
019aa3 sta $1947
019aa6 lda #$00
019aa8 xba
019aa9 lda $1945
019aac tay
019aad lda $9ad6,y
019ab0 tax
019ab1 lda $1946
019ab4 sta $0c00,x
019ab7 lda $1947
019aba sta $0c01,x
019abd lda #$02
019abf xba
019ac0 lda $9ae4,y
019ac3 tax
019ac4 lda $9af2,y
019ac7 and $0c00,x
019aca sta $0c00,x
019acd rts				; exit routine



019b00 lda #$00
019b02 xba
019b03 lda $1940
019b06 cmp #$05
019b08 bcc $9b2c
019b0a sec
019b0b sbc #$05
019b0d lsr a
019b0e sta $1945
019b11 lda #$00
019b13 xba
019b14 lda $1945
019b17 tay
019b18 lda #$02
019b1a xba
019b1b lda $9ae4,y
019b1e tax
019b1f lda $9af2,y
019b22 eor #$ff
019b24 and #$55
019b26 ora $0c00,x
019b29 sta $0c00,x
019b2c rts				; exit routine



019b2d jsr $9b97
019b30 lda $1936
019b33 beq $9b58
019b35 lda $1935
019b38 cmp #$06
019b3a bne $9b48
019b48 jsr $9b65
019b4b jsr $e4fe
019b4e jsr $9b7e
019b51 jsr $82d8
019b54 ldx #$0000		; clear X
019b57 rts				; exit routine



019b58 jsr $9b65
019b5b jsr $82d8
019b5e jsr $82d8
019b61 ldx #$0002
019b64 rts				; exit routine



019b65 inc $0c52
019b68 inc $0c52
019b6b inc $0c56
019b6e inc $0c56
019b71 inc $0c5a
019b74 inc $0c5a
019b77 inc $0c5e
019b7a inc $0c5e
019b7d rts				; exit routine



019b7e dec $0c52
019b81 dec $0c52
019b84 dec $0c56
019b87 dec $0c56
019b8a dec $0c5a
019b8d dec $0c5a
019b90 dec $0c5e
019b93 dec $0c5e
019b96 rts				; exit routine



019b97 lda $194c
019b9a and #$0f
019b9c sta $0507
019b9f lda #$0f
019ba1 sta $0506
019ba4 lda $1936
019ba7 beq $9bb8
019ba9 lda $1935
019bac cmp #$06
019bae bne $9bb4
019bb4 lda #$2f
019bb6 bra $9bba
019bb8 lda #$05
019bba sta $0505
019bbd rts				; exit routine



019bc5 ldx #$0002
019bc8 stx $1933
019bcb lda #$04
019bcd sta $1928
019bd0 lda $1939
019bd3 sta $19d7
019bd6 lda #$85
019bd8 sta $1929
019bdb lda #$00
019bdd xba
019bde lda $1935
019be1 tax
019be2 lda $9bbe,x
019be5 beq $9c5d
019be7 sta $193f
019bea stz $1926
019bed jmp $9c05
019bf0 ldx #$0000		; clear X
019bf3 stx $1933
019bf6 lda #$ff
019bf8 sta $1926
019bfb lda $1935
019bfe beq $9c5d
019c05 jsr $9ccc
019c08 inc $1940
019c0b ldx $1933
019c0e jsr ($9c63,x)
019c11 lda $1926
019c14 beq $9c54
019c16 lda $1943
019c19 sec
019c1a sbc $1941
019c1d sta $1943
019c20 lda $1944
019c23 sec
019c24 sbc $1942
019c27 sta $1944
019c2a php				; save processor status to stack
019c2b rep #$30			; set A,X,Y => 16bit
019c2d lda $1943
019c30 sta $0c50
019c33 pha
019c34 clc
019c35 adc #$0008
019c38 sta $0c54
019c3b pla
019c3c clc
019c3d adc #$0800
019c40 sta $0c58
019c43 clc
019c44 adc #$0008
019c47 sta $0c5c
019c4a plp
019c4b dec $1940
019c4e jsr $9b00
019c51 jsr $82d8
019c54 sep #$20			; set A => 8bit
019c56 rep #$10			; set X,Y => 16bit
019c58 dec $193f
019c5b bpl $9c0b
019c5d lda #$55
019c5f sta $0e05
019c62 rts				; exit routine



019c67 lda $1926
019c6a bne $9c86
019c6c jsr $9057
019c6f jsr $907a
019c72 jsr $f985
019c75 lda #$02
019c77 sta $1a46
019c7a jsr $90bc
019c7d lda #$0f
019c7f sta $1926
019c82 jsr $946b
019c85 rts				; exit routine



019c86 lda $1926
019c89 sec
019c8a sbc $1928
019c8d sta $1926
019c90 bpl $9c82
019c92 stz $1926
019c95 rts				; exit routine



019c96 lda $1939
019c99 cmp #$01
019c9b beq $9cc4
019c9d cmp #$03
019c9f beq $9cc8
019ca1 lda #$88
019ca3 sta $0507
019ca6 sta $194b
019ca9 lda $1935
019cac inc
019cad inc
019cae inc
019caf asl a
019cb0 asl a
019cb1 asl a
019cb2 asl a
019cb3 ora #$0f
019cb5 sta $0506
019cb8 sta $194a
019cbb lda #$04
019cbd sta $0505
019cc0 sta $1949
019cc3 rts				; exit routine



019cc4 lda #$8d
019cc6 bra $9ca3
019cc8 lda #$83
019cca bra $9ca3
019ccc lda $194b
019ccf lsr a
019cd0 lsr a
019cd1 lsr a
019cd2 lsr a
019cd3 and #$0f
019cd5 sta $194c
019cd8 lda $194b
019cdb asl a
019cdc asl a
019cdd asl a
019cde asl a
019cdf ora $194c
019ce2 sta $0507
019ce5 lda $194a
019ce8 sta $0506
019ceb lda $1949
019cee sta $0505
019cf1 rts				; exit routine



019cf2 sep #$20			; set A => 8bit
019cf4 rep #$10			; set X,Y => 16bit
019cf6 phb				; save databank to stack
019cf7 jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
019cfa lda #$29
019cfc jsr $baac
019cff ldx $0e89
019d02 stx $193f
019d05 lda $1926
019d08 sta $1947
019d0b sta $1948
019d0e lda $1927
019d11 bne $9d1e
019d13 sta $194c
019d16 xba
019d17 lda $19d7
019d1a asl a
019d1b tax
019d1c bra $9d2e
019d1e lda #$ff
019d20 sta $194c
019d23 lda #$00
019d25 xba
019d26 lda $19d7
019d29 clc
019d2a adc #$04
019d2c asl a
019d2d tax
019d2e rep #$30			; set A,X,Y => 16bit
019d30 lda $00f415,x
019d34 sta $194d
019d37 sep #$20			; set A => 8bit
019d39 rep #$10			; set X,Y => 16bit
019d3b ldx $19cb
019d3e stx $19cd
019d41 lda $19cb
019d44 and #$30
019d46 beq $9d54
019d54 ldx $193f
019d57 stx $0e89
019d5a rep #$30			; set A,X,Y => 16bit
019d5c lda $19d7
019d5f and #$0003
019d62 asl a
019d63 tax
019d64 lda $00f251,x
019d68 sta $194f
019d6b ldx #$0000		; clear X
019d6e stx $1951
019d71 sep #$20			; set A => 8bit
019d73 rep #$10			; set X,Y => 16bit
019d75 ldy #$0002
019d78 sty $1991
019d7b ldx $0e89
019d7e stx $193f
019d81 lda $1947
019d84 bne $9d91
019d86 ldx $193f
019d89 stx $19f1
019d8c stx $19f3
019d8f bra $9dbf
019d91 cmp #$02
019d93 beq $9d9b
019d95 ldx $19f1
019d98 stx $19f3
019d9b sep #$20			; set A => 8bit
019d9d rep #$10			; set X,Y => 16bit
019d9f ldx $193f
019da2 stx $0e89
019da5 jsr $9057
019da8 jsr $907a
019dab jsr $f985
019dae ldx $0e89
019db1 stx $193f
019db4 ldx $19f3
019db7 stx $0e89
019dba lda #$02
019dbc sta $1a46
019dbf lda #$0f
019dc1 sta $1926
019dc4 sep #$20			; set A => 8bit
019dc6 rep #$10			; set X,Y => 16bit
019dc8 lda #$00
019dca xba
019dcb ldx $194f
019dce lda $00f25a,x
019dd2 sta $199a
019dd5 lda $00f25b,x
019dd9 sta $1999
019ddc lda $00f259,x
019de0 inx
019de1 inx
019de2 inx
019de3 stx $194f
019de6 jsr $8caf
019de9 lda $1947
019dec beq $9df1
019dee jsr $8c83
019df1 sep #$20			; set A => 8bit
019df3 rep #$10			; set X,Y => 16bit
019df5 lda $194c
019df8 bmi $9dfd
019dfa jsr $9e93
019dfd lda #$00
019dff xba
019e00 lda $192a
019e03 asl a
019e04 tax
019e05 jsr ($93c0,x)
019e08 sep #$20			; set A => 8bit
019e0a rep #$10			; set X,Y => 16bit
019e0c lda $1926
019e0f dec
019e10 sta $1926
019e13 bpl $9dc4
019e15 lda $1947
019e18 beq $9e2a
019e1a dec
019e1b sta $1947
019e1e ldx $19f1
019e21 stx $193f
019e24 ldx $19f3
019e27 stx $0e89
019e2a ldy $1991
019e2d dey
019e2e sty $1991
019e31 beq $9e36
019e33 jmp $9d9b
019e36 rep #$30			; set A,X,Y => 16bit
019e38 lda #$0000
019e3b ldx #$0050
019e3e sta $0c00,x
019e41 sta $0c02,x
019e44 sta $0c04,x
019e47 sta $0c06,x
019e4a ldx #$00d0
019e4d sta $0c00,x
019e50 sta $0c02,x
019e53 sta $0c04,x
019e56 sta $0c06,x
019e59 sep #$20			; set A => 8bit
019e5b rep #$10			; set X,Y => 16bit
019e5d lda $1948
019e60 beq $9e73
019e62 cmp #$02
019e64 beq $9e6b
019e66 ldx $19cf
019e69 bra $9e6e
019e6b ldx $19d1
019e6e stx $19cb
019e71 bra $9e7f
019e73 ldx $19cd
019e76 stx $19cb
019e79 ldx $193f
019e7c stx $0e89
019e7f jsr $c44f
019e82 sep #$20			; set A => 8bit
019e84 rep #$10			; set X,Y => 16bit
019e86 lda $19cb
019e89 and #$07
019e8b jsr $885f
019e8e jsr $8b82
019e91 plb
019e92 rts				; exit routine



019e93 php				; save processor status to stack
019e94 sep #$20			; set A => 8bit
019e96 rep #$10			; set X,Y => 16bit
019e98 ldx $194d
019e9b lda $00f425,x
019e9f inx
019ea0 cmp #$ff
019ea2 beq $9ed7
019ea4 cmp #$80
019ea6 beq $9ec1
019ea8 sta $1949
019eab lda $1994
019eae lsr a
019eaf lsr a
019eb0 clc
019eb1 adc $1949
019eb4 sta $1949
019eb7 lda #$0c
019eb9 sta $194a
019ebc jsr $9f62
019ebf bra $9e9b
019ec1 lda $00f425,x
019ec5 inx
019ec6 sta $1949
019ec9 lda $1994
019ecc lsr a
019ecd lsr a
019ece clc
019ecf adc $1949
019ed2 jsr $9edc
019ed5 bra $9e9b
019ed7 stx $194d
019eda plp
019edb rts				; exit routine



019edc phx
019edd phy
019ede php				; save processor status to stack
019edf rep #$30			; set A,X,Y => 16bit
019ee1 and #$00ff
019ee4 pha
019ee5 pha
019ee6 and #$0003
019ee9 tay
019eea pla
019eeb lsr a
019eec lsr a
019eed clc
019eee adc #$0200
019ef1 tax
019ef2 sep #$20			; set A => 8bit
019ef4 rep #$10			; set X,Y => 16bit
019ef6 lda #$01
019ef8 cpy #$0000
019efb beq $9f0d
019efd asl a
019efe asl a
019eff cpy #$0001
019f02 beq $9f0d
019f04 asl a
019f05 asl a
019f06 cpy #$0002
019f09 beq $9f0d
019f0b asl a
019f0c asl a
019f0d ora $0c00,x
019f10 sta $0c00,x
019f13 rep #$30			; set A,X,Y => 16bit
019f15 pla
019f16 asl a
019f17 asl a
019f18 tax
019f19 lda #$0000
019f1c sta $0c00,x
019f1f sta $0c02,x
019f22 plp
019f23 ply
019f24 plx
019f25 rts				; exit routine



019f26 phx
019f27 phy
019f28 php				; save processor status to stack
019f29 rep #$30			; set A,X,Y => 16bit
019f2b and #$00ff
019f2e pha
019f2f and #$0003
019f32 tay
019f33 pla
019f34 lsr a
019f35 lsr a
019f36 clc
019f37 adc #$0200
019f3a tax
019f3b sep #$20			; set A => 8bit
019f3d rep #$10			; set X,Y => 16bit
019f3f lda #$01
019f41 cpy #$0000
019f44 beq $9f56
019f46 asl a
019f47 asl a
019f48 cpy #$0001
019f4b beq $9f56
019f4d asl a
019f4e asl a
019f4f cpy #$0002
019f52 beq $9f56
019f54 asl a
019f55 asl a
019f56 eor #$ff
019f58 and $0c00,x
019f5b sta $0c00,x
019f5e plp
019f5f ply
019f60 plx
019f61 rts				; exit routine



019f62 php				; save processor status to stack
019f63 rep #$30			; set A,X,Y => 16bit
019f65 lda $1949
019f68 jsr $9f26
019f6b lda $1949
019f6e and #$00ff
019f71 asl a
019f72 asl a
019f73 clc
019f74 adc #$0c00
019f77 tay
019f78 sep #$20			; set A => 8bit
019f7a rep #$10			; set X,Y => 16bit
019f7c lda $00f425,x
019f80 inx
019f81 sta $0002,y
019f84 lda $00f425,x
019f88 inx
019f89 ora $194a
019f8c ora $1a54
019f8f sta $0003,y
019f92 lda $00f425,x
019f96 inx
019f97 clc
019f98 adc $00199d
019f9c sta $0000,y
019f9f lda $00f425,x
019fa3 inx
019fa4 clc
019fa5 adc $00199e
019fa9 sta $0001,y
019fac plp
019fad rts				; exit routine



019fae phd				; save direct page to stack
019faf sep #$20			; set A => 8bit
019fb1 rep #$10			; set X,Y => 16bit
019fb3 pea $1973
019fb6 pld
019fb7 lda #$ff
019fb9 sta $19ab
019fbc lda $1913
019fbf and #$f0
019fc1 lsr a
019fc2 lsr a
019fc3 lsr a
019fc4 lsr a
019fc5 sta $00
019fc7 bne $9fcc
019fc9 jmp $a059
019fcc stz $19ab
019fcf rep #$30			; set A,X,Y => 16bit
019fd1 and #$003f
019fd4 asl a
019fd5 tax
019fd6 lda $0cd4e4,x
019fda sta $19d8
019fdd sta $02
019fdf lda #$cdc8
019fe2 sta $00
019fe4 ldy #$0002
019fe7 sep #$20			; set A => 8bit
019fe9 rep #$10			; set X,Y => 16bit
019feb lda #$00
019fed xba
019fee ldx $02
019ff0 lda $0cd500,x
019ff4 inx
019ff5 stx $02
019ff7 cmp #$ff
019ff9 beq $a01d
019ffb rep #$30			; set A,X,Y => 16bit
019ffd asl a
019ffe asl a
019fff asl a
01a000 asl a
01a001 asl a
01a002 clc
01a003 adc #$d274
01a006 tax
01a007 phy
01a008 phb				; save databank to stack
01a009 ldy $00
01a00b lda #$007f
01a00e mvn $7f,$7f
01a011 plb
01a012 ply
01a013 dey
01a014 beq $a01d
01a016 lda #$ce48
01a019 sta $00
01a01b bra $9fe7
01a01d sep #$20			; set A => 8bit
01a01f rep #$10			; set X,Y => 16bit
01a021 ldx #$ffff
01a024 stx $19da
01a027 stx $19dc
01a02a ldx $19d8
01a02d lda #$00
01a02f xba
01a030 lda $0cd500,x
01a034 cmp #$ff
01a036 beq $a059
01a038 rep #$30			; set A,X,Y => 16bit
01a03a asl a
01a03b asl a
01a03c asl a
01a03d asl a
01a03e sta $19da
01a041 sep #$20			; set A => 8bit
01a043 rep #$10			; set X,Y => 16bit
01a045 lda #$00
01a047 xba
01a048 lda $0cd501,x
01a04c cmp #$ff
01a04e beq $a059
01a050 rep #$30			; set A,X,Y => 16bit
01a052 asl a
01a053 asl a
01a054 asl a
01a055 asl a
01a056 sta $19dc
01a059 rep #$30			; set A,X,Y => 16bit
01a05b lda #$0000
01a05e sta $7fcec8
01a062 sta $7fceca
01a066 sta $7fcecc
01a06a sta $7fcece
01a06e sta $7fced0
01a072 sta $7fced2
01a076 sta $7fced4
01a07a sta $7fced6
01a07e pld
01a07f rts				; exit routine



01a080 lda $19a5
01a083 bmi $a089
01a085 cmp #$02
01a087 bcc $a08a
01a089 rts				; exit routine



01a08a lda $0e91
01a08d bne $a092
01a08f jmp $e633
01a092 cmp #$01
01a094 bne $a099
01a099 phd				; save direct page to stack
01a09a pea $1a62
01a09d pld
01a09e ldx $1908
01a0a1 stx $00
01a0a3 ldx $190a
01a0a6 stx $02
01a0a8 ldx #$0000		; clear X
01a0ab stx $04
01a0ad stx $06
01a0af stx $08
01a0b1 ldy $a639
01a0b4 jsr $a0d6
01a0b7 rep #$20			; set A => 16bit
01a0b9 lda $04
01a0bb clc
01a0bc adc #$0004
01a0bf sta $04
01a0c1 lda $06
01a0c3 clc
01a0c4 adc #$001a
01a0c7 sta $06
01a0c9 tax
01a0ca sep #$20			; set A => 8bit
01a0cc inc $08
01a0ce lda $08
01a0d0 cmp #$16
01a0d2 bne $a0b4
01a0d4 pld
01a0d5 rts				; exit routine



01a0d6 lda $10,x
01a0d8 cmp #$ff
01a0da beq $a0d5
01a0dc cmp #$04
01a0de beq $a0d5
01a0e0 rep #$20			; set A => 16bit
01a0e2 lda $23,x
01a0e4 sec
01a0e5 sbc $00
01a0e7 and #$03ff
01a0ea sta $23,x
01a0ec lda $25,x
01a0ee sec
01a0ef sbc $02
01a0f1 and #$03ff
01a0f4 sta $25,x
01a0f6 sep #$20			; set A => 8bit
01a0f8 lda $1e,x
01a0fa eor $19b4
01a0fd bit #$08
01a0ff beq $a104
01a101 jmp $a185
01a104 lda #$00
01a106 xba
01a107 lda $19,x
01a109 bpl $a10e
01a10e rep #$20			; set A => 16bit
01a110 clc
01a111 adc $23,x
01a113 sta $0a
01a115 lda #$0000
01a118 sep #$20			; set A => 8bit
01a11a lda $1a,x
01a11c bpl $a121
01a121 rep #$20			; set A => 16bit
01a123 clc
01a124 adc $25,x
01a126 sta $0c
01a128 rep #$20			; set A => 16bit
01a12a ldx $04
01a12c ldy $a63b,x
01a12f lda $a639,x
01a132 tax
01a133 lda $0c
01a135 cmp #$00e8
01a138 bcc $a13f
01a13a cmp #$03f8
01a13d bcc $a190
01a13f lda $0a
01a141 cmp #$00f8
01a144 bcc $a15d
01a146 cmp #$0100
01a149 bcc $a1a7
01a14b cmp #$03f0
01a14e bcc $a190
01a150 cmp #$03f8
01a153 bcc $a1d2
01a155 cmp #$0400
01a158 bcs $a15d
01a15a jmp $a1fe
01a15d sep #$20			; set A => 8bit
01a15f sta $0c00,x
01a162 sta $0c08,x
01a165 clc
01a166 adc #$08
01a168 sta $0c04,x
01a16b sta $0c0c,x
01a16e lda $0c
01a170 sta $0c01,x
01a173 sta $0c05,x
01a176 clc
01a177 adc #$08
01a179 sta $0c09,x
01a17c sta $0c0d,x
01a17f lda #$00
01a181 sta $0c00,y
01a184 rts				; exit routine



01a185 rep #$20			; set A => 16bit
01a187 ldx $04
01a189 ldy $a63b,x
01a18c lda $a639,x
01a18f tax
01a190 lda #$e080
01a193 sta $0c00,x
01a196 sta $0c04,x
01a199 sta $0c08,x
01a19c sta $0c0c,x
01a19f sep #$20			; set A => 8bit
01a1a1 lda #$55
01a1a3 sta $0c00,y
01a1a6 rts				; exit routine



01a1a7 sep #$20			; set A => 8bit
01a1a9 sta $0c00,x
01a1ac sta $0c08,x
01a1af lda #$80
01a1b1 sta $0c04,x
01a1b4 sta $0c0c,x
01a1b7 lda $0c
01a1b9 sta $0c01,x
01a1bc clc
01a1bd adc #$08
01a1bf sta $0c09,x
01a1c2 lda #$e0
01a1c4 sta $0c05,x
01a1c7 sta $0c0d,x
01a1ca sep #$20			; set A => 8bit
01a1cc lda #$44
01a1ce sta $0c00,y
01a1d1 rts				; exit routine



01a1d2 sep #$20			; set A => 8bit
01a1d4 clc
01a1d5 adc #$08
01a1d7 sta $0c04,x
01a1da sta $0c0c,x
01a1dd lda #$80
01a1df sta $0c00,x
01a1e2 sta $0c08,x
01a1e5 lda $0c
01a1e7 sta $0c05,x
01a1ea clc
01a1eb adc #$08
01a1ed sta $0c0d,x
01a1f0 lda #$e0
01a1f2 sta $0c01,x
01a1f5 sta $0c09,x
01a1f8 lda #$55
01a1fa sta $0c00,y
01a1fd rts				; exit routine



01a1fe sep #$20			; set A => 8bit
01a200 sta $0c00,x
01a203 sta $0c08,x
01a206 clc
01a207 adc #$08
01a209 sta $0c04,x
01a20c sta $0c0c,x
01a20f lda $0c
01a211 sta $0c01,x
01a214 sta $0c05,x
01a217 clc
01a218 adc #$08
01a21a sta $0c09,x
01a21d sta $0c0d,x
01a220 lda #$11
01a222 sta $0c00,y
01a225 rts				; exit routine



01a226 php				; save processor status to stack
01a227 sep #$20			; set A => 8bit
01a229 rep #$10			; set X,Y => 16bit
01a22b ldx #$ffff
01a22e stx $19de
01a231 stx $19e0
01a234 lda $1914
01a237 bit #$20
01a239 beq $a266
01a23b lda #$00
01a23d xba
01a23e lda $1913
01a241 and #$0f
01a243 asl a
01a244 tax
01a245 lda $0cd666,x
01a249 phx
01a24a asl a
01a24b tax
01a24c rep #$30			; set A,X,Y => 16bit
01a24e lda $0cd686,x
01a252 sta $19de
01a255 plx
01a256 lda $0cd667,x
01a25a and #$000f
01a25d asl a
01a25e tax
01a25f lda $0cd727,x
01a263 sta $19e0
01a266 rep #$30			; set A,X,Y => 16bit
01a268 lda #$0000
01a26b sta $7fced8
01a26f sta $7fceda
01a273 sta $7fcedc
01a277 sta $7fcede
01a27b sta $7fcee0
01a27f sta $7fcee2
01a283 sta $7fcee4
01a287 sta $7fcee6
01a28b sta $7fcee8
01a28f sta $7fceea
01a293 sta $7fceec
01a297 sta $7fceee
01a29b sta $7fcef0
01a29f sta $7fcef2
01a2a3 plp
01a2a4 rts				; exit routine
01a2a5 phb
01a2a6 php
01a2a7 phd
01a2a8 sep #$20
01a2aa rep #$10
01a2ac lda $19df
01a2af cmp #$ff
01a2b1 beq $a2c8



01a2b3 pea $1cd7
01a2b6 pld
01a2b7 ldy #$0007
01a2ba sty $06
01a2bc ldx #$0000		; clear X
01a2bf stx $00
01a2c1 ldx $19de
01a2c4 stx $02
01a2c6 bpl $a2cc
01a2c8 pld
01a2c9 plp
01a2ca plb
01a2cb rts
01a2cc sep #$20			; set A => 8bit
01a2ce rep #$10			; set X,Y => 16bit
01a2d0 ldx $02
01a2d2 lda $0cd694,x
01a2d6 cmp #$ff
01a2d8 beq $a32d
01a2da sta $04
01a2dc ldx $00
01a2de lda $7fced8,x
01a2e2 cmp $04
01a2e4 bcc $a32d
01a2e6 lda #$00
01a2e8 sta $7fced8,x
01a2ec xba
01a2ed lda $7fced9,x
01a2f1 rep #$30			; set A,X,Y => 16bit
01a2f3 clc
01a2f4 adc $02
01a2f6 inc
01a2f7 inc
01a2f8 tax
01a2f9 lda $0cd694,x
01a2fd and #$00ff
01a300 asl a
01a301 tax
01a302 lda $058a80,x
01a306 ldx $00
01a308 sta $7fc5fa,x
01a30c sep #$20			; set A => 8bit
01a30e rep #$10			; set X,Y => 16bit
01a310 ldx $00
01a312 lda $7fced9,x
01a316 inc
01a317 sta $04
01a319 phx
01a31a ldx $02
01a31c lda $0cd695,x
01a320 cmp $04
01a322 bcs $a326
01a324 stz $04
01a326 plx
01a327 lda $04
01a329 sta $7fced9,x
01a32d dec $06
01a32f bne $a334
01a331 jmp $a2c8
01a334 ldx $00
01a336 inx
01a337 inx
01a338 stx $00
01a33a ldx $02
01a33c lda $0cd694,x
01a340 inx
01a341 cmp #$ff
01a343 bne $a33c
01a345 stx $02
01a347 jmp $a2cc
01a34a phb
01a34b php
01a34c phd
01a34d sep #$20
01a34f rep #$10
01a351 lda $19e1
01a354 cmp #$ff
01a356 beq $a36d
01a358 pea $1cd7
01a35b pld
01a35c ldy #$0007
01a35f sty $06
01a361 ldx #$0000		; clear X
01a364 stx $00
01a366 ldx $19e0
01a369 stx $02
01a36b bpl $a371
01a36d pld
01a36e plp
01a36f plb
01a370 rts
01a371 sep #$20			; set A => 8bit
01a373 rep #$10			; set X,Y => 16bit
01a375 ldx $02
01a377 lda $0cd72f,x
01a37b cmp #$ff
01a37d beq $a3d2
01a37f sta $04
01a381 ldx $00
01a383 lda $7fcee6,x
01a387 cmp $04
01a389 bcc $a3d2
01a38b lda #$00
01a38d sta $7fcee6,x
01a391 xba
01a392 lda $7fcee7,x
01a396 rep #$30			; set A,X,Y => 16bit
01a398 clc
01a399 adc $02
01a39b inc
01a39c inc
01a39d tax
01a39e lda $0cd72f,x
01a3a2 and #$00ff
01a3a5 asl a
01a3a6 tax
01a3a7 lda $058a80,x
01a3ab ldx $00
01a3ad sta $7fc52a,x
01a3b1 sep #$20			; set A => 8bit
01a3b3 rep #$10			; set X,Y => 16bit
01a3b5 ldx $00
01a3b7 lda $7fcee7,x
01a3bb inc
01a3bc sta $04
01a3be phx
01a3bf ldx $02
01a3c1 lda $0cd730,x
01a3c5 cmp $04
01a3c7 bcs $a3cb
01a3c9 stz $04
01a3cb plx
01a3cc lda $04
01a3ce sta $7fcee7,x
01a3d2 dec $06
01a3d4 bne $a3d9
01a3d6 jmp $a36d
01a3d9 ldx $00
01a3db inx
01a3dc inx
01a3dd stx $00
01a3df ldx $02
01a3e1 lda $0cd72f,x
01a3e5 inx
01a3e6 cmp #$ff
01a3e8 bne $a3e1
01a3ea stx $02
01a3ec jmp $a371
01a3ef php				; save processor status to stack
01a3f0 phb				; save databank to stack
01a3f1 rep #$30			; set A,X,Y => 16bit
01a3f3 lda $19b9
01a3f6 bmi $a400
01a3f8 sep #$20			; set A => 8bit
01a3fa jsr $a422
01a3fd jsr $a9ed
01a400 plb
01a401 plp
01a402 rts				; exit routine



01a403 php				; save processor status to stack
01a404 phb				; save databank to stack
01a405 rep #$30			; set A,X,Y => 16bit
01a407 lda $19b9
01a40a bmi $a41f
01a40c sep #$20			; set A => 8bit
01a40e jsr $a422
01a411 jsr $a691
01a414 jsr $a946
01a417 jsr $a9ed
01a41a sep #$20			; set A => 8bit
01a41c stz $1a71
01a41f plb
01a420 plp
01a421 rts				; exit routine



01a422 rep #$30			; set A,X,Y => 16bit
01a424 phd				; save direct page to stack
01a425 pea $192b
01a428 pld
01a429 phb				; save databank to stack
01a42a lda #$0000
01a42d sta $7f0000
01a431 ldx #$0000		; clear X
01a434 ldy #$0001
01a437 lda #$3dff
01a43a mvn $7f,$7f
01a43d plb
01a43e sep #$20			; set A => 8bit
01a440 rep #$10			; set X,Y => 16bit
01a442 lda #$06
01a444 sta $0a
01a446 stz $0c
01a448 lda #$0c
01a44a sta $0b
01a44c ldx #$c488
01a44f stx $00
01a451 ldy #$0006
01a454 ldx $19b9
01a457 rep #$30			; set A,X,Y => 16bit
01a459 lda $0b88fc,x
01a45d and #$00ff
01a460 asl a
01a461 asl a
01a462 asl a
01a463 asl a
01a464 clc
01a465 adc #$d824
01a468 phx
01a469 phy
01a46a phb				; save databank to stack
01a46b ldy $00
01a46d tax
01a46e lda #$000f
01a471 mvn $07,$7f
01a474 plb
01a475 ply
01a476 plx
01a477 inx
01a478 lda $00
01a47a clc
01a47b adc #$0020
01a47e sta $00
01a480 dey
01a481 bne $a459
01a483 rep #$30			; set A,X,Y => 16bit
01a485 pea $0004
01a488 plb
01a489 lda #$0010
01a48c sta $14
01a48e ldy #$e520
01a491 ldx #$0000		; clear X
01a494 rep #$30			; set A,X,Y => 16bit
01a496 lda #$0002
01a499 sta $16
01a49b lda $0000,y
01a49e sta $7f0000,x
01a4a2 lda $0002,y
01a4a5 sta $7f0002,x
01a4a9 lda $0004,y
01a4ac sta $7f0004,x
01a4b0 lda $0006,y
01a4b3 sta $7f0006,x
01a4b7 tya
01a4b8 clc
01a4b9 adc #$0008
01a4bc tay
01a4bd txa
01a4be clc
01a4bf adc #$0008
01a4c2 tax
01a4c3 dec $16
01a4c5 bne $a49b
01a4c7 sep #$20			; set A => 8bit
01a4c9 rep #$10			; set X,Y => 16bit
01a4cb lda #$08
01a4cd sta $18
01a4cf lda $0000,y
01a4d2 sta $7f0000,x
01a4d6 lda #$00
01a4d8 sta $7f0001,x
01a4dc inx
01a4dd inx
01a4de iny
01a4df dec $18
01a4e1 bne $a4cf
01a4e3 rep #$30			; set A,X,Y => 16bit
01a4e5 dec $14
01a4e7 bne $a494
01a4e9 plb
01a4ea sep #$20			; set A => 8bit
01a4ec rep #$10			; set X,Y => 16bit
01a4ee lda #$80
01a4f0 sta $0e
01a4f2 ldy #$0008
01a4f5 lda #$00
01a4f7 xba
01a4f8 lda $0a
01a4fa rep #$30			; set A,X,Y => 16bit
01a4fc clc
01a4fd adc $19b9
01a500 tax
01a501 sep #$20			; set A => 8bit
01a503 rep #$10			; set X,Y => 16bit
01a505 lda $0b88fc,x
01a509 sta $0d
01a50b phy
01a50c lda $0d
01a50e and $0e
01a510 beq $a52b
01a512 lda #$00
01a514 xba
01a515 lda $0b
01a517 inc $0b
01a519 rep #$30			; set A,X,Y => 16bit
01a51b clc
01a51c adc $19b9
01a51f tax
01a520 sep #$20			; set A => 8bit
01a522 rep #$10			; set X,Y => 16bit
01a524 lda $0b88fc,x
01a528 jsr $a864
01a52b sep #$20			; set A => 8bit
01a52d rep #$10			; set X,Y => 16bit
01a52f inc $0c
01a531 lda $0e
01a533 lsr a
01a534 sta $0e
01a536 ply
01a537 dey
01a538 bne $a50b
01a53a inc $0a
01a53c lda $0a
01a53e cmp #$0c
01a540 beq $a54f
01a542 cmp #$0b
01a544 bne $a4ea
01a546 lda #$80
01a548 sta $0e
01a54a ldy #$0004
01a54d bra $a4f5
01a54f rep #$30			; set A,X,Y => 16bit
01a551 lda #$000b
01a554 clc
01a555 adc $19b9
01a558 tax
01a559 sep #$20			; set A => 8bit
01a55b rep #$10			; set X,Y => 16bit
01a55d lda $0b88fc,x
01a561 bit #$01
01a563 beq $a572
01a565 lda #$f2
01a567 jsl $009776
01a56b bne $a570
01a56d jsr $a5a9
01a570 bra $a5a7
01a572 ldx #$ada0
01a575 stx $02
01a577 lda #$04
01a579 sta $06
01a57b lda #$7f
01a57d sta $07
01a57f lda #$00
01a581 xba
01a582 lda $0c
01a584 asl a
01a585 tax
01a586 rep #$30			; set A,X,Y => 16bit
01a588 lda $01a5df,x
01a58c sta $04
01a58e ldy #$0060
01a591 jsr $a900
01a594 lda $02
01a596 clc
01a597 adc #$0018
01a59a sta $02
01a59c lda $04
01a59e clc
01a59f adc #$0020
01a5a2 sta $04
01a5a4 dey
01a5a5 bne $a591
01a5a7 pld
01a5a8 rts				; exit routine



01a5a9 php				; save processor status to stack
01a5aa phd				; save direct page to stack
01a5ab pea $192b
01a5ae pld
01a5af ldx #$be20
01a5b2 stx $02
01a5b4 lda #$04
01a5b6 sta $06
01a5b8 lda #$7f
01a5ba sta $07
01a5bc rep #$30			; set A,X,Y => 16bit
01a5be lda #$1e00
01a5c1 sta $04
01a5c3 ldy #$0080
01a5c6 jsr $a900
01a5c9 lda $02
01a5cb clc
01a5cc adc #$0018
01a5cf sta $02
01a5d1 lda $04
01a5d3 clc
01a5d4 adc #$0020
01a5d7 sta $04
01a5d9 dey
01a5da bne $a5c6
01a5dc pld
01a5dd plp
01a5de rts				; exit routine



01a691 sep #$20			; set A => 8bit
01a693 rep #$10			; set X,Y => 16bit
01a695 phd				; save direct page to stack
01a696 pea $1a72
01a699 pld
01a69a ldx #$0000		; clear X
01a69d stx $1939
01a6a0 jsr $af55
01a6a3 sep #$20			; set A => 8bit
01a6a5 rep #$10			; set X,Y => 16bit
01a6a7 lda #$ff
01a6a9 sta $193b
01a6ac lda #$08
01a6ae sta $1935
01a6b1 sep #$20			; set A => 8bit
01a6b3 rep #$10			; set X,Y => 16bit
01a6b5 inc $193b
01a6b8 lda $1935
01a6bb jsr $90dc
01a6be cmp #$ff
01a6c0 beq $a6ef
01a6c2 jsr $a6f1
01a6c5 bcs $a6e0
01a6c7 rep #$30			; set A,X,Y => 16bit
01a6c9 ldx $1939
01a6cc lda $01,x
01a6ce sta $03,x
01a6d0 sta $05,x
01a6d2 sta $07,x
01a6d4 lda $1939
01a6d7 clc
01a6d8 adc #$001a
01a6db sta $1939
01a6de bra $a6b1
01a6e0 sep #$20			; set A => 8bit
01a6e2 rep #$10			; set X,Y => 16bit
01a6e4 lda $1935
01a6e7 clc
01a6e8 adc #$07
01a6ea sta $1935
01a6ed bra $a6b1
01a6ef pld
01a6f0 rts				; exit routine



01a6f1 stz $1948
01a6f4 jsr $b077
01a6f7 bcc $a6fb
01a6f9 sec
01a6fa rts				; exit routine



01a6fb sep #$20			; set A => 8bit
01a6fd rep #$10			; set X,Y => 16bit
01a6ff ldx $1939
01a702 stz $00,x
01a704 lda $193b
01a707 sta $19,x
01a709 inc $1935
01a70c lda $1935
01a70f jsr $90dc
01a712 sta $0f,x
01a714 inc $1935
01a717 lda $1935
01a71a jsr $90dc
01a71d sta $193f
01a720 and #$3f
01a722 sta $0c,x
01a724 inc $1935
01a727 lda $1935
01a72a jsr $90dc
01a72d sta $192b
01a730 and #$3f
01a732 sta $0b,x
01a734 lda $192b
01a737 and #$c0
01a739 lsr a
01a73a lsr a
01a73b pha
01a73c lda $1948
01a73f beq $a749
01a741 pla
01a742 clc
01a743 adc #$10
01a745 and #$30
01a747 bra $a74a
01a749 pla
01a74a sta $0e,x
01a74c inc $1935
01a74f lda $1935
01a752 jsr $90dc
01a755 sta $192b
01a758 and #$e0
01a75a lsr a
01a75b lsr a
01a75c lsr a
01a75d lsr a
01a75e sta $02,x
01a760 sta $04,x
01a762 sta $06,x
01a764 sta $08,x
01a766 lda #$00
01a768 xba
01a769 lda $192b
01a76c and #$1f
01a76e sta $192b
01a771 lda $193f
01a774 and #$c0
01a776 lsr a
01a777 ora $192b
01a77a asl a
01a77b phx
01a77c tax
01a77d lda $0b87e4,x
01a781 sta $192b
01a784 lda $0b87e5,x
01a788 sta $192c
01a78b plx
01a78c lda $192c
01a78f sta $18,x
01a791 lda $192b
01a794 and #$c0
01a796 ora $0e,x
01a798 sta $0e,x
01a79a lda $192b
01a79d and #$3f
01a79f sta $10,x
01a7a1 inc $1935
01a7a4 lda $1935
01a7a7 jsr $90dc
01a7aa sta $192b
01a7ad and #$f8
01a7af lsr a
01a7b0 lsr a
01a7b1 lsr a
01a7b2 ora $0d,x
01a7b4 sta $0d,x
01a7b6 lda $192b
01a7b9 and #$07
01a7bb ora $0e,x
01a7bd sta $0e,x
01a7bf inc $1935
01a7c2 lda $1935
01a7c5 jsr $90dc
01a7c8 inc $1935
01a7cb sta $192b
01a7ce and #$80
01a7d0 lsr a
01a7d1 lsr a
01a7d2 ora $0d,x
01a7d4 sta $0d,x
01a7d6 php				; save processor status to stack
01a7d7 rep #$30			; set A,X,Y => 16bit
01a7d9 lda $192b
01a7dc and #$007f
01a7df asl a
01a7e0 asl a
01a7e1 sta $11,x
01a7e3 ora $01,x
01a7e5 sta $01,x
01a7e7 plp
01a7e8 phx
01a7e9 phy
01a7ea txy
01a7eb lda $193b
01a7ee jsr $e1d2
01a7f1 phy
01a7f2 txy
01a7f3 plx
01a7f4 lda $0f28,y
01a7f7 beq $a803
01a803 ply
01a804 plx
01a805 clc
01a806 rts				; exit routine



01a807 php				; save processor status to stack
01a808 sep #$20			; set A => 8bit
01a80a rep #$10			; set X,Y => 16bit
01a80c stz $1948
01a80f php				; save processor status to stack
01a810 pea $1a72
01a813 pld
01a814 phy
01a815 jsr $a6fb
01a818 jsr $a987
01a81b ply
01a81c lda #$eb00
01a81f tya
01a820 asl a
01a821 asl a
01a822 tay
01a823 sty $193b
01a826 jsr $aa3a
01a829 plp
01a82a ldx $1939
01a82d lda #$02
01a82f sta $1a72,x
01a832 plp
01a833 rts				; exit routine



01a864 phb				; save databank to stack
01a865 phd				; save direct page to stack
01a866 pea $192b
01a869 pld
01a86a sep #$20			; set A => 8bit
01a86c rep #$10			; set X,Y => 16bit
01a86e sta $00
01a870 bit #$80
01a872 bne $a89c
01a874 rep #$30			; set A,X,Y => 16bit
01a876 and #$007f
01a879 asl a
01a87a asl a
01a87b asl a
01a87c asl a
01a87d asl a
01a87e asl a
01a87f asl a
01a880 ldx $00
01a882 phx
01a883 sta $00
01a885 asl a
01a886 clc
01a887 adc $00
01a889 plx
01a88a stx $00
01a88c clc
01a88d adc #$9a20
01a890 sta $02
01a892 sep #$20			; set A => 8bit
01a894 rep #$10			; set X,Y => 16bit
01a896 lda #$10
01a898 sta $08
01a89a bra $a8ba
01a89c rep #$30			; set A,X,Y => 16bit
01a89e and #$007f
01a8a1 asl a
01a8a2 asl a
01a8a3 asl a
01a8a4 asl a
01a8a5 asl a
01a8a6 sta $02
01a8a8 asl a
01a8a9 clc
01a8aa adc $02
01a8ac clc
01a8ad adc #$d7a0
01a8b0 sta $02
01a8b2 sep #$20			; set A => 8bit
01a8b4 rep #$10			; set X,Y => 16bit
01a8b6 lda #$08
01a8b8 sta $08
01a8ba sep #$20			; set A => 8bit
01a8bc rep #$10			; set X,Y => 16bit
01a8be lda #$04
01a8c0 sta $06
01a8c2 lda #$7f
01a8c4 sta $07
01a8c6 lda #$00
01a8c8 xba
01a8c9 lda $0c
01a8cb asl a
01a8cc tax
01a8cd rep #$30			; set A,X,Y => 16bit
01a8cf lda $01a5df,x
01a8d3 sta $04
01a8d5 sep #$20			; set A => 8bit
01a8d7 rep #$10			; set X,Y => 16bit
01a8d9 jsr $a900
01a8dc lda $08
01a8de dec
01a8df sta $08
01a8e1 beq $a8fd
01a8e3 pha
01a8e4 rep #$30			; set A,X,Y => 16bit
01a8e6 lda $02
01a8e8 clc
01a8e9 adc #$0018
01a8ec sta $02
01a8ee lda $04
01a8f0 clc
01a8f1 adc #$0020
01a8f4 sta $04
01a8f6 sep #$20			; set A => 8bit
01a8f8 rep #$10			; set X,Y => 16bit
01a8fa pla
01a8fb bra $a8d5
01a8fd pld
01a8fe plb
01a8ff rts				; exit routine



01a900 phb				; save databank to stack
01a901 phy
01a902 php				; save processor status to stack
01a903 phd				; save direct page to stack
01a904 pea $192b
01a907 pld
01a908 rep #$30			; set A,X,Y => 16bit
01a90a phb				; save databank to stack
01a90b ldx $02
01a90d ldy $04
01a90f lda #$000f
01a912 mvn $04,$7f
01a915 plb
01a916 sep #$20			; set A => 8bit
01a918 rep #$10			; set X,Y => 16bit
01a91a lda #$08
01a91c sta $01
01a91e phb				; save databank to stack
01a91f lda $06
01a921 pha
01a922 plb
01a923 lda $0000,x
01a926 inx
01a927 pha
01a928 lda $07
01a92a pha
01a92b plb
01a92c pla
01a92d xba
01a92e lda #$00
01a930 xba
01a931 rep #$30			; set A,X,Y => 16bit
01a933 sta $0000,y
01a936 iny
01a937 iny
01a938 sep #$20			; set A => 8bit
01a93a rep #$10			; set X,Y => 16bit
01a93c plb
01a93d dec $01
01a93f bne $a91e
01a941 pld
01a942 plp
01a943 ply
01a944 plb
01a945 rts				; exit routine



01a946 sep #$20			; set A => 8bit
01a948 rep #$10			; set X,Y => 16bit
01a94a phd				; save direct page to stack
01a94b pea $1a72
01a94e pld
01a94f stz $1938
01a952 ldx #$0000		; clear X
01a955 stx $1939
01a958 sep #$20			; set A => 8bit
01a95a rep #$10			; set X,Y => 16bit
01a95c ldx $1939
01a95f lda $00,x
01a961 cmp #$ff
01a963 beq $a968
01a965 jsr $a987
01a968 sep #$20			; set A => 8bit
01a96a rep #$10			; set X,Y => 16bit
01a96c inc $1938
01a96f lda $1938
01a972 cmp #$17
01a974 beq $a985
01a976 rep #$30			; set A,X,Y => 16bit
01a978 lda $1939
01a97b clc
01a97c adc #$001a
01a97f sta $1939
01a982 jmp $a958
01a985 pld
01a986 rts				; exit routine



01a987 ldx $1939
01a98a lda $18,x
01a98c and #$c0
01a98e rol a
01a98f rol a
01a990 rol a
01a991 and #$03
01a993 sta $00,x
01a995 lda #$00
01a997 xba
01a998 lda $10,x
01a99a rep #$30			; set A,X,Y => 16bit
01a99c phx
01a99d sta $193d
01a9a0 asl a
01a9a1 tax
01a9a2 lda $00fdcf,x
01a9a6 sta $193b
01a9a9 plx
01a9aa lda $0e,x
01a9ac and #$0030
01a9af pha
01a9b0 lda $193d
01a9b3 cmp #$0005
01a9b6 bcc $a9bc
01a9b8 pla
01a9b9 lsr a
01a9ba bra $a9bd
01a9bc pla
01a9bd clc
01a9be adc $193b
01a9c1 tay
01a9c2 lda #$0000
01a9c5 jsr $ae89
01a9c8 jsr $a9cc
01a9cb rts				; exit routine



01a9cc php				; save processor status to stack
01a9cd rep #$30			; set A,X,Y => 16bit
01a9cf phx
01a9d0 lda $0b,x
01a9d2 sta $197f
01a9d5 jsr $af19
01a9d8 sep #$20			; set A => 8bit
01a9da rep #$10			; set X,Y => 16bit
01a9dc lda $7f8000,x
01a9e0 plx
01a9e1 bit #$80
01a9e3 beq $a9eb
01a9e5 lda $0e,x
01a9e7 ora #$08
01a9e9 sta $0e,x
01a9eb plp
01a9ec rts				; exit routine



01a9ed sep #$20			; set A => 8bit
01a9ef rep #$10			; set X,Y => 16bit
01a9f1 phd				; save direct page to stack
01a9f2 pea $1a72
01a9f5 pld
01a9f6 stz $1938
01a9f9 ldx #$0000		; clear X
01a9fc stx $1939
01a9ff stx $193b
01aa02 sep #$20			; set A => 8bit
01aa04 rep #$10			; set X,Y => 16bit
01aa06 ldx $1939
01aa09 lda $00,x
01aa0b cmp #$ff
01aa0d beq $aa12
01aa0f jsr $aa3a
01aa12 sep #$20			; set A => 8bit
01aa14 rep #$10			; set X,Y => 16bit
01aa16 inc $1938
01aa19 lda $1938
01aa1c cmp #$16
01aa1e beq $aa38
01aa20 rep #$30			; set A,X,Y => 16bit
01aa22 lda $1939
01aa25 clc
01aa26 adc #$001a
01aa29 sta $1939
01aa2c lda $193b
01aa2f clc
01aa30 adc #$0004
01aa33 sta $193b
01aa36 bra $aa02
01aa38 pld
01aa39 rts				; exit routine



01aa3a sep #$20			; set A => 8bit
01aa3c rep #$10			; set X,Y => 16bit
01aa3e ldx $1939
01aa41 lda $00,x
01aa43 cmp #$01
01aa45 bne $aa49
01aa47 stz $00,x
01aa49 lda $10,x
01aa4b cmp #$04
01aa4d beq $aa63
01aa4f cmp #$06
01aa51 beq $aa63
01aa53 cmp #$07
01aa55 beq $aa63
01aa57 cmp #$08
01aa59 beq $aa63
01aa5b cmp #$09
01aa5d beq $aa63
01aa5f lda #$00
01aa61 bra $aa70
01aa63 lda #$08
01aa65 sta $00a8
01aa68 jsl $009783
01aa6c lda $00a9
01aa6f asl a
01aa70 sta $17,x
01aa72 lda $0b,x
01aa74 sta $197f
01aa77 lda $0c,x
01aa79 sta $1980
01aa7c phx
01aa7d jsr $af19
01aa80 jsr $af39
01aa83 plx
01aa84 jsr $a9cc
01aa87 jsr $afef
01aa8a rep #$30			; set A,X,Y => 16bit
01aa8c ldx $193b
01aa8f lda $01a639,x
01aa93 sta $193d
01aa96 tay
01aa97 lda $01a63b,x
01aa9b sta $193f
01aa9e ldx $1939
01aaa1 lda $01,x
01aaa3 sta $0c02,y
01aaa6 lda $03,x
01aaa8 sta $0c06,y
01aaab lda $05,x
01aaad sta $0c0a,y
01aab0 lda $07,x
01aab2 sta $0c0e,y
01aab5 sep #$20			; set A => 8bit
01aab7 rep #$10			; set X,Y => 16bit
01aab9 ldx $193f
01aabc stz $0c00,x
01aabf ldx #$0000		; clear X
01aac2 stx $192b
01aac5 stx $192d
01aac8 ldx $1939
01aacb lda $0e89
01aace sta $192d
01aad1 lda #$00
01aad3 xba
01aad4 lda $0b,x
01aad6 rep #$30			; set A,X,Y => 16bit
01aad8 sec
01aad9 sbc $192d
01aadc asl a
01aadd asl a
01aade asl a
01aadf asl a
01aae0 sta $192b
01aae3 lda $01832e
01aae7 and #$00ff
01aaea clc
01aaeb adc $192b
01aaee sta $192b
01aaf1 stz $192d
01aaf4 stz $192f
01aaf7 lda #$0000
01aafa sep #$20			; set A => 8bit
01aafc rep #$10			; set X,Y => 16bit
01aafe lda $0e8a
01ab01 sta $192f
01ab04 lda $0c,x
01ab06 rep #$30			; set A,X,Y => 16bit
01ab08 sec
01ab09 sbc $192f
01ab0c asl a
01ab0d asl a
01ab0e asl a
01ab0f asl a
01ab10 sta $192d
01ab13 lda $01832f
01ab17 and #$00ff
01ab1a clc
01ab1b adc $192d
01ab1e sta $192d
01ab21 lda $18,x
01ab23 bit #$0020
01ab26 beq $ab32
01ab28 lda $192b
01ab2b clc
01ab2c adc #$0008
01ab2f sta $192b
01ab32 lda $18,x
01ab34 bit #$0010
01ab37 beq $ab43
01ab39 lda $192d
01ab3c clc
01ab3d adc #$0008
01ab40 sta $192d
01ab43 rep #$30			; set A,X,Y => 16bit
01ab45 lda $192b
01ab48 and #$03ff
01ab4b sta $13,x
01ab4d lda $192d
01ab50 and #$03ff
01ab53 sta $15,x
01ab55 rts				; exit routine



01ab5c php				; save processor status to stack
01ab5d sep #$20			; set A => 8bit
01ab5f rep #$10			; set X,Y => 16bit
01ab61 phd				; save direct page to stack
01ab62 pea $1a72
01ab65 pld
01ab66 ldx #$0000		; clear X
01ab69 stx $1973
01ab6c stx $1975
01ab6f stx $1985
01ab72 stz $1a70
01ab75 lda #$00
01ab77 xba
01ab78 lda $1a71
01ab7b tax
01ab7c lda $01ab59,x
01ab80 pha
01ab81 sta $1973
01ab84 lda $01ab56,x
01ab88 clc
01ab89 adc $1973
01ab8c sta $1985
01ab8f pla
01ab90 rep #$30			; set A,X,Y => 16bit
01ab92 asl a
01ab93 sta $1975
01ab96 asl a
01ab97 asl a
01ab98 pha
01ab99 clc
01ab9a adc $1975
01ab9d sta $1975
01aba0 pla
01aba1 asl a
01aba2 clc
01aba3 adc $1975
01aba6 sta $1975
01aba9 sep #$20			; set A => 8bit
01abab rep #$10			; set X,Y => 16bit
01abad inc $1a71
01abb0 lda $1a71
01abb3 cmp #$03
01abb5 bne $abba
01abb7 stz $1a71
01abba sep #$20			; set A => 8bit
01abbc rep #$10			; set X,Y => 16bit
01abbe ldx $1975
01abc1 lda $00,x
01abc3 bne $abc8
01abc5 jmp $ad00
01abc8 cmp #$ff
01abca beq $ac02
01abcc cmp #$04
01abce beq $ac02
01abd0 cmp #$01
01abd2 beq $ac1e
01abd4 cmp #$03
01abd6 bne $abdf
01abd8 and #$10
01abda bne $ac02
01abdc jmp $add5
01abdf rep #$30			; set A,X,Y => 16bit
01abe1 phx
01abe2 lda $1973
01abe5 asl a
01abe6 asl a
01abe7 tax
01abe8 lda $01a639,x
01abec tay
01abed plx
01abee lda $01,x
01abf0 sta $0c02,y
01abf3 lda $03,x
01abf5 sta $0c06,y
01abf8 lda $05,x
01abfa sta $0c0a,y
01abfd lda $07,x
01abff sta $0c0e,y
01ac02 rep #$30			; set A,X,Y => 16bit
01ac04 inc $1973
01ac07 lda $1973
01ac0a cmp $1985
01ac0d beq $ac1b
01ac0f lda $1975
01ac12 clc
01ac13 adc #$001a
01ac16 sta $1975
01ac19 bra $abba
01ac1b pld
01ac1c plp
01ac1d rts				; exit routine



01ac1e sep #$20			; set A => 8bit
01ac20 rep #$10			; set X,Y => 16bit
01ac22 lda $0e,x
01ac24 pha
01ac25 rol a
01ac26 rol a
01ac27 rol a
01ac28 and #$03
01ac2a sta $197d
01ac2d inc
01ac2e sta $197f
01ac31 cmp #$03
01ac33 bne $ac38
01ac38 pla
01ac39 lsr a
01ac3a lsr a
01ac3b lsr a
01ac3c lsr a
01ac3d and #$03
01ac3f sta $197e
01ac42 lda #$00
01ac44 xba
01ac45 lda $10,x
01ac47 rep #$30			; set A,X,Y => 16bit
01ac49 asl a
01ac4a phx
01ac4b tax
01ac4c lda $00fdcf,x
01ac50 sta $1977
01ac53 plx
01ac54 sep #$20			; set A => 8bit
01ac56 rep #$10			; set X,Y => 16bit
01ac58 lda $17,x
01ac5a sec
01ac5b sbc $197f
01ac5e sta $17,x
01ac60 pha
01ac61 pla
01ac62 and #$08
01ac64 lsr a
01ac65 lsr a
01ac66 lsr a
01ac67 sta $1979
01ac6a lda $197e
01ac6d asl a
01ac6e clc
01ac6f adc $1979
01ac72 rep #$30			; set A,X,Y => 16bit
01ac74 and #$00ff
01ac77 asl a
01ac78 asl a
01ac79 asl a
01ac7a clc
01ac7b adc $1977
01ac7e sta $1977
01ac81 tay
01ac82 sep #$20			; set A => 8bit
01ac84 rep #$10			; set X,Y => 16bit
01ac86 jsr $ae89
01ac89 sep #$20			; set A => 8bit
01ac8b rep #$10			; set X,Y => 16bit
01ac8d lda #$00
01ac8f xba
01ac90 lda $197e
01ac93 asl a
01ac94 rep #$30			; set A,X,Y => 16bit
01ac96 and #$00ff
01ac99 phx
01ac9a tax
01ac9b lda $0190d4,x
01ac9f sta $1977
01aca2 plx
01aca3 sep #$20			; set A => 8bit
01aca5 rep #$10			; set X,Y => 16bit
01aca7 lda #$00
01aca9 xba
01acaa lda $1977
01acad beq $acca
01acaf bpl $acbd
01acb1 lda $197f
01acb4 eor #$ff
01acb6 inc
01acb7 xba
01acb8 lda #$ff
01acba xba
01acbb bra $acc0
01acbd lda $197f
01acc0 rep #$30			; set A,X,Y => 16bit
01acc2 clc
01acc3 adc $13,x
01acc5 and #$03ff
01acc8 sta $13,x
01acca sep #$20			; set A => 8bit
01accc rep #$10			; set X,Y => 16bit
01acce lda #$00
01acd0 xba
01acd1 lda $1978
01acd4 beq $acf1
01acd6 bpl $ace4
01acd8 lda $197f
01acdb eor #$ff
01acdd inc
01acde xba
01acdf lda #$ff
01ace1 xba
01ace2 bra $ace7
01ace4 lda $197f
01ace7 rep #$30			; set A,X,Y => 16bit
01ace9 clc
01acea adc $15,x
01acec and #$03ff
01acef sta $15,x
01acf1 sep #$20			; set A => 8bit
01acf3 rep #$10			; set X,Y => 16bit
01acf5 lda $17,x
01acf7 bne $acfd
01acf9 lda #$00
01acfb sta $00,x
01acfd jmp $abdf
01ad00 sep #$20			; set A => 8bit
01ad02 rep #$10			; set X,Y => 16bit
01ad04 lda $1a70
01ad07 cmp #$02
01ad09 beq $ad19
01ad0b stz $00a8
01ad0e jsl $009783
01ad12 lda $00a9
01ad15 cmp #$f0
01ad17 bcs $ad1c
01ad19 jmp $abdf
01ad1c inc $1a70
01ad1f lda $00a9
01ad22 and #$03
01ad24 sta $1979
01ad27 sta $1981
01ad2a lda $0b,x
01ad2c sta $197f
01ad2f lda $0c,x
01ad31 sta $1980
01ad34 jsr $aee6
01ad37 sep #$20			; set A => 8bit
01ad39 rep #$10			; set X,Y => 16bit
01ad3b lda $197f
01ad3e bmi $ad19
01ad40 cmp $1924
01ad43 bcs $ad19
01ad45 lda $1980
01ad48 bmi $ad19
01ad4a cmp $1925
01ad4d bcs $ad19
01ad4f jsr $afb6
01ad52 bcs $ad19
01ad54 lda $1982
01ad57 and #$80
01ad59 lsr a
01ad5a lsr a
01ad5b lsr a
01ad5c lsr a
01ad5d sta $1982
01ad60 lda $0e,x
01ad62 and #$08
01ad64 cmp $1982
01ad67 bne $ad19
01ad69 rep #$30			; set A,X,Y => 16bit
01ad6b lda $197f
01ad6e cmp $0e89
01ad71 beq $ad19
01ad73 lda $1983
01ad76 bit #$8000
01ad79 bne $ad19
01ad7b bit #$0400
01ad7e bne $ad19
01ad80 and #$0007
01ad83 sta $197d
01ad86 cmp #$0007
01ad89 beq $ad19
01ad8b lda $0e,x
01ad8d and #$0007
01ad90 sta $197b
01ad93 cmp $197d
01ad96 bne $ad19
01ad98 lda $1983
01ad9b and #$0070
01ad9e cmp #$0070
01ada1 bne $ada6
01ada6 jsr $afef
01ada9 sep #$20			; set A => 8bit
01adab rep #$10			; set X,Y => 16bit
01adad lda $1979
01adb0 asl a
01adb1 asl a
01adb2 asl a
01adb3 asl a
01adb4 sta $1977
01adb7 lda $0e,x
01adb9 and #$cf
01adbb ora $1977
01adbe sta $0e,x
01adc0 lda #$10
01adc2 sta $17,x
01adc4 lda #$01
01adc6 sta $00,x
01adc8 lda $197f
01adcb sta $0b,x
01adcd lda $1980
01add0 sta $0c,x
01add2 jmp $ac1e
01add5 sep #$20			; set A => 8bit
01add7 rep #$10			; set X,Y => 16bit
01add9 lda #$00
01addb xba
01addc lda $17,x
01adde pha
01addf and #$f0
01ade1 sta $1977
01ade4 pla
01ade5 and #$0f
01ade7 inc
01ade8 sta $1978
01adeb ora $1977
01adee sta $17,x
01adf0 ldy #$0008
01adf3 lda $0e,x
01adf5 and #$c0
01adf7 beq $ae03
01adf9 ldy #$0004
01adfc cmp #$40
01adfe beq $ae03
01ae00 ldy #$0001
01ae03 tya
01ae04 and $1978
01ae07 beq $ae70
01ae09 lda $1977
01ae0c lsr a
01ae0d lsr a
01ae0e lsr a
01ae0f lsr a
01ae10 inc
01ae11 sta $1977
01ae14 lda #$00
01ae16 xba
01ae17 lda $18,x
01ae19 and #$03
01ae1b and $1977
01ae1e sta $1977
01ae21 asl a
01ae22 asl a
01ae23 asl a
01ae24 tay
01ae25 lda #$00
01ae27 xba
01ae28 lda $10,x
01ae2a rep #$30			; set A,X,Y => 16bit
01ae2c pha
01ae2d asl a
01ae2e phx
01ae2f tax
01ae30 tya
01ae31 clc
01ae32 adc $00fdcf,x
01ae36 sta $1979
01ae39 plx
01ae3a lda $0e,x
01ae3c and #$0030
01ae3f sta $197b
01ae42 pla
01ae43 cmp #$0005
01ae46 bcc $ae4e
01ae48 lda $197b
01ae4b lsr a
01ae4c bra $ae51
01ae4e lda $197b
01ae51 clc
01ae52 adc $1979
01ae55 tay
01ae56 sep #$20			; set A => 8bit
01ae58 rep #$10			; set X,Y => 16bit
01ae5a jsr $ae89
01ae5d lda $1977
01ae60 asl a
01ae61 asl a
01ae62 asl a
01ae63 asl a
01ae64 sta $17,x
01ae66 lda $18,x
01ae68 bit #$08
01ae6a bne $ae73
01ae6c bit #$04
01ae6e bne $ae7c
01ae70 jmp $abdf
01ae73 lda $1977
01ae76 and #$01
01ae78 sta $09,x
01ae7a bra $ae70
01ae7c lda $1977
01ae7f and #$01
01ae81 sta $0a,x
01ae83 bra $ae70
01ae85 jsr $ae89
01ae88 rtl				; exit routine



01ae89 php				; save processor status to stack
01ae8a phb				; save databank to stack
01ae8b phd				; save direct page to stack
01ae8c phx
01ae8d phy
01ae8e rep #$30			; set A,X,Y => 16bit
01ae90 lda $1987
01ae93 pha
01ae94 lda $1989
01ae97 pha
01ae98 pea $1a72
01ae9b pld
01ae9c lda $11,x
01ae9e sta $1987
01aea1 sep #$20			; set A => 8bit
01aea3 rep #$10			; set X,Y => 16bit
01aea5 pea $0000
01aea8 plb
01aea9 pla
01aeaa lda #$04
01aeac sta $1989
01aeaf rep #$30			; set A,X,Y => 16bit
01aeb1 lda $f141,y
01aeb4 iny
01aeb5 and #$00ff
01aeb8 clc
01aeb9 adc $1987
01aebc sep #$20			; set A => 8bit
01aebe rep #$10			; set X,Y => 16bit
01aec0 sta $01,x
01aec2 lda $02,x
01aec4 and #$3e
01aec6 sta $02,x
01aec8 xba
01aec9 ora $02,x
01aecb ora $f141,y
01aece iny
01aecf sta $02,x
01aed1 inx
01aed2 inx
01aed3 dec $1989
01aed6 bne $aeaf
01aed8 plx
01aed9 stx $1989
01aedc plx
01aedd stx $1987
01aee0 ply
01aee1 plx
01aee2 pld
01aee3 plb
01aee4 plp
01aee5 rts				; exit routine



01aee6 phy
01aee7 phx
01aee8 php				; save processor status to stack
01aee9 jsr $aef6
01aeec jsr $af19
01aeef jsr $af39
01aef2 plp
01aef3 plx
01aef4 ply
01aef5 rts				; exit routine



01aef6 sep #$20			; set A => 8bit
01aef8 rep #$10			; set X,Y => 16bit
01aefa lda #$00
01aefc xba
01aefd lda $1981
01af00 asl a
01af01 tax
01af02 lda $0190d4,x
01af06 clc
01af07 adc $197f
01af0a sta $197f
01af0d lda $0190d5,x
01af11 clc
01af12 adc $1980
01af15 sta $1980
01af18 rts				; exit routine



01af19 sep #$20			; set A => 8bit
01af1b rep #$10			; set X,Y => 16bit
01af1d lda #$00
01af1f xba
01af20 lda $197f
01af23 tax
01af24 lda $1980
01af27 sta $4202
01af2a lda $1924
01af2d sta $4203
01af30 rep #$30			; set A,X,Y => 16bit
01af32 txa
01af33 clc
01af34 adc $4216
01af37 tax
01af38 rts				; exit routine



01af39 phx
01af3a sep #$20			; set A => 8bit
01af3c rep #$10			; set X,Y => 16bit
01af3e lda $7f8000,x
01af42 sta $1982
01af45 rep #$30			; set A,X,Y => 16bit
01af47 and #$007f
01af4a asl a
01af4b tax
01af4c lda $7fd174,x
01af50 sta $1983
01af53 plx
01af54 rts				; exit routine



01af55 php				; save processor status to stack
01af56 rep #$30			; set A,X,Y => 16bit
01af58 ldx #$0000		; clear X
01af5b stx $1a72
01af5e phb				; save databank to stack
01af5f ldx #$1a72
01af62 ldy #$1a73
01af65 lda #$023b
01af68 mvn $00,$00
01af6b plb
01af6c sep #$20			; set A => 8bit
01af6e rep #$10			; set X,Y => 16bit
01af70 lda #$ff
01af72 sta $1a72
01af75 sta $1a8c
01af78 sta $1aa6
01af7b sta $1ac0
01af7e sta $1ada
01af81 sta $1af4
01af84 sta $1b0e
01af87 sta $1b28
01af8a sta $1b42
01af8d sta $1b5c
01af90 sta $1b76
01af93 sta $1b90
01af96 sta $1baa
01af99 sta $1bc4
01af9c sta $1bde
01af9f sta $1bf8
01afa2 sta $1c12
01afa5 sta $1c2c
01afa8 sta $1c46
01afab sta $1c60
01afae sta $1c7a
01afb1 sta $1c94
01afb4 plp
01afb5 rts				; exit routine



01afb6 php				; save processor status to stack
01afb7 rep #$30			; set A,X,Y => 16bit
01afb9 phx
01afba stx $1987
01afbd lda #$0016
01afc0 ldx #$0000		; clear X
01afc3 pha
01afc4 lda $1a72,x
01afc7 bit #$0080
01afca bne $afd9
01afcc lda $1a7d,x
01afcf cmp $197f
01afd2 beq $afe6
01afd4 pla
01afd5 dec
01afd6 beq $afeb
01afd8 pha
01afd9 txa
01afda clc
01afdb adc #$001a
01afde tax
01afdf cmp $1987
01afe2 beq $afd4
01afe4 bra $afc4
01afe6 pla
01afe7 plx
01afe8 plp
01afe9 sec
01afea rts				; exit routine



01afeb plx
01afec plp
01afed clc
01afee rts				; exit routine



01afef php				; save processor status to stack
01aff0 phx
01aff1 phy
01aff2 sep #$20			; set A => 8bit
01aff4 rep #$10			; set X,Y => 16bit
01aff6 lda #$00
01aff8 xba
01aff9 lda $1983
01affc and #$70
01affe cmp #$70
01b000 beq $b00a
01b002 lsr a
01b003 lsr a
01b004 lsr a
01b005 txy
01b006 tax
01b007 jsr ($b00e,x)
01b00a ply
01b00b plx
01b00c plp
01b00d rts				; exit routine



01b016 tyx
01b017 lda $1a54
01b01a sta $1989
01b01d sta $198a
01b020 jmp $b050
01b023 tyx
01b024 lda $1a54
01b027 sta $1989
01b02a sec
01b02b sbc #$10
01b02d sta $198a
01b030 jmp $b050
01b050 pha
01b051 lda $02,x
01b053 and #$cf
01b055 ora $1989
01b058 sta $02,x
01b05a lda $04,x
01b05c and #$cf
01b05e ora $1989
01b061 sta $04,x
01b063 lda $06,x
01b065 and #$cf
01b067 ora $198a
01b06a sta $06,x
01b06c lda $08,x
01b06e and #$cf
01b070 ora $198a
01b073 sta $08,x
01b075 pla
01b076 rts				; exit routine



01b077 lda $1935
01b07a clc
01b07b adc #$05
01b07d jsr $90dc
01b080 and #$18
01b082 beq $b0b7
01b084 cmp #$18
01b086 beq $b0b7
01b088 cmp #$10
01b08a bne $b0ac
01b08c lda $1935
01b08f inc
01b090 jsr $90dc
01b093 cmp #$1d
01b095 bcc $b0b7
01b097 phd				; save direct page to stack
01b098 pea $0ec8
01b09b pld
01b09c jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
01b0a0 pld
01b0a1 inc
01b0a2 dec
01b0a3 beq $b0b7
01b0a5 lda #$01
01b0a7 sta $1948
01b0aa bra $b0c3
01b0ac lda $193b
01b0af sta $19e6
01b0b2 jsr $e096
01b0b5 bne $b0c5
01b0b7 lda $1935
01b0ba jsr $90dc
01b0bd jsl $009776
01b0c1 beq $b0c5
01b0c3 clc
01b0c4 rts				; exit routine



01b0c5 sec
01b0c6 rts				; exit routine



01b118 php				; save processor status to stack
01b119 phd				; save direct page to stack
01b11a pea $1a62
01b11d pld
01b11e rep #$30			; set A,X,Y => 16bit
01b120 ldx $192b
01b123 phx
01b124 ldx $192d
01b127 phx
01b128 and #$00ff
01b12b sta $192b
01b12e asl a
01b12f asl a
01b130 tax
01b131 pha
01b132 lda $a639,x
01b135 tay
01b136 pla
01b137 asl a
01b138 sta $192d
01b13b asl a
01b13c clc
01b13d adc $192d
01b140 clc
01b141 adc $192b
01b144 clc
01b145 adc $192b
01b148 tax
01b149 lda $11,x
01b14b sta $0c02,y
01b14e lda $13,x
01b150 sta $0c06,y
01b153 lda $15,x
01b155 sta $0c0a,y
01b158 lda $17,x
01b15a sta $0c0e,y
01b15d plx
01b15e stx $192d
01b161 plx
01b162 stx $192b
01b165 pld
01b166 plp
01b167 rts				; exit routine



01b168 lda $19ee
01b16b and #$0f
01b16d jsr $b171
01b170 rts				; exit routine



01b171 sta $193b
01b174 sta $4202
01b177 lda #$07
01b179 sta $4203
01b17c rep #$20			; set A => 16bit
01b17e lda #$0008
01b181 clc
01b182 adc $19b5
01b185 clc
01b186 adc $4216
01b189 sta $1935
01b18c sep #$20			; set A => 8bit
01b18e lda $193b
01b191 jsr $b21a
01b194 stx $1939
01b197 phx
01b198 lda $193b
01b19b asl a
01b19c asl a
01b19d asl a
01b19e sec
01b19f sbc $193b
01b1a2 clc
01b1a3 adc #$08
01b1a5 sta $1935
01b1a8 jsr $a807
01b1ab plx
01b1ac rts				; exit routine



01b1ad lda $19ee
01b1b0 and #$0f
01b1b2 jsr $b1ea
01b1b5 asl a
01b1b6 asl a
01b1b7 xba
01b1b8 lda #$ff
01b1ba sta $1a72,x
01b1bd inc
01b1be inx
01b1bf ldy #$0019
01b1c2 stz $1a72,x
01b1c5 inx
01b1c6 dey
01b1c7 bne $b1c2
01b1c9 xba
01b1ca tax
01b1cb ldy $a639,x
01b1ce rep #$20			; set A => 16bit
01b1d0 lda #$e080
01b1d3 sta $0c00,y
01b1d6 sta $0c04,y
01b1d9 sta $0c08,y
01b1dc sta $0c0c,y
01b1df ldy $a63b,x
01b1e2 sep #$20			; set A => 8bit
01b1e4 lda #$55
01b1e6 sta $0c00,y
01b1e9 rts				; exit routine



01b1ea phd				; save direct page to stack
01b1eb pea $1a62
01b1ee pld
01b1ef xba
01b1f0 lda #$1d
01b1f2 sta $00
01b1f4 stz $01
01b1f6 xba
01b1f7 ldx #$0000		; clear X
01b1fa cmp $29,x
01b1fc beq $b215
01b1fe dec $00
01b200 beq $b212
01b202 inc $01
01b204 pha
01b205 rep #$20			; set A => 16bit
01b207 txa
01b208 clc
01b209 adc #$001a
01b20c tax
01b20d sep #$20			; set A => 8bit
01b20f pla
01b210 bra $b1fa
01b215 lda $01
01b217 pld
01b218 sec
01b219 rts				; exit routine



01b21a phd				; save direct page to stack
01b21b pea $1a62
01b21e pld
01b21f lda #$1d
01b221 sta $00
01b223 ldx #$0000		; clear X
01b226 ldy #$0000
01b229 lda $10,x
01b22b bmi $b243
01b22d iny
01b22e dec $00
01b230 beq $b240
01b232 pha
01b233 rep #$20			; set A => 16bit
01b235 txa
01b236 clc
01b237 adc #$001a
01b23a tax
01b23b sep #$20			; set A => 8bit
01b23d pla
01b23e bra $b229
01b243 pld
01b244 sec
01b245 rts				; exit routine



01b24b php				; save processor status to stack
01b24c phb				; save databank to stack
01b24d phd				; save direct page to stack
01b24e phx
01b24f phy
01b250 phk
01b251 plb
01b252 rep #$30			; set A,X,Y => 16bit
01b254 jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
01b257 lda $19ee
01b25a cmp #$ffff
01b25d beq $b28c
01b25f lda $19ef
01b262 and #$00ff
01b265 cmp #$0040
01b268 bcc $b284
01b26a and #$00f0
01b26d cmp #$0030
01b270 beq $b28c
01b272 cmp #$0080
01b275 bcs $b28c
01b277 sec
01b278 sbc #$0040
01b27b lsr a
01b27c lsr a
01b27d lsr a
01b27e tax
01b27f jsr ($c401,x)
01b282 bra $b28c
01b284 asl a
01b285 tax
01b286 lda #$0000
01b289 jsr ($c3a5,x)
01b28c jsl $0096a0
01b290 jsr $8b82
01b293 stz $19b0
01b296 ply
01b297 plx
01b298 pld
01b299 plb
01b29a plp
01b29b rtl				; exit routine



01b29c ldx #$f4a0
01b29f lda $19ee
01b2a2 and #$00ff
01b2a5 sta $192b
01b2a8 asl a
01b2a9 clc
01b2aa adc $192b
01b2ad sta $192b
01b2b0 txa
01b2b1 clc
01b2b2 adc $192b
01b2b5 tax
01b2b6 sep #$20			; set A => 8bit
01b2b8 rep #$10			; set X,Y => 16bit
01b2ba phb				; save databank to stack
01b2bb pea $0005
01b2be plb
01b2bf pla
01b2c0 lda $0000,x
01b2c3 sta $19f0
01b2c6 lda $0001,x
01b2c9 sta $19f2
01b2cc lda $0002,x
01b2cf and #$3f
01b2d1 sta $19f1
01b2d4 lda $0002,x
01b2d7 rol a
01b2d8 rol a
01b2d9 rol a
01b2da and #$03
01b2dc sta $0e8b
01b2df plb
01b2e0 lda #$01
01b2e2 jmp $82f1
01b2e5 ldx #$f79a
01b2e8 bra $b29f
01b2ea jsr $c409
01b2ed lda $19ee
01b2f0 and #$00ff
01b2f3 sta $192b
01b2f6 asl a
01b2f7 clc
01b2f8 adc $192b
01b2fb tax
01b2fc sep #$20			; set A => 8bit
01b2fe rep #$10			; set X,Y => 16bit
01b300 lda $05f72b,x
01b304 sta $19f0
01b307 lda $05f72c,x
01b30b sta $19f2
01b30e lda $05f72d,x
01b312 and #$3f
01b314 sta $19f1
01b317 lda $05f72d,x
01b31b rol a
01b31c rol a
01b31d rol a
01b31e and #$03
01b320 sta $0e8b
01b323 lda #$01
01b325 jmp $82f1
01b328 sep #$20			; set A => 8bit
01b32a rep #$10			; set X,Y => 16bit
01b32c jsr $c42c
01b32f lda #$01
01b331 jmp $82f1
01b334 jmp $b29c
01b337 lda $0e89
01b33a sep #$20			; set A => 8bit
01b33c xba
01b33d inc
01b33e xba
01b33f tay
01b340 jsr $fd50
01b343 sty $0e89
01b346 rep #$20			; set A => 16bit
01b348 bra $b2ea
01b34a lda $19ee
01b34d and #$00ff
01b350 asl a
01b351 asl a
01b352 clc
01b353 adc #$f89c
01b356 tax
01b357 sep #$20			; set A => 8bit
01b359 rep #$10			; set X,Y => 16bit
01b35b phb				; save databank to stack
01b35c pea $0005
01b35f plb
01b360 pla
01b361 lda $0000,x
01b364 sta $0e88
01b367 inx
01b368 jmp $b2c0
01b36b lda $19ee
01b36e sec
01b36f sbc #$0800
01b372 sta $0020
01b375 jsl $009ba4
01b379 rts				; exit routine



01b37a sep #$20			; set A => 8bit
01b37c rep #$10			; set X,Y => 16bit
01b37e jsr $c618
01b381 bcs $b394
01b383 lda $19ee
01b386 cmp #$f0
01b388 beq $b395
01b38a cmp #$f1
01b38c beq $b39a
01b38e jsr $b73b
01b391 jmp $c6a0
01b395 ldx #$b8ad
01b398 bra $b39d
01b39a ldx #$b8b9
01b39d pea $0006
01b3a0 plb
01b3a1 pla
01b3a2 lda $0000,x
01b3a5 cmp #$ff
01b3a7 beq $b3cd
01b3a9 sta $19ee
01b3ac lda #$22
01b3ae sta $19ef
01b3b1 phx
01b3b2 php				; save processor status to stack
01b3b3 phb				; save databank to stack
01b3b4 phk
01b3b5 plb
01b3b6 jsr $b73b
01b3b9 jsr $df91
01b3bc lda #$08
01b3be jsr $baac
01b3c1 jsr $c6a0
01b3c4 jsr $e027
01b3c7 plb
01b3c8 plp
01b3c9 plx
01b3ca inx
01b3cb bra $b3a2
01b3cd rts				; exit routine



01b417 sep #$20			; set A => 8bit
01b419 rep #$10			; set X,Y => 16bit
01b41b jsr $c65c
01b41e bcs $b42e
01b420 lda #$33
01b422 jsr $baac
01b425 jsr $b73b
01b428 jsr $a9ed
01b42b jsr $c6a0
01b42e rts				; exit routine



01b4d1 lda $19ee
01b4d4 and #$00ff
01b4d7 asl a
01b4d8 tax
01b4d9 jmp ($b4dc,x)
01b4f6 ldy #$0010
01b4f9 lda $1900
01b4fc tax
01b4fd txa
01b4fe sec
01b4ff sbc #$0002
01b502 sta $1900
01b505 jsr $82cf
01b508 txa
01b509 clc
01b50a adc #$0002
01b50d sta $1900
01b510 jsr $82cf
01b513 dey
01b514 bne $b4fd
01b516 stx $1900
01b519 rts				; exit routine



01b524 sep #$20			; set A => 8bit
01b526 rep #$10			; set X,Y => 16bit
01b528 jsr $82d8
01b52b dec $0110
01b52e bne $b528
01b530 rts				; exit routine



01b531 sep #$20			; set A => 8bit
01b533 rep #$10			; set X,Y => 16bit
01b535 jsr $82d8
01b538 lda $0110
01b53b cmp #$0f
01b53d beq $b544
01b53f inc $0110
01b542 bra $b535
01b544 rts				; exit routine



01b545 lda $19ee
01b548 and #$00ff
01b54b asl a
01b54c tax
01b54d jmp ($b550,x)
01b66a sep #$20			; set A => 8bit
01b66c rep #$10			; set X,Y => 16bit
01b66e lda $19ee
01b671 and #$03
01b673 sta $19d7
01b676 asl a
01b677 asl a
01b678 asl a
01b679 asl a
01b67a sta $19ee
01b67d lda #$44
01b67f sta $19ef
01b682 jsr $bc1a
01b685 lda #$00
01b687 jsr $b1ea
01b68a bcc $b6f8
01b68c stx $1935
01b68f lda #$01
01b691 jsr $b1ea
01b694 bcc $b6f8
01b696 stx $1937
01b699 lda #$00
01b69b xba
01b69c lda $19d7
01b69f asl a
01b6a0 asl a
01b6a1 tax
01b6a2 php				; save processor status to stack
01b6a3 rep #$30			; set A,X,Y => 16bit
01b6a5 lda $b725,x
01b6a8 sta $1939
01b6ab lda $b727,x
01b6ae sta $193b
01b6b1 plp
01b6b2 lda #$10
01b6b4 sta $193d
01b6b7 jsr $b6f9
01b6ba jsr $82cf
01b6bd dec $193d
01b6c0 bne $b6b7
01b6c2 php				; save processor status to stack
01b6c3 rep #$30			; set A,X,Y => 16bit
01b6c5 lda $1939
01b6c8 asl a
01b6c9 sta $1939
01b6cc lda $193b
01b6cf asl a
01b6d0 sta $193b
01b6d3 lda #$0000
01b6d6 plp
01b6d7 lda $19d7
01b6da and #$01
01b6dc tax
01b6dd lda $b735,x
01b6e0 sta $193d
01b6e3 jsr $b6f9
01b6e6 jsr $82cf
01b6e9 dec $193d
01b6ec bne $b6e3
01b6ee lda #$00
01b6f0 jsr $b1b2
01b6f3 lda #$01
01b6f5 jsr $b1b2
01b6f8 rts				; exit routine



01b6f9 php				; save processor status to stack
01b6fa rep #$30			; set A,X,Y => 16bit
01b6fc ldx $1935
01b6ff jsr $b70a
01b702 ldx $1937
01b705 jsr $b70a
01b708 plp
01b709 rts				; exit routine



01b70a lda $1a85,x
01b70d clc
01b70e adc $1939
01b711 and #$01ff
01b714 sta $1a85,x
01b717 lda $1a87,x
01b71a clc
01b71b adc $193b
01b71e and #$01ff
01b721 sta $1a87,x
01b724 rts				; exit routine



01b73b lda $19ee
01b73e jsr $c588
01b741 rts				; exit routine



; {{ NO GAP }}



01b742 phb				; save databank to stack
01b743 lda $19ee
01b746 and #$00ff
01b749 asl a
01b74a tax
01b74b lda $06bd62,x
01b74f tax
01b750 php				; save processor status to stack
01b751 sep #$20			; set A => 8bit
01b753 rep #$10			; set X,Y => 16bit
01b755 pea $7f00
01b758 plb
01b759 plb
01b75a phx
01b75b lda #$00
01b75d xba
01b75e lda $06bd78,x
01b762 cmp #$ff
01b764 beq $b793
01b766 tay
01b767 lda $06bd79,x
01b76b tax
01b76c lda $d0f4,x
01b76f sta $d0f4,y
01b772 php				; save processor status to stack
01b773 rep #$30			; set A,X,Y => 16bit
01b775 jsr $b797		; call routine "Shift X,Y left ($01:b797)"
01b778 lda $d174,x
01b77b sta $d174,y
01b77e jsr $b797		; call routine "Shift X,Y left ($01:b797)"
01b781 lda $cef4,x
01b784 sta $cef4,y
01b787 lda $cef6,x
01b78a sta $cef6,y
01b78d plp
01b78e plx
01b78f inx
01b790 inx
01b791 bra $b75a
01b793 plx
01b794 plp
01b795 plb
01b796 rts				; exit routine



; {{ NO GAP }}



; ROUTINE: Shift X,Y left ($01:b797)
;		shifts X and Y left one bit
; A's value is not preserved
01b797 tya				; copy Y => A
01b798 asl a			; shift A left one bit
01b799 tay				; copy A => Y
01b79a txa				; copy X => A
01b79b asl a			; shift A left one bit
01b79c tax				; copy A => X
01b79d rts				; exit routine



; MISSING: $01b79e-$01b7ab ($D bytes)



01b7ac lda $19ee
01b7af and #$00ff
01b7b2 asl a
01b7b3 tax
01b7b4 jsr ($b7b8,x)
01b7b7 rts				; exit routine



01b8c5 php				; save processor status to stack
01b8c6 sep #$20			; set A => 8bit
01b8c8 rep #$10			; set X,Y => 16bit
01b8ca lda #$80
01b8cc sta $050b
01b8cf lda #$81
01b8d1 sta $050a
01b8d4 lda #$14
01b8d6 jsr $d6bc
01b8d9 plp				; restore processor status from stack
01b8da rts				; exit routine



; {{ NO GAP }}



01b9c0 sep #$20			; set A => 8bit
01b9c2 rep #$10			; set X,Y => 16bit
01b9c4 jsr $d11f
01b9c7 bcc $b9e9
01b9c9 stz $192b
01b9cc ldy #$000c
01b9cf jsr $b9fd
01b9d2 lda #$01
01b9d4 sta $192b
01b9d7 ldy #$0004
01b9da jsr $b9fd
01b9dd jsr $b9ea
01b9e0 ldx #$4420
01b9e3 stx $19ee
01b9e6 jsr $bc1a
01b9e9 rts				; exit routine



; {{ NO GAP }}



01b9ea ldx $1935
01b9ed lda $1938
01b9f0 sta $1a72,x
01b9f3 ldx $1939
01b9f6 lda $193c
01b9f9 sta $1a72,x
01b9fc rts				; exit routine



; {{ NO GAP }}



01b9fd phy
01b9fe ldx $1935
01ba01 lda #$10
01ba03 sta $1a72,x
01ba06 sta $193d
01ba09 lda $1a80,x
01ba0c and #$cf
01ba0e sta $1a80,x
01ba11 lda $192b
01ba14 asl a
01ba15 asl a
01ba16 asl a
01ba17 asl a
01ba18 ora $1a80,x
01ba1b sta $1a80,x
01ba1e jsr $cc81
01ba21 ldx $1939
01ba24 lda $192b
01ba27 ora #$90
01ba29 sta $1a72,x
01ba2c sta $193e
01ba2f jsr $cc81
01ba32 ply
01ba33 ldx $1935
01ba36 jsr $ba3a
01ba39 rts				; exit routine



; {{ NO GAP }}



01ba3a phy
01ba3b inc $19f7
01ba3e phx
01ba3f php				; save processor status to stack
01ba40 jsr $caec
01ba43 jsr $82cf
01ba46 plp
01ba47 plx
01ba48 lda $1a72,x
01ba4b bne $ba3e
01ba4d ply
01ba4e dey
01ba4f beq $ba6f
01ba51 phy
01ba52 ldx $1935
01ba55 lda $193d
01ba58 sta $1a72,x
01ba5b jsr $cc81
01ba5e ldx $1939
01ba61 lda $193e
01ba64 sta $1a72,x
01ba67 jsr $cc81
01ba6a inc $19f7
01ba6d bra $ba3e
01ba6f rts				; exit routine



; {{ NO GAP }}



01ba70 sep #$20			; set A => 8bit
01ba72 rep #$10			; set X,Y => 16bit
01ba74 jsr $d11f
01ba77 bcc $ba90
01ba79 lda #$01
01ba7b sta $192b
01ba7e ldy #$0003
01ba81 jsr $b9fd
01ba84 stz $192b
01ba87 ldy #$0002
01ba8a jsr $b9fd
01ba8d jsr $b9ea
01ba90 rts				; exit routine



; {{ NO GAP }}



01ba91 lda #$0f08
01ba94 sta $0501
01ba97 php				; save processor status to stack
01ba98 sep #$20			; set A => 8bit
01ba9a rep #$10			; set X,Y => 16bit
01ba9c lda $19ee
01ba9f and #$1f
01baa1 sta $0500
01baa4 plp
01baa5 rts				; exit routine



; {{ NO GAP }}



01baa6 lda $19ee
01baa9 and #$00ff
01baac phx
01baad php				; save processor status to stack
01baae sep #$20			; set A => 8bit
01bab0 rep #$10			; set X,Y => 16bit
01bab2 ldx #$880f
01bab5 stx $0506
01bab8 sta $0505
01babb plp
01babc plx
01babd rts				; exit routine



01bac9 php				; save processor status to stack
01baca sep #$20			; set A => 8bit
01bacc rep #$10			; set X,Y => 16bit
01bace lda $19ee
01bad1 sta $0e88
01bad4 plp				; restore processor status from stack
01bad5 rts				; exit routine



; {{ NO GAP }}



01bad6 sep #$20			; set A => 8bit
01bad8 rep #$10			; set X,Y => 16bit
01bada lda #$22
01badc sta $19ef
01badf jsr $b73b
01bae2 jsr $c6a0
01bae5 rts				; exit routine



01bb68 lda $19ef
01bb6b and #$00ff
01bb6e sec
01bb6f sbc #$0040
01bb72 asl a
01bb73 tax
01bb74 jmp ($bb77,x)
01bb95 sep #$20			; set A => 8bit
01bb97 rep #$10			; set X,Y => 16bit
01bb99 jsr $cf9d
01bb9c bcc $bbf2
01bb9e lda $1a72,x
01bba1 pha
01bba2 lda #$10
01bba4 sta $1a72,x
01bba7 lda $1a80,x
01bbaa and #$cf
01bbac sta $1a80,x
01bbaf lda $19ef
01bbb2 and #$03
01bbb4 sta $192b
01bbb7 asl a
01bbb8 asl a
01bbb9 asl a
01bbba asl a
01bbbb ora $1a80,x
01bbbe sta $1a80,x
01bbc1 jsr $cc81
01bbc4 lda #$00
01bbc6 xba
01bbc7 lda $19ee
01bbca lsr a
01bbcb lsr a
01bbcc lsr a
01bbcd lsr a
01bbce tay
01bbcf phy
01bbd0 phx
01bbd1 php				; save processor status to stack
01bbd2 jsr $caec
01bbd5 jsr $82cf
01bbd8 plp
01bbd9 plx
01bbda lda $1a72,x
01bbdd bne $bbd0
01bbdf ply
01bbe0 dey
01bbe1 beq $bbee
01bbe3 phy
01bbe4 lda #$10
01bbe6 sta $1a72,x
01bbe9 jsr $cc81
01bbec bra $bbd0
01bbee pla
01bbef sta $1a72,x
01bbf2 rts				; exit routine



01bbf3 lda $19ee
01bbf6 and #$00f0
01bbf9 lsr a
01bbfa lsr a
01bbfb lsr a
01bbfc tax
01bbfd jmp ($bc00,x)
01bc1a sep #$20			; set A => 8bit
01bc1c rep #$10			; set X,Y => 16bit
01bc1e jsr $cf9d
01bc21 bcc $bc33
01bc23 sta $192b
01bc26 lda $19ee
01bc29 lsr a
01bc2a lsr a
01bc2b lsr a
01bc2c lsr a
01bc2d sta $192c
01bc30 jsr $8ae4
01bc33 rts				; exit routine



01bc34 php				; save processor status to stack
01bc35 sep #$20			; set A => 8bit
01bc37 rep #$10			; set X,Y => 16bit
01bc39 jsr $cf9d
01bc3c bcc $bc67
01bc3e sta $19e7
01bc41 plp
01bc42 lda $19ee
01bc45 lsr a
01bc46 lsr a
01bc47 lsr a
01bc48 lsr a
01bc49 and #$0003
01bc4c clc
01bc4d adc #$0036
01bc50 jsr $cace
01bc53 jsr $82cf
01bc56 lda #$002d
01bc59 jsr $d6a8
01bc5c lda $19ee
01bc5f and #$ff3f
01bc62 sta $19ee
01bc65 bra $bc1a
01bc68 php
01bc69 sep #$20
01bc6b rep #$10
01bc6d jsr $cf9d
01bc70 bcc $bcda
01bc72 phx
01bc73 pha
01bc74 ldy #$0000
01bc77 phy
01bc78 lda $19ee
01bc7b and #$0f
01bc7d sta $19ee
01bc80 tya
01bc81 and #$03
01bc83 asl a
01bc84 asl a
01bc85 asl a
01bc86 asl a
01bc87 ora $19ee
01bc8a sta $19ee
01bc8d jsr $bc1a
01bc90 lda #$03
01bc92 jsr $d6a8
01bc95 ply
01bc96 iny
01bc97 cpy #$0009
01bc9a bne $bc77
01bc9c pla
01bc9d xba
01bc9e lda #$00
01bca0 xba
01bca1 asl a
01bca2 asl a
01bca3 tax
01bca4 ldy $a639,x
01bca7 plx
01bca8 plp
01bca9 lda $1a73,x
01bcac and #$3e00
01bcaf sta $1a73,x
01bcb2 lda $1a83,x
01bcb5 clc
01bcb6 adc #$001c
01bcb9 ora $1a73,x
01bcbc sta $1a73,x
01bcbf sta $0c02,y
01bcc2 inc
01bcc3 sta $1a75,x
01bcc6 sta $0c06,y
01bcc9 inc
01bcca sta $1a77,x
01bccd sta $0c0a,y
01bcd0 inc
01bcd1 sta $1a79,x
01bcd4 sta $0c0e,y
01bcd7 jsr $82d8
01bcda rts
01bd9d lda $19ee
01bda0 and #$00f0
01bda3 lsr a
01bda4 lsr a
01bda5 lsr a
01bda6 tax
01bda7 jmp ($bdaa,x)
01bdc8 jsr $c456
01bdcb bcc $bdd0
01bdcd jsr $c49e
01bdd0 rts				; exit routine



01be67 lda $19ee
01be6a and #$00f0
01be6d lsr a
01be6e lsr a
01be6f lsr a
01be70 tax
01be71 jmp ($be74,x)
01beb1 sep #$20			; set A => 8bit
01beb3 rep #$10			; set X,Y => 16bit
01beb5 jsr $b168
01beb8 rts				; exit routine



01beb9 sep #$20			; set A => 8bit
01bebb rep #$10			; set X,Y => 16bit
01bebd jsr $b1ad
01bec0 rts				; exit routine



01bec1 sep #$20			; set A => 8bit
01bec3 rep #$10			; set X,Y => 16bit
01bec5 jsr $b168
01bec8 lda $19ee
01becb and #$0f
01becd jsr $cf5d
01bed0 lda #$00
01bed2 sta $0c00,y
01bed5 lda #$02
01bed7 sta $1a72,x
01beda rts				; exit routine



01bedb sep #$20			; set A => 8bit
01bedd rep #$10			; set X,Y => 16bit
01bedf lda $19ee
01bee2 and #$0f
01bee4 jsr $cf5d
01bee7 jsr $b1ad
01beea rts				; exit routine



01bf55 sep #$20			; set A => 8bit
01bf57 rep #$10			; set X,Y => 16bit
01bf59 jsr $cf9d
01bf5c bcc $bfa4
01bf5e lda $1a72,x
01bf61 pha
01bf62 lda $19ef
01bf65 inc
01bf66 and #$03
01bf68 sta $192b
01bf6b ora #$90
01bf6d sta $1a72,x
01bf70 jsr $cc81
01bf73 lda #$00
01bf75 xba
01bf76 lda $19ee
01bf79 lsr a
01bf7a lsr a
01bf7b lsr a
01bf7c lsr a
01bf7d tay
01bf7e phy
01bf7f phx
01bf80 php				; save processor status to stack
01bf81 jsr $caec
01bf84 jsr $82cf
01bf87 plp
01bf88 plx
01bf89 lda $1a72,x
01bf8c bne $bf7f
01bf8e ply
01bf8f dey
01bf90 beq $bfa0
01bfa0 pla
01bfa1 sta $1a72,x
01bfa4 rts				; exit routine



01c002 lda $19ef
01c005 and #$00ff
01c008 sec
01c009 sbc #$0050
01c00c asl a
01c00d tax
01c00e jmp ($c011,x)
01c02f sep #$20			; set A => 8bit
01c031 rep #$10			; set X,Y => 16bit
01c033 lda #$10
01c035 sta $1993
01c038 lda $19ef
01c03b and #$03
01c03d sta $0e8b
01c040 sta $19d7
01c043 lda #$40
01c045 sta $1929
01c048 lda #$01
01c04a sta $1928
01c04d lda #$01
01c04f sta $192a
01c052 sta $19f7
01c055 lda #$00
01c057 xba
01c058 lda $19ee
01c05b lsr a
01c05c lsr a
01c05d lsr a
01c05e lsr a
01c05f tay
01c060 phy
01c061 jsr $c072
01c064 jsr $935c
01c067 ply
01c068 dey
01c069 bne $c060
01c06b stz $1929
01c06e stz $192a
01c071 rts				; exit routine



01c072 php				; save processor status to stack
01c073 sep #$20			; set A => 8bit
01c075 rep #$10			; set X,Y => 16bit
01c077 stz $0e8d
01c07a jsr $f211
01c07d ldx $19cf
01c080 stx $19cb
01c083 lda $19d5
01c086 sta $19d3
01c089 lda $19cb
01c08c and #$07
01c08e sta $192b
01c091 lda $19b4
01c094 and #$07
01c096 cmp $192b
01c099 beq $c0a9
01c0a9 lda $19cb
01c0ac jsr $885f
01c0af plp
01c0b0 rts				; exit routine



01c0b1 lda $19ee
01c0b4 and #$00ff
01c0b7 lsr a
01c0b8 lsr a
01c0b9 lsr a
01c0ba tax
01c0bb jmp ($c0be,x)
01c0dc sep #$20			; set A => 8bit
01c0de rep #$10			; set X,Y => 16bit
01c0e0 stz $1929
01c0e3 lda #$10
01c0e5 sta $1993
01c0e8 lda $19ee
01c0eb and #$f0
01c0ed lsr a
01c0ee lsr a
01c0ef lsr a
01c0f0 lsr a
01c0f1 sta $0e8b
01c0f4 jsr $94cc
01c0f7 rts				; exit routine



01c0f8 sep #$20			; set A => 8bit
01c0fa rep #$10			; set X,Y => 16bit
01c0fc lda $19ee
01c0ff and #$f0
01c101 lsr a
01c102 lsr a
01c103 lsr a
01c104 lsr a
01c105 and #$03
01c107 sta $0e8b
01c10a clc
01c10b adc #$0c
01c10d jsr $8caf
01c110 lda #$2d
01c112 jsr $d6a8
01c115 jsr $c44f
01c118 rts				; exit routine



01c128 lda #$0021
01c12b jsr $8caf
01c12e ldx $199d
01c131 stx $192d
01c134 ldx $199e
01c137 stx $192f
01c13a jsr $ca4a
01c13d lda $0e8b
01c140 and #$0003
01c143 asl a
01c144 jsr $8caf
01c147 rts				; exit routine



01c148 sep #$20			; set A => 8bit
01c14a rep #$10			; set X,Y => 16bit
01c14c lda #$10
01c14e sta $1993
01c151 lda $19ee
01c154 lsr a
01c155 lsr a
01c156 lsr a
01c157 lsr a
01c158 and #$01
01c15a clc
01c15b adc #$1d
01c15d jsr $8caf
01c160 lda #$2d
01c162 jsr $d6a8
01c165 jsr $c44f
01c168 rts				; exit routine



01c1a9 sep #$20			; set A => 8bit
01c1ab rep #$10			; set X,Y => 16bit
01c1ad lda #$02
01c1af sta $1926
01c1b2 sta $1927
01c1b5 ldx $19cb
01c1b8 stx $19cf
01c1bb stx $19d1
01c1be lda $19ee
01c1c1 and #$03
01c1c3 sta $0e8b
01c1c6 sta $19d7
01c1c9 ldy $0e89
01c1cc jsr $cec9
01c1cf ldx $19f1
01c1d2 stx $0e89
01c1d5 jsr $cec9
01c1d8 ldx $19f1
01c1db stx $19f3
01c1de ldx $0e89
01c1e1 stx $19f1
01c1e4 sty $0e89
01c1e7 lda #$01
01c1e9 sta $192a
01c1ec jsr $9cf2
01c1ef stz $192a
01c1f2 rts				; exit routine



01c1f3 lda $19ee
01c1f6 and #$00f0
01c1f9 lsr a
01c1fa lsr a
01c1fb lsr a
01c1fc tax
01c1fd jmp ($c200,x)
01c21e jsr $c487
01c221 jsr $c49e
01c224 rts				; exit routine



01c225 jsr $c487
01c228 jsr $c4d1
01c22b rts				; exit routine



01c240 sep #$20			; set A => 8bit
01c242 rep #$10			; set X,Y => 16bit
01c244 lda #$10
01c246 sta $1993
01c249 ldy #$0004
01c24c phy
01c24d lda $0e8b
01c250 inc
01c251 and #$03
01c253 sta $0e8b
01c256 jsr $94cc
01c259 lda #$04
01c25b jsr $d6a8
01c25e ply
01c25f dey
01c260 bne $c24c
01c262 rts				; exit routine



01c263 sep #$20			; set A => 8bit
01c265 rep #$10			; set X,Y => 16bit
01c267 ldy #$000c
01c26a phy
01c26b dec $199e
01c26e dec $199e
01c271 dec $19a0
01c274 dec $19a0
01c277 dec $19a2
01c27a dec $19a2
01c27d dec $19a4
01c280 dec $19a4
01c283 jsr $c44f
01c286 jsr $82d8
01c289 ply
01c28a dey
01c28b bne $c26a
01c28d jsr $c240
01c290 ldy #$000c
01c293 phy
01c294 inc $199e
01c297 inc $199e
01c29a inc $19a0
01c29d inc $19a0
01c2a0 inc $19a2
01c2a3 inc $19a2
01c2a6 inc $19a4
01c2a9 inc $19a4
01c2ac jsr $c44f
01c2af jsr $82d8
01c2b2 ply
01c2b3 dey
01c2b4 bne $c293
01c2b6 rts				; exit routine



01c2b7 lda $19ee
01c2ba and #$00f0
01c2bd lsr a
01c2be lsr a
01c2bf lsr a
01c2c0 tax
01c2c1 jmp ($c2c4,x)
01c306 lda #$00f5
01c309 jsl $009760
01c30d sep #$20			; set A => 8bit
01c30f rep #$10			; set X,Y => 16bit
01c311 jsr $c44f
01c314 rts				; exit routine



01c315 lda #$00f5
01c318 jsl $00976b
01c31c sep #$20			; set A => 8bit
01c31e rep #$10			; set X,Y => 16bit
01c320 lda $19b4
01c323 and #$7f
01c325 sta $19b4
01c328 jsr $c44f
01c32b rts				; exit routine



01c346 sep #$20			; set A => 8bit
01c348 rep #$10			; set X,Y => 16bit
01c34a lda #$10
01c34c sta $1993
01c34f lda $19ef
01c352 inc
01c353 and #$03
01c355 sta $19d7
01c358 lda #$40
01c35a sta $1929
01c35d lda #$01
01c35f sta $1928
01c362 jmp $c04d
01c388 sep #$20			; set A => 8bit
01c38a rep #$10			; set X,Y => 16bit
01c38c lda #$00
01c38e xba
01c38f lda $19ee
01c392 asl a
01c393 tax
01c394 jsr ($c398,x)
01c397 rts				; exit routine



01c409 php				; save processor status to stack
01c40a rep #$30			; set A,X,Y => 16bit
01c40c phb				; save databank to stack
01c40d ldx #$0ffc
01c410 ldy #$0fff
01c413 lda #$0014
01c416 mvp $00,$00
01c419 plb
01c41a sep #$20			; set A => 8bit
01c41c rep #$10			; set X,Y => 16bit
01c41e lda $0e91
01c421 sta $0fe8
01c424 ldx $0e89
01c427 stx $0fe9
01c42a plp
01c42b rts				; exit routine



01c42c php				; save processor status to stack
01c42d sep #$20			; set A => 8bit
01c42f rep #$10			; set X,Y => 16bit
01c431 lda $0fe8
01c434 sta $19f0
01c437 ldx $0fe9
01c43a stx $19f1
01c43d rep #$30			; set A,X,Y => 16bit
01c43f phb				; save databank to stack
01c440 ldx #$0feb
01c443 ldy #$0fe8
01c446 lda #$0014
01c449 mvn $00,$00
01c44c plb
01c44d plp
01c44e rts				; exit routine



01c44f lda $0e8b
01c452 asl a
01c453 jmp $8caf
01c456 sep #$20			; set A => 8bit
01c458 rep #$10			; set X,Y => 16bit
01c45a lda $19ee
01c45d and #$0f
01c45f jsr $b1ea
01c462 bcc $c486
01c464 lda $1a86,x
01c467 ora $1a88,x
01c46a bne $c486
01c46c lda $1a85,x
01c46f sta $192d
01c472 lda $1a87,x
01c475 sta $192e
01c478 lda $19ee
01c47b and #$30
01c47d lsr a
01c47e lsr a
01c47f lsr a
01c480 lsr a
01c481 sta $192b
01c484 sec
01c485 rts				; exit routine



01c487 sep #$20			; set A => 8bit
01c489 rep #$10			; set X,Y => 16bit
01c48b ldx $199d
01c48e stx $192d
01c491 lda $19ee
01c494 and #$30
01c496 lsr a
01c497 lsr a
01c498 lsr a
01c499 lsr a
01c49a sta $192b
01c49d rts				; exit routine



01c49e lda #$3e
01c4a0 sta $0c52
01c4a3 sta $0c56
01c4a6 inc
01c4a7 sta $0c5a
01c4aa sta $0c5e
01c4ad lda #$0c
01c4af ora $1a54
01c4b2 sta $0c53
01c4b5 sta $0c5b
01c4b8 ora #$40
01c4ba sta $0c57
01c4bd sta $0c5f
01c4c0 jsr $c541
01c4c3 stz $0e05
01c4c6 lda #$2d
01c4c8 jsr $d6a8
01c4cb lda #$55
01c4cd sta $0e05
01c4d0 rts				; exit routine



01c4d1 lda #$4c
01c4d3 sta $0c52
01c4d6 inc
01c4d7 sta $0c56
01c4da inc
01c4db sta $0c5a
01c4de inc
01c4df sta $0c5e
01c4e2 lda #$0c
01c4e4 ora $1a54
01c4e7 sta $0c53
01c4ea sta $0c5b
01c4ed sta $0c57
01c4f0 sta $0c5f
01c4f3 bra $c4c0
01c541 lda #$00
01c543 xba
01c544 lda $192b
01c547 asl a
01c548 tax
01c549 lda $192d
01c54c clc
01c54d adc $c580,x
01c550 sta $192d
01c553 lda $192e
01c556 clc
01c557 adc $c581,x
01c55a sta $192e
01c55d php				; save processor status to stack
01c55e rep #$30			; set A,X,Y => 16bit
01c560 lda $192d
01c563 sta $0c50
01c566 clc
01c567 adc #$0008
01c56a sta $0c54
01c56d clc
01c56e adc #$0800
01c571 sta $0c5c
01c574 lda $192d
01c577 clc
01c578 adc #$0800
01c57b sta $0c58
01c57e plp
01c57f rts				; exit routine



01c588 php				; save processor status to stack
01c589 phb				; save databank to stack
01c58a rep #$30			; set A,X,Y => 16bit
01c58c and #$00ff
01c58f asl a
01c590 tax
01c591 lda $06b93a,x
01c595 tax
01c596 phx
01c597 sep #$20			; set A => 8bit
01c599 rep #$10			; set X,Y => 16bit
01c59b stz $1930
01c59e lda $06ba0f,x
01c5a2 sta $1936
01c5a5 sta $4202
01c5a8 lda $1924
01c5ab sta $192f
01c5ae sta $4203
01c5b1 lda #$00
01c5b3 xba
01c5b4 lda $06ba0e,x
01c5b8 sta $1935
01c5bb php				; save processor status to stack
01c5bc rep #$30			; set A,X,Y => 16bit
01c5be clc
01c5bf adc $4216
01c5c2 tay
01c5c3 plp
01c5c4 pea $007f
01c5c7 plb
01c5c8 pla
01c5c9 lda $06ba10,x
01c5cd pha
01c5ce and #$0f
01c5d0 sta $00192c
01c5d4 pla
01c5d5 lsr a
01c5d6 lsr a
01c5d7 lsr a
01c5d8 lsr a
01c5d9 sta $00192b
01c5dd inx
01c5de inx
01c5df inx
01c5e0 lda $00192b
01c5e4 sta $00192d
01c5e8 phy
01c5e9 lda $06ba0e,x
01c5ed inx
01c5ee sta $8000,y
01c5f1 iny
01c5f2 lda $00192d
01c5f6 dec
01c5f7 sta $00192d
01c5fb bne $c5e9
01c5fd ply
01c5fe php				; save processor status to stack
01c5ff rep #$30			; set A,X,Y => 16bit
01c601 tya
01c602 clc
01c603 adc $00192f
01c607 tay
01c608 plp
01c609 lda $00192c
01c60d dec
01c60e sta $00192c
01c612 bne $c5e0
01c614 plx
01c615 plb
01c616 plp
01c617 rts				; exit routine



01c618 php				; save processor status to stack
01c619 phb				; save databank to stack
01c61a sep #$20			; set A => 8bit
01c61c rep #$10			; set X,Y => 16bit
01c61e pea $0006
01c621 plb
01c622 pla
01c623 ldy #$0000
01c626 lda $b800,y
01c629 cmp $0e91
01c62c beq $c638
01c62e cmp #$ff
01c630 beq $c658
01c632 iny
01c633 iny
01c634 iny
01c635 iny
01c636 bra $c626
01c638 ldx $b801,y
01c63b cpx $19f1
01c63e bne $c632
01c640 tya
01c641 lsr a
01c642 lsr a
01c643 sta $19ee
01c646 jsr $c71e
01c649 lda $b803,y
01c64c sta $19ee
01c64f lda #$22
01c651 sta $19ef
01c654 plb
01c655 plp
01c656 clc
01c657 rts				; exit routine



01c65c php				; save processor status to stack
01c65d phb				; save databank to stack
01c65e sep #$20			; set A => 8bit
01c660 rep #$10			; set X,Y => 16bit
01c662 pea $0006
01c665 plb
01c666 pla
01c667 ldy #$0000
01c66a lda $b8cd,y
01c66d cmp $0e91
01c670 beq $c67c
01c672 cmp #$ff
01c674 beq $c69c
01c676 iny
01c677 iny
01c678 iny
01c679 iny
01c67a bra $c66a
01c67c ldx $b8ce,y
01c67f cpx $19f1
01c682 bne $c676
01c684 tya
01c685 lsr a
01c686 lsr a
01c687 sta $19ee
01c68a jsr $c71e
01c68d lda $b8d0,y
01c690 sta $19ee
01c693 lda #$22
01c695 sta $19ef
01c698 plb
01c699 plp
01c69a clc
01c69b rts				; exit routine



01c6a0 php				; save processor status to stack
01c6a1 phb				; save databank to stack
01c6a2 phx
01c6a3 sep #$20			; set A => 8bit
01c6a5 rep #$10			; set X,Y => 16bit
01c6a7 ldx $0e89
01c6aa stx $19f1
01c6ad jsr $9057
01c6b0 ldx $19bd
01c6b3 stx $19c1
01c6b6 ldx $19bf
01c6b9 stx $19c3
01c6bc ldy #$000a
01c6bf phy
01c6c0 ldx $19c1
01c6c3 stx $19bd
01c6c6 ldx $19c3
01c6c9 stx $19bf
01c6cc ldx $19f1
01c6cf stx $192d
01c6d2 tyx
01c6d3 lda $192e
01c6d6 clc
01c6d7 adc $01c713,x
01c6db sta $192e
01c6de lda $192d
01c6e1 sec
01c6e2 sbc #$08
01c6e4 sta $192d
01c6e7 lda $19bf
01c6ea clc
01c6eb adc #$05
01c6ed clc
01c6ee adc $01c713,x
01c6f2 and #$0f
01c6f4 sta $19bf
01c6f7 jsr $f977
01c6fa stx $0e89
01c6fd lda #$02
01c6ff sta $1a46
01c702 jsr $8df2
01c705 ply
01c706 dey
01c707 bpl $c6bf
01c709 ldx $19f1
01c70c stx $0e89
01c70f plx
01c710 plb
01c711 plp
01c712 rts				; exit routine



01c71e php				; save processor status to stack
01c71f phx
01c720 sep #$20			; set A => 8bit
01c722 rep #$10			; set X,Y => 16bit
01c724 lda $19ef
01c727 cmp #$0d
01c729 beq $c732
01c72b cmp #$0f
01c72d beq $c741
01c72f plx
01c730 plp
01c731 rts				; exit routine



01c732 lda $19ee
01c735 phd				; save direct page to stack
01c736 pea $0f48
01c739 pld
01c73a jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
01c73e pld
01c73f bra $c72f
01c741 lda $19ee
01c744 phd				; save direct page to stack
01c745 pea $0f68
01c748 pld
01c749 jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
01c74d pld
01c74e bra $c72f
01c750 php				; save processor status to stack
01c751 sep #$20			; set A => 8bit
01c753 rep #$10			; set X,Y => 16bit
01c755 lda #$ff
01c757 sta $192b
01c75a ldy #$0100
01c75d lda $192b
01c760 phd				; save direct page to stack
01c761 pea $0f48
01c764 pld
01c765 jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
01c769 pld
01c76a inc
01c76b dec
01c76c beq $c793
01c76e php				; save processor status to stack
01c76f rep #$30			; set A,X,Y => 16bit
01c771 lda $192b
01c774 and #$00ff
01c777 asl a
01c778 asl a
01c779 tax
01c77a plp
01c77b lda $06b800,x
01c77f cmp $0e91
01c782 bne $c793
01c784 lda $06b803,x
01c788 sta $19ee
01c78b lda #$22
01c78d sta $19ef
01c790 jsr $c7ec
01c793 dec $192b
01c796 dey
01c797 bne $c75d
01c799 lda #$7f
01c79b sta $192b
01c79e ldy #$0080
01c7a1 lda $192b
01c7a4 phd				; save direct page to stack
01c7a5 pea $0f68
01c7a8 pld
01c7a9 jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
01c7ad pld
01c7ae inc
01c7af dec
01c7b0 beq $c7e4
01c7b2 php				; save processor status to stack
01c7b3 rep #$30			; set A,X,Y => 16bit
01c7b5 lda $192b
01c7b8 and #$00ff
01c7bb asl a
01c7bc asl a
01c7bd tax
01c7be plp
01c7bf lda $06b8cd,x
01c7c3 cmp $0e91
01c7c6 bne $c7e4
01c7e4 dec $192b
01c7e7 dey
01c7e8 bne $c7a1
01c7ea plp
01c7eb rts				; exit routine



01c7ec php				; save processor status to stack
01c7ed phx
01c7ee phy
01c7ef phb				; save databank to stack
01c7f0 ldx $192b
01c7f3 phx
01c7f4 lda $19ee
01c7f7 cmp #$f0
01c7f9 beq $c80f
01c7fb cmp #$f1
01c7fd beq $c814
01c7ff phy
01c800 php				; save processor status to stack
01c801 jsr $b73b
01c804 plp
01c805 ply
01c806 plx
01c807 stx $192b
01c80a plb
01c80b ply
01c80c plx
01c80d plp
01c80e rts				; exit routine



01c80f ldx #$b8ad
01c812 bra $c817
01c814 ldx #$b8b9
01c817 pea $0006
01c81a plb
01c81b pla
01c81c lda $0000,x
01c81f cmp #$ff
01c821 beq $c806
01c823 sta $19ee
01c826 lda #$22
01c828 sta $19ef
01c82b phx
01c82c php				; save processor status to stack
01c82d phb				; save databank to stack
01c82e phk
01c82f plb
01c830 jsr $b73b
01c833 plb
01c834 plp
01c835 plx
01c836 inx
01c837 bra $c81c
01c839 lda #$00
01c83b xba
01c83c lda $0e91
01c83f tax
01c840 lda $06be77,x
01c844 bmi $c882
01c846 asl a
01c847 tax
01c848 php				; save processor status to stack
01c849 rep #$30			; set A,X,Y => 16bit
01c84b lda $06bee3,x
01c84f tax
01c850 plp
01c851 lda $06bf15,x
01c855 cmp #$ff
01c857 beq $c882
01c859 jsl $009776
01c85d beq $c87d
01c85f lda $06bf16,x
01c863 sta $19ee
01c866 lda $06bf17,x
01c86a sta $19ef
01c86d cmp #$24
01c86f beq $c883
01c871 cmp #$28
01c873 beq $c88b
01c875 ldy $19ee
01c878 cpy #$2500
01c87b beq $c8a2
01c87d inx
01c87e inx
01c87f inx
01c880 bra $c851
01c882 rts				; exit routine



01c883 lda $19ee
01c886 sta $1919
01c889 bra $c87d
01c88b lda $19ee
01c88e asl a
01c88f asl a
01c890 asl a
01c891 asl a
01c892 sta $19ee
01c895 lda $1913
01c898 and #$0f
01c89a ora $19ee
01c89d sta $1913
01c8a0 bra $c87d
01c8a8 lda #$00
01c8aa sta $19f6
01c8ad xba
01c8ae lda $0e91
01c8b1 tax
01c8b2 lda $06be77,x
01c8b6 bmi $c8f2
01c8b8 asl a
01c8b9 tax
01c8ba php				; save processor status to stack
01c8bb rep #$30			; set A,X,Y => 16bit
01c8bd lda $06bee3,x
01c8c1 tax
01c8c2 plp
01c8c3 lda $06bf15,x
01c8c7 cmp #$ff
01c8c9 beq $c8f2
01c8cb jsl $009776
01c8cf beq $c8ed
01c8d1 lda $06bf16,x
01c8d5 sta $19ee
01c8d8 lda $06bf17,x
01c8dc sta $19ef
01c8df cmp #$24
01c8e1 beq $c8ed
01c8e3 cmp #$28
01c8e5 beq $c8ed
01c8e7 phx
01c8e8 jsl $01b24b
01c8ec plx
01c8ed inx
01c8ee inx
01c8ef inx
01c8f0 bra $c8c3
01c8f2 rts				; exit routine



01c95e php				; save processor status to stack
01c95f sep #$20			; set A => 8bit
01c961 rep #$10			; set X,Y => 16bit
01c963 lda #$01
01c965 sta $194b
01c968 stz $1951
01c96b inc $19d3
01c96e ldx $0e89
01c971 stx $192d
01c974 jsr $880b
01c977 lda #$00
01c979 xba
01c97a lda $7f8000,x
01c97e inc
01c97f sta $7f8000,x
01c983 and #$7f
01c985 tax
01c986 lda $7fd0f4,x
01c98a sta $19c9
01c98d php				; save processor status to stack
01c98e rep #$30			; set A,X,Y => 16bit
01c990 txa
01c991 asl a
01c992 asl a
01c993 tax
01c994 lda $7fcef4,x
01c998 sta $19c5
01c99b lda $7fcef6,x
01c99f sta $19c7
01c9a2 jsr $96d2
01c9a5 jsr $9057
01c9a8 lda $19bd
01c9ab clc
01c9ac adc #$0008
01c9af and #$001f
01c9b2 sta $19bd
01c9b5 lda $19bf
01c9b8 clc
01c9b9 adc #$0004
01c9bc and #$000f
01c9bf sta $19bf
01c9c2 jsr $88cc
01c9c5 plp
01c9c6 ldx $192b
01c9c9 stx $195f
01c9cc jsr $82cf
01c9cf plp
01c9d0 rts				; exit routine



01ca4a php				; save processor status to stack
01ca4b sep #$20			; set A => 8bit
01ca4d rep #$10			; set X,Y => 16bit
01ca4f lda #$0e
01ca51 ora $1a54
01ca54 sta $0c57
01ca57 ora #$40
01ca59 sta $0c53
01ca5c lda #$68
01ca5e sta $0c52
01ca61 sta $0c56
01ca64 lda $192d
01ca67 sec
01ca68 sbc #$08
01ca6a sta $0c50
01ca6d clc
01ca6e adc #$18
01ca70 sta $0c54
01ca73 lda $192e
01ca76 clc
01ca77 adc #$08
01ca79 sta $0c51
01ca7c sta $0c55
01ca7f lda #$50
01ca81 sta $0e05
01ca84 jsr $82cf
01ca87 lda #$2c
01ca89 jsr $d6a8
01ca8c lda $0c51
01ca8f dec
01ca90 sta $0c51
01ca93 sta $0c55
01ca96 jsr $82cf
01ca99 lda #$2c
01ca9b jsr $d6a8
01ca9e lda $0c51
01caa1 inc
01caa2 sta $0c51
01caa5 sta $0c55
01caa8 jsr $82cf
01caab lda #$2c
01caad jsr $d6a8
01cab0 lda #$55
01cab2 sta $0e05
01cab5 plp
01cab6 rts				; exit routine



01cace php				; save processor status to stack
01cacf phx
01cad0 phy
01cad1 rep #$30			; set A,X,Y => 16bit
01cad3 phx
01cad4 and #$00ff
01cad7 asl a
01cad8 tax
01cad9 lda $00fdcf,x
01cadd tay
01cade plx
01cadf jsr $ae89
01cae2 lda $19e7
01cae5 jsr $b118
01cae8 ply
01cae9 plx
01caea plp
01caeb rts				; exit routine



01caec php				; save processor status to stack
01caed phd				; save direct page to stack
01caee sep #$20			; set A => 8bit
01caf0 rep #$10			; set X,Y => 16bit
01caf2 pea $1a72
01caf5 pld
01caf6 ldx #$0000		; clear X
01caf9 stx $1975
01cafc stx $1973
01caff sep #$20			; set A => 8bit
01cb01 rep #$10			; set X,Y => 16bit
01cb03 ldx $1975
01cb06 lda $00,x
01cb08 bit #$10
01cb0a beq $cb36
01cb0c cmp #$ff
01cb0e beq $cb36
01cb10 jsr $cb52
01cb13 rep #$30			; set A,X,Y => 16bit
01cb15 phx
01cb16 lda $1973
01cb19 asl a
01cb1a asl a
01cb1b tax
01cb1c lda $01a639,x
01cb20 tay
01cb21 plx
01cb22 lda $01,x
01cb24 sta $0c02,y
01cb27 lda $03,x
01cb29 sta $0c06,y
01cb2c lda $05,x
01cb2e sta $0c0a,y
01cb31 lda $07,x
01cb33 sta $0c0e,y
01cb36 rep #$30			; set A,X,Y => 16bit
01cb38 inc $1973
01cb3b lda $1973
01cb3e cmp #$0016
01cb41 beq $cb4f
01cb43 lda $1975
01cb46 clc
01cb47 adc #$001a
01cb4a sta $1975
01cb4d bra $caff
01cb4f pld
01cb50 plp
01cb51 rts				; exit routine



01cb52 sep #$20			; set A => 8bit
01cb54 rep #$10			; set X,Y => 16bit
01cb56 lda $0e,x
01cb58 rol a
01cb59 rol a
01cb5a rol a
01cb5b and #$03
01cb5d sta $197d
01cb60 sta $197f
01cb63 cmp #$00
01cb65 bne $cb7e
01cb67 inc $197f
01cb6a lda $17,x
01cb6c pha
01cb6d lsr a
01cb6e sta $197e
01cb71 pla
01cb72 dec
01cb73 sta $17,x
01cb75 lsr a
01cb76 cmp $197e
01cb79 bne $cb7e
01cb7b jmp $cc80
01cb7e lda $0e,x
01cb80 lsr a
01cb81 lsr a
01cb82 lsr a
01cb83 lsr a
01cb84 and #$03
01cb86 sta $197e
01cb89 sta $1980
01cb8c lda $00,x
01cb8e bpl $cb95
01cb90 and #$03
01cb92 sta $197e
01cb95 lda #$00
01cb97 xba
01cb98 lda $10,x
01cb9a rep #$30			; set A,X,Y => 16bit
01cb9c asl a
01cb9d phx
01cb9e tax
01cb9f lda $00fdcf,x
01cba3 sta $1977
01cba6 plx
01cba7 sep #$20			; set A => 8bit
01cba9 rep #$10			; set X,Y => 16bit
01cbab lda $197d
01cbae bne $cbb5
01cbb0 lda $17,x
01cbb2 lsr a
01cbb3 bra $cbbf
01cbb5 lda $17,x
01cbb7 sec
01cbb8 sbc $197f
01cbbb sta $17,x
01cbbd lda $17,x
01cbbf and #$08
01cbc1 lsr a
01cbc2 lsr a
01cbc3 lsr a
01cbc4 sta $1979
01cbc7 lda $00,x
01cbc9 and #$b0
01cbcb cmp #$b0
01cbcd beq $cbf9
01cbcf lda $10,x
01cbd1 cmp #$3e
01cbd3 bne $cbda
01cbda lda $1980
01cbdd asl a
01cbde clc
01cbdf adc $1979
01cbe2 rep #$30			; set A,X,Y => 16bit
01cbe4 and #$00ff
01cbe7 asl a
01cbe8 asl a
01cbe9 asl a
01cbea clc
01cbeb adc $1977
01cbee sta $1977
01cbf1 tay
01cbf2 sep #$20			; set A => 8bit
01cbf4 rep #$10			; set X,Y => 16bit
01cbf6 jsr $ae89
01cbf9 sep #$20			; set A => 8bit
01cbfb rep #$10			; set X,Y => 16bit
01cbfd lda #$00
01cbff xba
01cc00 lda $197e
01cc03 asl a
01cc04 rep #$30			; set A,X,Y => 16bit
01cc06 and #$00ff
01cc09 phx
01cc0a tax
01cc0b lda $0190d4,x
01cc0f sta $1977
01cc12 plx
01cc13 sep #$20			; set A => 8bit
01cc15 rep #$10			; set X,Y => 16bit
01cc17 lda $197d
01cc1a cmp #$02
01cc1c bne $cc2c
01cc1e lda $1977
01cc21 asl a
01cc22 sta $1977
01cc25 lda $1978
01cc28 asl a
01cc29 sta $1978
01cc2c lda #$00
01cc2e xba
01cc2f lda $1977
01cc32 beq $cc4f
01cc34 bpl $cc42
01cc36 lda $197f
01cc39 eor #$ff
01cc3b inc
01cc3c xba
01cc3d lda #$ff
01cc3f xba
01cc40 bra $cc45
01cc42 lda $197f
01cc45 rep #$30			; set A,X,Y => 16bit
01cc47 clc
01cc48 adc $13,x
01cc4a and #$03ff
01cc4d sta $13,x
01cc4f sep #$20			; set A => 8bit
01cc51 rep #$10			; set X,Y => 16bit
01cc53 lda #$00
01cc55 xba
01cc56 lda $1978
01cc59 beq $cc76
01cc5b bpl $cc69
01cc5d lda $197f
01cc60 eor #$ff
01cc62 inc
01cc63 xba
01cc64 lda #$ff
01cc66 xba
01cc67 bra $cc6c
01cc69 lda $197f
01cc6c rep #$30			; set A,X,Y => 16bit
01cc6e clc
01cc6f adc $15,x
01cc71 and #$03ff
01cc74 sta $15,x
01cc76 sep #$20			; set A => 8bit
01cc78 rep #$10			; set X,Y => 16bit
01cc7a lda $17,x
01cc7c bpl $cc80
01cc7e stz $00,x
01cc80 rts				; exit routine



01cc81 php				; save processor status to stack
01cc82 phd				; save direct page to stack
01cc83 sep #$20			; set A => 8bit
01cc85 rep #$10			; set X,Y => 16bit
01cc87 pea $1a72
01cc8a pld
01cc8b lda $0e,x
01cc8d and #$c0
01cc8f bne $cc95
01cc91 lda #$1f
01cc93 bra $cc97
01cc95 lda #$0f
01cc97 sta $17,x
01cc99 lda $192b
01cc9c sta $1979
01cc9f sta $1981
01cca2 lda $0b,x
01cca4 sta $197f
01cca7 lda $0c,x
01cca9 sta $1980
01ccac phx
01ccad jsr $aee6
01ccb0 plx
01ccb1 lda $197f
01ccb4 sta $0b,x
01ccb6 lda $1980
01ccb9 sta $0c,x
01ccbb jsr $afef
01ccbe pld
01ccbf plp
01ccc0 rts				; exit routine



01cec9 lda #$00
01cecb xba
01cecc lda $19d7
01cecf asl a
01ced0 tax
01ced1 lda $90d4,x
01ced4 clc
01ced5 adc $0e89
01ced8 sta $19f1
01cedb lda $90d5,x
01cede clc
01cedf adc $0e8a
01cee2 sta $19f2
01cee5 rts				; exit routine



01cf5d php				; save processor status to stack
01cf5e sep #$20			; set A => 8bit
01cf60 rep #$10			; set X,Y => 16bit
01cf62 jsr $b1ea
01cf65 phx
01cf66 rep #$30			; set A,X,Y => 16bit
01cf68 and #$00ff
01cf6b asl a
01cf6c asl a
01cf6d tax
01cf6e ldy $a63b,x
01cf71 plx
01cf72 lda #$0008
01cf75 sta $1937
01cf78 sep #$20			; set A => 8bit
01cf7a rep #$10			; set X,Y => 16bit
01cf7c lda #$00
01cf7e sta $0c00,y
01cf81 lda #$02
01cf83 sta $1a72,x
01cf86 jsr $82cf
01cf89 lda #$55
01cf8b sta $0c00,y
01cf8e lda #$ff
01cf90 sta $1a72,x
01cf93 jsr $82cf
01cf96 dec $1937
01cf99 bne $cf7c
01cf9b plp
01cf9c rts				; exit routine



01cf9d lda $19ee
01cfa0 and #$0f
01cfa2 jsr $b1ea
01cfa5 rts				; exit routine



01d11f lda #$00
01d121 jsr $b1ea
01d124 bcc $d14c
01d126 stx $1935
01d129 sta $1937
01d12c lda $1a72,x
01d12f sta $1938
01d132 jsr $d14d
01d135 lda #$01
01d137 jsr $b1ea
01d13a bcc $d14c
01d13c stx $1939
01d13f sta $193b
01d142 lda $1a72,x
01d145 sta $1938
01d148 jsr $d14d
01d14b sec
01d14c rts				; exit routine



01d14d lda $1a80,x
01d150 and #$3f
01d152 ora #$80
01d154 sta $1a80,x
01d157 rts				; exit routine



01d6a8 phx
01d6a9 php				; save processor status to stack
01d6aa ldx #$0000		; clear X
01d6ad sep #$20			; set A => 8bit
01d6af rep #$10			; set X,Y => 16bit
01d6b1 pha
01d6b2 jsr ($d6ca,x)
01d6b5 pla
01d6b6 dec
01d6b7 bne $d6b1
01d6b9 plp
01d6ba plx
01d6bb rts				; exit routine



01d6bc phx
01d6bd php				; save processor status to stack
01d6be ldx #$0002
01d6c1 bra $d6ad



01d6d0 jsl $0096a0
01d6d4 rts				; exit routine



01d6d5 sep #$20			; set A => 8bit
01d6d7 rep #$10			; set X,Y => 16bit
01d6d9 lda #$03
01d6db sta $19e2
01d6de bra $d6e7
01d6e0 sep #$20
01d6e2 rep #$10
01d6e4 stz $19e2
01d6e7 lda $19e2
01d6ea jsr $b1ea
01d6ed stx $19ea
01d6f0 sta $19e7
01d6f3 lda $1a7d,x
01d6f6 sta $192d
01d6f9 lda $1a7e,x
01d6fc dec
01d6fd sta $192e
01d700 jsr $880b
01d703 lda $7f8000,x
01d707 inc
01d708 sta $7f8000,x
01d70c sta $19d6
01d70f lda #$01
01d711 sta $194b
01d714 stz $1951
01d717 lda $19c9
01d71a sta $19ca
01d71d lda #$00
01d71f xba
01d720 lda $19d6
01d723 tax
01d724 lda $7fd0f4,x
01d728 sta $19c9
01d72b php				; save processor status to stack
01d72c rep #$30			; set A,X,Y => 16bit
01d72e txa
01d72f asl a
01d730 asl a
01d731 tax
01d732 lda $7fcef4,x
01d736 sta $19c5
01d739 lda $7fcef6,x
01d73d sta $19c7
01d740 plp
01d741 jsr $96d2
01d744 jsr $9057
01d747 lda $19e2
01d74a bne $d76c
01d74c ldx #$0000
01d74f lda $19bd
01d752 inc
01d753 clc
01d754 adc $0196ca,x
01d758 and #$1f
01d75a sta $19bd
01d75d lda $19bf
01d760 clc
01d761 adc $0196cb,x
01d765 and #$0f
01d767 sta $19bf
01d76a bra $d78a
01d76c ldx #$0000		; clear X
01d76f lda $19bd
01d772 clc
01d773 adc $0196ca,x
01d777 and #$1f
01d779 sta $19bd
01d77c lda $19bf
01d77f dec
01d780 clc
01d781 adc $0196cb,x
01d785 and #$0f
01d787 sta $19bf
01d78a jsr $88cc
01d78d ldx $192b
01d790 stx $195f
01d793 rep #$30			; set A,X,Y => 16bit
01d795 lda $00f5ef
01d799 sta $194d
01d79c sep #$20			; set A => 8bit
01d79e rep #$10			; set X,Y => 16bit
01d7a0 ldx #$a11f
01d7a3 stx $0506
01d7a6 lda #$0a
01d7a8 sta $0505
01d7ab lda #$14
01d7ad sta $1926
01d7b0 lda $1926
01d7b3 cmp #$0f
01d7b5 bcs $d7bf
01d7b7 cmp #$05
01d7b9 bcs $d7c3
01d7bb lda #$39
01d7bd bra $d7c5
01d7bf lda #$37
01d7c1 bra $d7c5
01d7c3 lda #$36
01d7c5 ldx $19ea
01d7c8 jsr $cace
01d7cb bra $d7cd
01d7cd ldx $194d
01d7d0 lda $00f5f7,x
01d7d4 inx
01d7d5 cmp #$ff
01d7d7 beq $d808
01d7d9 cmp #$80
01d7db beq $d7fb
01d7dd sta $1949
01d7e0 lda #$0c
01d7e2 sta $194a
01d7e5 phx
01d7e6 ldx $19ea
01d7e9 lda $1a85,x
01d7ec sta $192d
01d7ef lda $1a87,x
01d7f2 sta $192e
01d7f5 plx
01d7f6 jsr $9680
01d7f9 bra $d7d0
01d7fb lda $00f5f7,x
01d7ff inx
01d800 sta $1949
01d803 jsr $9edc
01d806 bra $d7d0
01d808 stx $194d
01d80b jsr $82cf
01d80e lda $1926
01d811 cmp #$0b
01d813 bne $d81a
01d815 lda #$22
01d817 jsr $baac
01d81a dec $1926
01d81d bpl $d7b0
01d81f lda $19e7
01d822 sta $192b
01d825 stz $192c
01d828 jsr $8ae4
01d82b rts				; exit routine



01df91 lda #$03
01df93 sta $1926
01df96 jsr $dfcb
01df99 lda $1936
01df9c clc
01df9d adc #$08
01df9f sta $1936
01dfa2 jsr $e28a
01dfa5 php				; save processor status to stack
01dfa6 rep #$30			; set A,X,Y => 16bit
01dfa8 lda $1935
01dfab sta $0cd0
01dfae clc
01dfaf adc #$0008
01dfb2 sta $0cd4
01dfb5 clc
01dfb6 adc #$0800
01dfb9 sta $0cdc
01dfbc lda $1935
01dfbf clc
01dfc0 adc #$0800
01dfc3 sta $0cd8
01dfc6 plp
01dfc7 jsr $e371
01dfca rts				; exit routine



01dfcb lda $1935
01dfce sec
01dfcf sbc $0e89
01dfd2 bmi $dfe1
01dfd4 asl a
01dfd5 asl a
01dfd6 asl a
01dfd7 asl a
01dfd8 clc
01dfd9 adc $199d
01dfdc sta $1935
01dfdf bra $dff9
01dfe1 lda $0e89
01dfe4 sec
01dfe5 sbc $1935
01dfe8 asl a
01dfe9 asl a
01dfea asl a
01dfeb asl a
01dfec sta $1935
01dfef lda $199d
01dff2 sec
01dff3 sbc $1935
01dff6 sta $1935
01dff9 lda $1936
01dffc sec
01dffd sbc $0e8a
01e000 bmi $e00e
01e00e lda $0e8a
01e011 sec
01e012 sbc $1936
01e015 asl a
01e016 asl a
01e017 asl a
01e018 asl a
01e019 sta $1936
01e01c lda $199e
01e01f sec
01e020 sbc $1936
01e023 sta $1936
01e026 rts				; exit routine



01e027 lda #$55
01e029 sta $0e06
01e02c sta $0e07
01e02f rts				; exit routine



01e030 jsr $94cc
01e033 jsr $82d8
01e036 lda $19e6
01e039 sta $0513
01e03c jsr $8b8f
01e03f lda #$27
01e041 jsr $baac
01e044 jsl $00d0a0
01e048 lda $1020
01e04b and #$40
01e04d bne $e05b
01e04f jsr $e05c
01e052 lda $19ec
01e055 ldx $19e8
01e058 jsr $b1b5
01e05b rts				; exit routine



01e05c php				; save processor status to stack
01e05d jsr $e082
01e060 lda $0e91
01e063 sta $0ee8,x
01e066 rep #$30			; set A,X,Y => 16bit
01e068 txa
01e069 clc
01e06a adc #$0ee8
01e06d inc
01e06e tay
01e06f ldx $19e8
01e072 lda $1a8b,x
01e075 and #$00ff
01e078 phd				; save direct page to stack
01e079 phy
01e07a pld
01e07b jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
01e07f pld
01e080 plp
01e081 rts				; exit routine



01e082 ldx #$0000		; clear X
01e085 lda $0ee8,x
01e088 beq $e095
01e08a cmp $0e91
01e08d beq $e095
01e08f inx
01e090 inx
01e091 inx
01e092 inx
01e093 bra $e085
01e095 rts				; exit routine



01e096 sep #$20			; set A => 8bit
01e098 rep #$10			; set X,Y => 16bit
01e09a jsr $e082
01e09d cmp #$00
01e09f bne $e0a2
01e0a1 rts				; exit routine



01e0a2 rep #$30			; set A,X,Y => 16bit
01e0a4 txa
01e0a5 clc
01e0a6 adc #$0ee8
01e0a9 inc
01e0aa tay
01e0ab lda $19e6
01e0ae and #$00ff
01e0b1 phd				; save direct page to stack
01e0b2 phy
01e0b3 pld
01e0b4 jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
01e0b8 pld
01e0b9 sep #$20			; set A => 8bit
01e0bb rep #$10			; set X,Y => 16bit
01e0bd inc
01e0be dec
01e0bf rts				; exit routine



01e0c0 phb				; save databank to stack
01e0c1 ldx $19e8
01e0c4 lda $1a8a,x
01e0c7 sta $192b
01e0ca lda $1a80,x
01e0cd sta $19e2
01e0d0 lda $1a81,x
01e0d3 sta $19e3
01e0d6 ldx $19e8
01e0d9 stx $19e4
01e0dc lda $0e8b
01e0df inc
01e0e0 inc
01e0e1 and #$03
01e0e3 sta $192c
01e0e6 lda $19ec
01e0e9 sta $192b
01e0ec jsr $8ae4
01e0ef lda $0e91
01e0f2 sta $19e7
01e0f5 lda $19e6
01e0f8 sta $0020
01e0fb jsl $009b59
01e0ff plb
01e100 lda $1a4e
01e103 sta $212c
01e106 lda $1a4f
01e109 sta $212d
01e10c lda $1a50
01e10f sta $2130
01e112 lda $1a51
01e115 sta $2131
01e118 lda $19e7
01e11b cmp $0e91
01e11e bne $e136
01e120 ldx $19e4
01e123 lda $1a72,x
01e126 bmi $e136
01e128 lda $1a81,x
01e12b cmp $19e3
01e12e bne $e136
01e130 lda $19e2
01e133 sta $1a80,x
01e136 rts				; exit routine



01e137 phb				; save databank to stack
01e138 lda $19e6
01e13b sta $009e
01e13e jsl $009b45
01e142 plb
01e143 rts				; exit routine



01e144 ldy $19ea
01e147 lda $1a72,y
01e14a sta $19ed
01e14d lda #$04
01e14f sta $1a72,y
01e152 lda #$00
01e154 xba
01e155 lda $19d7
01e158 asl a
01e159 tax
01e15a jsr $e19a
01e15d lda $1926
01e160 cmp #$01
01e162 beq $e175
01e175 lda $1926
01e178 pha
01e179 jsr $935c
01e17c pla
01e17d sta $1926
01e180 ldx $19ea
01e183 lda $19ed
01e186 sta $1a72,x
01e189 lda $1926
01e18c cmp #$01
01e18e beq $e199
01e199 rts				; exit routine



01e19a phx
01e19b phy
01e19c lda $1a7d,y
01e19f clc
01e1a0 adc $0190d4,x
01e1a4 sta $1a7d,y
01e1a7 lda $1a7e,y
01e1aa clc
01e1ab adc $0190d5,x
01e1af sta $1a7e,y
01e1b2 lda $1a8b,y
01e1b5 pha
01e1b6 jsr $e1d2
01e1b9 pla
01e1ba sta $0f29,x
01e1bd lda $0e91
01e1c0 sta $0f28,x
01e1c3 lda $1a7d,y
01e1c6 sta $0f2a,x
01e1c9 lda $1a7e,y
01e1cc sta $0f2b,x
01e1cf ply
01e1d0 plx
01e1d1 rts				; exit routine



01e1d2 phy
01e1d3 xba
01e1d4 lda $0e91
01e1d7 ldx #$0000		; clear X
01e1da ldy #$0008
01e1dd cmp $0f28,x
01e1e0 bne $e1f5
01e1e2 xba
01e1e3 cmp $0f29,x
01e1e6 beq $e1f3
01e1f3 ply
01e1f4 rts				; exit routine



01e1f5 pha
01e1f6 lda $0f28,x
01e1f9 bne $e1fe
01e1fb pla
01e1fc bra $e1f3
01e201 lda $1030
01e204 bne $e20f
01e20f jsr $8b75		; jump to the "Clear bits in 2 byte value at $008e using mask of $4030" routine
01e212 dec $1030
01e215 jsl $009b02
01e219 jsr $e28a
01e21c jsr $e35a
01e21f lda #$00
01e221 xba
01e222 lda $0e8b
01e225 asl a
01e226 tax
01e227 lda $199d
01e22a clc
01e22b adc $e282,x
01e22e sta $1935
01e231 lda $199e
01e234 clc
01e235 adc $e283,x
01e238 sta $1936
01e23b php				; save processor status to stack
01e23c rep #$30			; set A,X,Y => 16bit
01e23e lda $1935
01e241 sta $0cd0
01e244 clc
01e245 adc #$0008
01e248 sta $0cd4
01e24b clc
01e24c adc #$0800
01e24f sta $0cdc
01e252 lda $1935
01e255 clc
01e256 adc #$0800
01e259 sta $0cd8
01e25c plp
01e25d jsr $e2cd
01e260 stz $0e0d
01e263 jsr $82d8
01e266 jsr $e2f6
01e269 jsr $e371
01e26c jsr $e512
01e26f jsr $e391
01e272 jsr $e3a9
01e275 lda $19b0
01e278 beq $e27e
01e27a jsl $01b24b
01e27e jsr $8b82
01e281 rts				; exit routine



01e28a lda #$0c
01e28c ora $1a54
01e28f xba
01e290 lda $1926
01e293 asl a
01e294 asl a
01e295 clc
01e296 adc #$80
01e298 tax
01e299 stx $0cd2
01e29c inx
01e29d stx $0cd6
01e2a0 inx
01e2a1 stx $0cda
01e2a4 inx
01e2a5 stx $0cde
01e2a8 lda #$0c
01e2aa ora $1a54
01e2ad xba
01e2ae lda #$69
01e2b0 tax
01e2b1 stx $0c76
01e2b4 xba
01e2b5 ora #$80
01e2b7 xba
01e2b8 tax
01e2b9 stx $0c7e
01e2bc xba
01e2bd ora #$40
01e2bf xba
01e2c0 tax
01e2c1 stx $0c7a
01e2c4 xba
01e2c5 and #$7f
01e2c7 xba
01e2c8 tax
01e2c9 stx $0c72
01e2cc rts				; exit routine



01e2cd lda #$00
01e2cf xba
01e2d0 lda $1926
01e2d3 asl a
01e2d4 tax
01e2d5 ldy $e2dc,x
01e2d8 sty $1939
01e2db rts				; exit routine



01e2f6 ldx $1939
01e2f9 lda #$55
01e2fb sta $0e07
01e2fe lda #$04
01e300 sta $193b
01e303 jsr $e338
01e306 inx
01e307 inx
01e308 lda #$07
01e30a sta $193c
01e30d phx
01e30e jsr $82d8
01e311 plx
01e312 lda $0e07
01e315 eor #$04
01e317 sta $0e07
01e31a dec $193c
01e31d bne $e30d
01e31f lda $193b
01e322 cmp #$02
01e324 bne $e329
01e326 jsr $e32f
01e329 dec $193b
01e32c bne $e303
01e32e rts				; exit routine



01e32f lda #$10
01e331 sta $1993
01e334 jsr $c44f
01e337 rts				; exit routine



01e338 lda $1935
01e33b clc
01e33c adc $0000,x
01e33f sta $1937
01e342 lda $1936
01e345 clc
01e346 adc $0001,x
01e349 sta $1938
01e34c phx
01e34d ldx $1937
01e350 stx $0c74
01e353 plx
01e354 lda #$51
01e356 sta $0e07
01e359 rts				; exit routine



01e35a lda #$00
01e35c xba
01e35d lda $0e8b
01e360 tax
01e361 lda #$20
01e363 sta $1993
01e366 lda $e36d,x
01e369 jsr $8caf
01e36c rts				; exit routine



01e371 php				; save processor status to stack
01e372 rep #$30			; set A,X,Y => 16bit
01e374 lda $0cd0
01e377 sta $0c70
01e37a lda $0cd4
01e37d sta $0c74
01e380 lda $0cd8
01e383 sta $0c78
01e386 lda $0cdc
01e389 sta $0c7c
01e38c plp
01e38d stz $0e07
01e390 rts				; exit routine



01e391 phx
01e392 ldx #$080f
01e395 stx $0506
01e398 ldx #$0006
01e39b lda $1926
01e39e beq $e3a3
01e3a3 txa
01e3a4 sta $0505
01e3a7 plx
01e3a8 rts				; exit routine



01e3a9 lda #$00
01e3ab xba
01e3ac lda $1926
01e3af asl a
01e3b0 tax
01e3b1 jsr ($e3b5,x)
01e3b4 rts				; exit routine



01e3bb jsr $e43a
01e3be jsr $e519
01e3c1 lda #$55
01e3c3 sta $0e0d
01e3c6 sta $0e07
01e3c9 jsr $e48d
01e3cc rts				; exit routine



01e43a stz $0e06
01e43d lda #$0c
01e43f ora $1a54
01e442 xba
01e443 lda #$74
01e445 php				; save processor status to stack
01e446 rep #$30			; set A,X,Y => 16bit
01e448 sta $0c62
01e44b inc
01e44c sta $0c66
01e44f inc
01e450 sta $0c6a
01e453 inc
01e454 sta $0c6e
01e457 lda $0cd0
01e45a sta $0c60
01e45d lda $0cd4
01e460 sta $0c64
01e463 lda $0cd8
01e466 sta $0c68
01e469 lda $0cdc
01e46c sta $0c6c
01e46f plp
01e470 rts				; exit routine



01e48d lda #$0c
01e48f ora $1a54
01e492 xba
01e493 lda #$7c
01e495 php				; save processor status to stack
01e496 rep #$30			; set A,X,Y => 16bit
01e498 sta $0c62
01e49b inc
01e49c sta $0c66
01e49f inc
01e4a0 sta $0c6a
01e4a3 inc
01e4a4 sta $0c6e
01e4a7 plp
01e4a8 jsr $82d8
01e4ab ldy #$0006
01e4ae phy
01e4af jsr $e4bf
01e4b2 jsr $82d8
01e4b5 ply
01e4b6 dey
01e4b7 bne $e4ae
01e4b9 lda #$55
01e4bb sta $0e06
01e4be rts				; exit routine



01e4bf lda $0c60
01e4c2 dec
01e4c3 sta $0c60
01e4c6 lda $0c61
01e4c9 dec
01e4ca sta $0c61
01e4cd lda $0c64
01e4d0 inc
01e4d1 sta $0c64
01e4d4 lda $0c65
01e4d7 dec
01e4d8 sta $0c65
01e4db lda $0c68
01e4de dec
01e4df sta $0c68
01e4e2 lda $0c69
01e4e5 inc
01e4e6 sta $0c69
01e4e9 lda $0c6c
01e4ec inc
01e4ed sta $0c6c
01e4f0 lda $0c6d
01e4f3 inc
01e4f4 sta $0c6d
01e4f7 rts				; exit routine



01e4f8 phy
01e4f9 ldy #$0002
01e4fc bra $e508
01e4fe phy
01e4ff ldy #$0004
01e502 bra $e508
01e508 phy
01e509 jsr $82d8
01e50c ply
01e50d dey
01e50e bne $e508
01e510 ply
01e511 rts				; exit routine



01e512 jsr $e4fe
01e515 jsr $e4fe
01e518 rts				; exit routine



01e519 jsr $e512
01e51c jmp $e4f8
01e61c ldx $0e89
01e61f stx $1cae
01e622 ldx #$ffe8
01e625 stx $1cb0
01e628 ldx #$fff7
01e62b stx $1cb2
01e62e txa
01e62f sta $1cc0
01e632 rts				; exit routine



01e633 phd				; save direct page to stack
01e634 phb				; save databank to stack
01e635 lda #$07
01e637 pha
01e638 plb
01e639 pea $1cae
01e63c pld
01e63d ldx $0e89
01e640 cpx $00
01e642 bne $e64b
01e644 lda $12
01e646 bne $e674
01e648 plb
01e649 pld
01e64a rts				; exit routine



01e64b rep #$20			; set A => 16bit
01e64d lda $02
01e64f sec
01e650 sbc $1908
01e653 sta $02
01e655 tax
01e656 lda $04
01e658 sec
01e659 sbc $190a
01e65c sta $04
01e65e and #$000f
01e661 cmp #$0007
01e664 bne $e67e
01e666 txa
01e667 and #$000f
01e66a cmp #$0008
01e66d bne $e67e
01e66f lda $0e89
01e672 sta $00
01e674 ldx #$ffe8
01e677 stx $02
01e679 ldx #$fff7
01e67c stx $04
01e67e sep #$20			; set A => 8bit
01e680 stz $12
01e682 lda $00
01e684 sec
01e685 sbc #$09
01e687 sta $0a
01e689 sta $06
01e68b bpl $e68f
01e68f clc
01e690 adc #$13
01e692 sta $07
01e694 lda $01
01e696 sec
01e697 sbc #$06
01e699 sta $0b
01e69b sta $08
01e69d bpl $e6a1
01e6a1 clc
01e6a2 adc #$0d
01e6a4 sta $09
01e6a6 jsr $e740
01e6a9 ldx #$0000		; clear X
01e6ac txy
01e6ad stx $0e
01e6af stx $10
01e6b1 lda $eb44,x
01e6b4 bmi $e648
01e6b6 cmp $08
01e6b8 bcc $e6d8
01e6ba cmp $09
01e6bc bcs $e6d8
01e6be sta $0d
01e6c0 lda $eb45,x
01e6c3 cmp $06
01e6c5 bcc $e6d8
01e6c7 cmp $07
01e6c9 bcs $e6d8
01e6cb sta $0c
01e6cd lda $eb46,x
01e6d0 beq $e6df
01e6d2 jsl $009776
01e6d6 bne $e6df
01e6d8 inx
01e6d9 inx
01e6da inx
01e6db inx
01e6dc inx
01e6dd bra $e6b1
01e6df lda $0d
01e6e1 sec
01e6e2 sbc $0b
01e6e4 rep #$20			; set A => 16bit
01e6e6 and #$000f
01e6e9 asl a
01e6ea asl a
01e6eb asl a
01e6ec asl a
01e6ed adc $04
01e6ef sep #$20			; set A => 8bit
01e6f1 sta $0d01,y
01e6f4 lda $0c
01e6f6 sec
01e6f7 sbc $0a
01e6f9 rep #$20			; set A => 16bit
01e6fb and #$001f
01e6fe asl a
01e6ff asl a
01e700 asl a
01e701 asl a
01e702 adc $02
01e704 and #$01ff
01e707 sep #$20			; set A => 8bit
01e709 sta $0d00,y
01e70c lda $eb47,x
01e70f sta $0d02,y
01e712 lda $eb48,x
01e715 sta $0d03,y
01e718 xba
01e719 bne $e72b
01e71b phx
01e71c ldx $10
01e71e lda $01e73c,x
01e722 ldx $0e
01e724 and $0e10,x
01e727 sta $0e10,x
01e72a plx
01e72b lda $10
01e72d inc
01e72e and #$03
01e730 sta $10
01e732 bne $e736
01e734 inc $0e
01e736 iny
01e737 iny
01e738 iny
01e739 iny
01e73a bra $e6d8
01e740 rep #$20			; set A => 16bit
01e742 ldx #$0000		; clear X
01e745 ldy #$0040
01e748 lda #$0101
01e74b sta $0d00,x
01e74e sta $0d02,x
01e751 inx
01e752 inx
01e753 inx
01e754 inx
01e755 dey
01e756 bne $e74b
01e758 tyx
01e759 ldy #$0008
01e75c lda #$ffff
01e75f sta $0e10,x
01e762 inx
01e763 inx
01e764 dey
01e765 bne $e75f
01e767 sep #$20			; set A => 8bit
01e769 rts				; exit routine



01e76a php				; save processor status to stack
01e76b phb				; save databank to stack
01e76c phd				; save direct page to stack
01e76d sep #$20			; set A => 8bit
01e76f rep #$10			; set X,Y => 16bit
01e771 lda $0e91
01e774 bne $e7f0
01e776 pea $2100
01e779 pld
01e77a ldx #$7f0e
01e77d stz $2181
01e780 stx $2182
01e783 lda #$04
01e785 pha
01e786 plb
01e787 ldx #$0000		; clear X
01e78a lda $01e95d,x
01e78e inx
01e78f cmp #$ff
01e791 beq $e7c7
01e793 pha
01e794 and #$3f
01e796 sta $1b
01e798 stz $1b
01e79a lda #$18
01e79c sta $1c
01e79e rep #$20			; set A => 16bit
01e7a0 lda $34
01e7a2 clc
01e7a3 adc #$f5a0
01e7a6 tay
01e7a7 sep #$20			; set A => 8bit
01e7a9 pla
01e7aa asl a
01e7ab bcc $e7b5
01e7ad asl a
01e7ae bcc $e7bd
01e7b0 jsr $e845
01e7b3 bra $e78a
01e7b5 asl a
01e7b6 bcc $e7c2
01e7b8 jsr $e8cc
01e7bb bra $e78a
01e7bd jsr $e898
01e7c0 bra $e78a
01e7c2 jsr $e90c
01e7c5 bra $e78a
01e7c7 lda #$07
01e7c9 pha
01e7ca plb
01e7cb ldy #$ddc4
01e7ce ldx #$1a00
01e7d1 stx $81
01e7d3 ldx #$0088
01e7d6 jsr $e90c
01e7d9 dex
01e7da bne $e7d6
01e7dc ldx #$2c00
01e7df stx $81
01e7e1 ldx #$0008
01e7e4 jsr $e90c
01e7e7 dex
01e7e8 bne $e7e4
01e7ea jsr $e810
01e7ed jsr $e7f4
01e7f0 pld
01e7f1 plb
01e7f2 plp
01e7f3 rts				; exit routine



01e7f4 sep #$20			; set A => 8bit
01e7f6 lda #$04
01e7f8 pha
01e7f9 plb
01e7fa stz $2181
01e7fd ldx #$7f42
01e800 stx $2182
01e803 ldy #$f720
01e806 ldx #$0010
01e809 jsr $e90c
01e80c dex
01e80d bne $e809
01e80f rts				; exit routine



01e810 rep #$20			; set A => 16bit
01e812 ldx #$0000		; clear X
01e815 ldy #$c488
01e818 lda $01e83e,x
01e81c and #$00ff
01e81f asl a
01e820 asl a
01e821 asl a
01e822 asl a
01e823 adc #$d824
01e826 phb				; save databank to stack
01e827 phx
01e828 tax
01e829 lda #$000f
01e82c mvn $07,$7f
01e82f plx
01e830 plb
01e831 tya
01e832 clc
01e833 adc #$0010
01e836 tay
01e837 inx
01e838 cpx #$0007
01e83b bne $e818
01e83d rts				; exit routine



01e845 phd				; save direct page to stack
01e846 phx
01e847 pea $2100
01e84a pld
01e84b rep #$20			; set A => 16bit
01e84d tya
01e84e clc
01e84f adc #$0018
01e852 pha
01e853 dec
01e854 pha
01e855 sbc #$0008
01e858 tay
01e859 lda #$0000
01e85c sep #$20			; set A => 8bit
01e85e ldx #$0008
01e861 phx
01e862 lda $0000,y
01e865 iny
01e866 tax
01e867 lda $02e236,x
01e86b sta $80
01e86d lda $0000,y
01e870 dey
01e871 tax
01e872 lda $02e236,x
01e876 sta $80
01e878 dey
01e879 dey
01e87a plx
01e87b dex
01e87c bne $e861
01e87e ply
01e87f ldx #$0008
01e882 phx
01e883 lda $0000,y
01e886 dey
01e887 tax
01e888 lda $02e236,x
01e88c sta $80
01e88e stz $80
01e890 plx
01e891 dex
01e892 bne $e882
01e894 ply
01e895 plx
01e896 pld
01e897 rts				; exit routine



01e898 phd				; save direct page to stack
01e899 phx
01e89a pea $2100
01e89d pld
01e89e lda #$00
01e8a0 xba
01e8a1 ldx #$0010
01e8a4 phx
01e8a5 lda $0000,y
01e8a8 iny
01e8a9 tax
01e8aa lda $02e236,x
01e8ae sta $80
01e8b0 plx
01e8b1 dex
01e8b2 bne $e8a4
01e8b4 ldx #$0008
01e8b7 phx
01e8b8 lda $0000,y
01e8bb iny
01e8bc tax
01e8bd lda $02e236,x
01e8c1 sta $80
01e8c3 stz $80
01e8c5 plx
01e8c6 dex
01e8c7 bne $e8b7
01e8c9 plx
01e8ca pld
01e8cb rts				; exit routine



01e8cc phd				; save direct page to stack
01e8cd phx
01e8ce pea $2100
01e8d1 pld
01e8d2 rep #$20			; set A => 16bit
01e8d4 tya
01e8d5 clc
01e8d6 adc #$0018
01e8d9 pha
01e8da dec
01e8db pha
01e8dc sbc #$0008
01e8df tay
01e8e0 lda #$0000
01e8e3 sep #$20			; set A => 8bit
01e8e5 ldx #$0008
01e8e8 lda $0000,y
01e8eb iny
01e8ec sta $80
01e8ee lda $0000,y
01e8f1 dey
01e8f2 sta $80
01e8f4 dey
01e8f5 dey
01e8f6 dex
01e8f7 bne $e8e8
01e8f9 ply
01e8fa ldx #$0008
01e8fd lda $0000,y
01e900 dey
01e901 sta $80
01e903 stz $80
01e905 dex
01e906 bne $e8fd
01e908 ply
01e909 plx
01e90a pld
01e90b rts				; exit routine



; ROUTINE: Copy one tile to WRAM
; Source address = bank:y + $0 (example: bank = $05 and y = $8c80 so address = $058c80)
; Destination address has already been written to $2181-$2183
; $18 bytes from source => $20 bytes destination
; Copy the first $10 bytes, then copy each of the next $8 bytes followed by a zero byte (so AABBCC... becomes AA00BB00CC00...)
; TODO: clean up, rewrite
						; setup
01e90c phd					; save direct page to stack
01e90d phx					; save X to stack
01e90e pea $2100			; push the value $2100 to the stack
01e911 pld					; pull that $2100 into direct page
01e912 ldx #$0010		; setup X as a counter starting at $10
; start of loop - copy first ten bytes {
	01e915 lda $0000,y		; load the source byte
	01e918 iny				; increment source address for next byte
	01e919 sta $80			; write byte (lower A) to WRAM through WMDATA
	01e91b dex				; decrement our counter
	01e91c bne $e915		; if X > 0, go back to top of loop
}
01e91e ldx #$0008			; setup X as a counter starting at $8
; start of loop - copy last $8 bytes mixed with zeros {
	01e921 lda $0000,y		; load the source byte
	01e924 iny
	01e925 sta $80
	01e927 stz $80
	01e929 dex
	01e92a bne $e921
}
01e92c plx				; restore X from the stack
01e92d pld				; restore direct page from stack
01e92e rts				; exit routine



01e92f phx
01e930 ldx #$0008
01e933 lda $0000,y
01e936 ora $0010,y
01e939 iny
01e93a ora $0000,y
01e93d sta $0010,y
01e940 iny
01e941 dex
01e942 bne $e933
01e944 plx
01e945 rts				; exit routine



01e946 phd				; save direct page to stack
01e947 phx
01e948 pea $2100
01e94b pld
01e94c ldx #$0008
01e94f stz $80
01e951 stz $80
01e953 stz $80
01e955 stz $80
01e957 dex
01e958 bne $e94f
01e95a plx
01e95b pld
01e95c rts				; exit routine



01e9b2 ldx $0092
01e9b5 stx $1a60
01e9b8 lda #$01
01e9ba pha
01e9bb plb
01e9bc lda $0e91
01e9bf beq $e9f1
01e9c1 stz $194b
01e9c4 stz $194c
01e9c7 lda $0e8d
01e9ca bne $e9e9
01e9cc lda $19cc
01e9cf bmi $e9e9
01e9d1 xba
01e9d2 lda $19cb
01e9d5 asl a
01e9d6 xba
01e9d7 rol a
01e9d8 and #$0f
01e9da sta $194b
01e9dd beq $e9e9
01e9df lda #$40
01e9e1 trb $1a60
01e9e4 lda #$50
01e9e6 trb $1a61
01e9e9 jsr $f1f2
01e9ec asl a
01e9ed tax
01e9ee jmp ($f3ca,x)
01e9f1 lda $1a5b
01e9f4 bne $e9fc
01e9f6 ldy $0015
01e9f9 sty $1a60
01e9fc jsr $f1f2
01e9ff asl a
01ea00 tax
01ea01 jmp ($f3e0,x)
01ea04 stz $19af
01ea07 lda $194b
01ea0a beq $ea16
01ea0c bit #$08
01ea0e beq $ea3d
01ea16 lda $1929
01ea19 bne $ea22
01ea1b lda $1993
01ea1e cmp #$10
01ea20 beq $ea2d
01ea22 lda #$10
01ea24 sta $1993
01ea27 stz $1929
01ea2a lda #$04
01ea2c rts				; exit routine



01ea2d lda #$00
01ea2f rts				; exit routine



01ea3d lda $194b
01ea40 tax
01ea41 sep #$10			; set X,Y => 8bit
01ea43 rep #$10			; set X,Y => 16bit
01ea45 lda #$80
01ea47 sta $1929
01ea4a stz $19f9
01ea4d lda #$10
01ea4f sta $1993
01ea52 lda $f3ff,x
01ea55 sta $19d7
01ea58 lda $f406,x
01ea5b sta $1928
01ea5e jmp $eaaf
01ea61 stz $19af
01ea64 lda #$01
01ea66 sta $1928
01ea69 lda #$10
01ea6b sta $1993
01ea6e stz $1929
01ea71 lda $f42c,x
01ea74 sta $19d7
01ea77 sta $0e8b
01ea7a lda $194b
01ea7d beq $eaaa
01ea7f bit #$08
01ea81 beq $ea8e
01ea83 and #$07
01ea85 beq $eaaa
01ea87 lda $194c
01ea8a bne $eaaa
01eaaa lda #$01
01eaac sta $19f9
01eaaf jsr $f211
01eab2 jsr $f2ca
01eab5 bcc $eaba
01eab7 jmp $eb45
01eaba lda $19d0
01eabd bmi $ead1
01eabf bit #$04
01eac1 beq $ead1
01eac3 and #$03
01eac5 beq $eacc
01eac7 lda $194c
01eaca beq $eb38
01eacc lda #$03
01eace tsb $1929
01ead1 ldy #$0000
01ead4 lda $19cf
01ead7 and #$07
01ead9 beq $eaf9
01eadb cmp #$07
01eadd beq $eb38
01eadf sta $192b
01eae2 lda $19b4
01eae5 and #$07
01eae7 beq $eaf9
01eae9 cmp $192b
01eaec beq $eaf9
01eaee dec
01eaef bne $eb38
01eaf1 lda $19cf
01eaf4 and #$08
01eaf6 beq $eb38
01eaf9 tya
01eafa sta $0e8d
01eafd ldx $19cf
01eb00 inc
01eb01 beq $eb07
01eb03 txa
01eb04 jsr $885f
01eb07 lda $19d3
01eb0a sta $193b
01eb0d lda $19d5
01eb10 sta $19d3
01eb13 ldx $19cf
01eb16 stx $19cb
01eb19 lda $19d0
01eb1c ldy $19f1
01eb1f jsr $f369
01eb22 lda $193b
01eb25 eor $19d5
01eb28 bmi $eb2d
01eb2a lda #$02
01eb2c rts				; exit routine



01eb38 lda $194b
01eb3b bit #$08
01eb3d beq $eb42
01eb42 lda #$04
01eb44 rts				; exit routine



01eb45 lda $1a7f,x
01eb48 bit #$08
01eb4a bne $eb55
01eb4c and #$03
01eb4e cmp #$01
01eb50 bne $eb38
01eb52 lda #$07
01eb54 rts				; exit routine



01eb55 bit #$10
01eb57 beq $eb6f
01eb6f lda #$20
01eb71 sta $1993
01eb74 ldx $19e8
01eb77 stx $19ea
01eb7a lda $19e6
01eb7d sta $19e7
01eb80 lda $19ec
01eb83 sta $19ed
01eb86 jsr $f21e
01eb89 lda $19b4
01eb8c and #$07
01eb8e beq $eb38
01eb90 eor $19d1
01eb93 and #$07
01eb95 bne $eb38
01eb97 jsr $f2ca
01eb9a bcs $eb38
01eb9c lda $19d6
01eb9f lsr a
01eba0 lsr a
01eba1 lsr a
01eba2 lsr a
01eba3 eor $19b4
01eba6 and #$08
01eba8 bne $eb38
01ebaa lda #$01
01ebac sta $1926
01ebaf ldy $19f1
01ebb2 ldx #$0000		; clear X
01ebb5 jsr $f297
01ebb8 jsr $f325
01ebbb bcc $ebc0
01ebc0 lda $19d5
01ebc3 sta $19d3
01ebc6 ldx $19cf
01ebc9 stx $19cb
01ebcc lda $19d0
01ebcf ldy $19f1
01ebd2 jsr $f369
01ebd5 lda #$0c
01ebd7 rts				; exit routine



01ebd8 lda $0e8b
01ebdb sta $19d7
01ebde jsr $f211
01ebe1 jsr $f2ca
01ebe4 bcc $ec0b
01ebe6 lda $1a7f,x
01ebe9 and #$03
01ebeb asl a
01ebec tax
01ebed lda $0094
01ebf0 and #$80
01ebf2 beq $ebfb
01ebf4 sep #$10			; set X,Y => 8bit
01ebf6 rep #$10			; set X,Y => 16bit
01ebf8 jmp ($f40e,x)
01ebfb lda $1031
01ebfe cmp #$26
01ec00 bcc $ec06
01ec06 txa
01ec07 cmp #$06
01ec09 bne $ec55
01ec0b lda $1031
01ec0e sec
01ec0f sbc #$20
01ec11 cmp #$0c
01ec13 bcs $ec55
01ec15 asl a
01ec16 tax
01ec17 sep #$10			; set X,Y => 8bit
01ec19 rep #$10			; set X,Y => 16bit
01ec1b jmp ($f416,x)
01ec1e lda $0094
01ec21 bit #$80
01ec23 beq $ec55
01ec25 lda #$08
01ec27 rts				; exit routine



01ec28 lda $0094
01ec2b bit #$80
01ec2d beq $ec55
01ec2f lda #$07
01ec31 rts				; exit routine



01ec32 lda $0094
01ec35 bit #$80
01ec37 beq $ec55
01ec39 lda #$09
01ec3b rts				; exit routine



01ec3c lda $0e8d
01ec3f bne $ec54
01ec41 lda $194b
01ec44 beq $ec4a
01ec4a lda $19cb
01ec4d and #$70
01ec4f cmp #$30
01ec51 beq $ec54
01ec53 rts				; exit routine



01ec55 lda #$bf
01ec57 trb $1a60
01ec5a jmp $e9e9
01ec5d jsr $ec3c
01ec60 lda $19d0
01ec63 bpl $ec76
01ec65 bit #$20
01ec67 beq $ec76
01ec69 and #$1f
01ec6b sta $19ee
01ec6e lda #$0f
01ec70 sta $19ef
01ec73 inc $19b0
01ec76 stz $1929
01ec79 lda #$10
01ec7b sta $1993
01ec7e lda #$0a
01ec80 rts				; exit routine



01ec81 jsr $ec3c
01ec84 lda $19d0
01ec87 bpl $ec9a
01ec89 bit #$40
01ec8b beq $ec9a
01ec8d and #$1f
01ec8f sta $19ee
01ec92 lda #$0e
01ec94 sta $19ef
01ec97 inc $19b0
01ec9a stz $1929
01ec9d lda #$10
01ec9f sta $1993
01eca2 lda #$0b
01eca4 rts				; exit routine



01eca5 lda $194b
01eca8 beq $ecb1
01ecb1 lda #$00
01ecb3 rts				; exit routine



01ecb4 inc $19af
01ecb7 lda $194b
01ecba cmp #$0b
01ecbc bne $ecc1
01ecc1 stz $1a60
01ecc4 lda #$f0
01ecc6 trb $1a61
01ecc9 jsr $f1f2
01eccc asl a
01eccd tax
01ecce inc $194c
01ecd1 jmp ($f3f6,x)
01ecd4 lda $19af
01ecd7 bne $ecb4
01ecd9 inc $19af
01ecdc lda $0e8d
01ecdf bne $ecb7
01ece1 lda $19cb
01ece4 and #$70
01ece6 cmp #$30
01ece8 beq $ecb7
01ecea lda $194b
01eced beq $ecf3
01ecf3 stz $1929
01ecf6 lda #$10
01ecf8 sta $1993
01ecfb ldy #$ff01
01ecfe sty $1926
01ed01 lda $19b4
01ed04 and #$07
01ed06 sta $1933
01ed09 ldx $0e89
01ed0c stx $193b
01ed0f ldx $19cb
01ed12 stx $193d
01ed15 lda $19d3
01ed18 sta $193f
01ed1b ldx $19f1
01ed1e stx $1943
01ed21 ldx $19cf
01ed24 stx $1945
01ed27 lda $19d5
01ed2a sta $1947
01ed2d lda $193f
01ed30 eor $1947
01ed33 bpl $ed38
01ed38 lda $1946
01ed3b bmi $ed41
01ed3d bit #$04
01ed3f bne $edbb
01ed41 lda $1945
01ed44 and #$70
01ed46 cmp #$30
01ed48 beq $edbb
01ed4a ldy $1943
01ed4d jsr $f2ca
01ed50 bcc $ed72
01ed52 lda $1a7f,x
01ed55 and #$18
01ed57 cmp #$10
01ed59 beq $edc1
01ed72 lda $1945
01ed75 and #$07
01ed77 beq $edbb
01ed79 cmp #$07
01ed7b bcs $edbb
01ed7d sta $192b
01ed80 lda $1933
01ed83 bne $ed8b
01ed8b cmp $192b
01ed8e bcc $edbb
01ed90 inc $1926
01ed93 lda $1926
01ed96 cmp #$07
01ed98 bcs $edbb
01ed9a ldy $1943
01ed9d sty $193b
01eda0 ldx $1945
01eda3 stx $193d
01eda6 lda $1947
01eda9 sta $193f
01edac jsr $f231
01edaf sty $1943
01edb2 stx $1945
01edb5 sta $1947
01edb8 jmp $ed2d
01edbb dec $1926
01edbe lda #$0d
01edc0 rts				; exit routine



01edc1 inc $1927
01edc4 ldx $193b
01edc7 stx $19f1
01edca ldx $193d
01edcd stx $19cb
01edd0 lda $193f
01edd3 sta $19d3
01edd6 lda #$0d
01edd8 rts				; exit routine



01edd9 lsr a
01edda lsr a
01eddb and #$01
01eddd sta $1926
01ede0 tax
01ede1 sep #$10			; set X,Y => 8bit
01ede3 rep #$10			; set X,Y => 16bit
01ede5 lda $f452,x
01ede8 sta $193b
01edeb jsr $ec3c
01edee lda $19d3
01edf1 eor $19d5
01edf4 bmi $ee3e
01edf6 lda $19cf
01edf9 and #$07
01edfb sta $192b
01edfe beq $ee3e
01ee00 cmp #$07
01ee02 beq $ee10
01ee10 lda $19d0
01ee13 bpl $ee1f
01ee1f bit #$08
01ee21 beq $ee3e
01ee23 and $193b
01ee26 beq $ee33
01ee28 ldy $19f1
01ee2b inc $19b0
01ee2e lda #$0d
01ee30 sta $19ef
01ee33 stz $1929
01ee36 lda #$10
01ee38 sta $1993
01ee3b lda #$0e
01ee3d rts				; exit routine



01ef23 lda $194b
01ef26 bne $ef3a
01ef28 lda $0e8d
01ef2b bne $ef3a
01ef2d lda $19cb
01ef30 and #$70
01ef32 cmp #$30
01ef34 beq $ef3a
01ef36 cmp #$20
01ef38 bne $ef45
01ef45 lda #$01
01ef47 sta $19f9
01ef4a sta $1928
01ef4d lda #$10
01ef4f sta $1993
01ef52 stz $1929
01ef55 lda $0e8b
01ef58 sta $19d7
01ef5b jsr $f211
01ef5e jsr $f21e
01ef61 lda $19b4
01ef64 and #$07
01ef66 sta $193b
01ef69 lda $19cf
01ef6c and #$07
01ef6e sta $193c
01ef71 lda $19d1
01ef74 and #$07
01ef76 sta $193d
01ef79 ldx #$0000		; clear X
01ef7c stx $193f
01ef7f ldy $19f1
01ef82 jsr $f2ca
01ef85 bcc $efcb
01ef87 lda $1a7f,x
01ef8a and #$03
01ef8c dec
01ef8d bne $ef92
01ef92 inc $193f
01ef95 lda $1a7f,x
01ef98 bit #$08
01ef9a beq $efcb
01ef9c bit #$10
01ef9e beq $efb8
01efb8 ldy $19f1
01efbb ldx #$0000		; clear X
01efbe jsr $f297
01efc1 jsr $f325
01efc4 bcc $efcb
01efcb ldy $19f3
01efce jsr $f2ca
01efd1 bcc $eff5
01efd3 inc $1940
01efd6 lda $1a7f,x
01efd9 and #$18
01efdb cmp #$18
01efdd bne $eff5
01eff5 lda $19d3
01eff8 eor $19d5
01effb bmi $f01b
01effd lda $19cf
01f000 and #$70
01f002 cmp #$30
01f004 beq $f01b
01f006 cmp #$20
01f008 beq $f01b
01f00a lda $19d0
01f00d bmi $f013
01f00f bit #$04
01f011 bne $f01b
01f013 cmp #$84
01f015 beq $f01b
01f017 cmp #$85
01f019 bne $f020
01f020 lda $19d3
01f023 eor $19d6
01f026 bmi $f046
01f028 lda $19d1
01f02b and #$70
01f02d cmp #$30
01f02f beq $f046
01f031 cmp #$20
01f033 beq $f046
01f035 lda $19d2
01f038 bmi $f03e
01f03a bit #$04
01f03c bne $f046
01f03e cmp #$84
01f040 beq $f046
01f042 cmp #$85
01f044 bne $f04b
01f04b ldx #$0000		; clear X
01f04e txy
01f04f lda $193c
01f052 beq $f077
01f054 cmp #$07
01f056 bcs $f0a2
01f058 lda $193b
01f05b beq $f077
01f05d cmp $193c
01f060 beq $f077
01f062 bcc $f0a2
01f064 lda $1940
01f067 bne $f0a2
01f069 dey
01f06a lda $193d
01f06d beq $f0a0
01f06f cmp $193b
01f072 beq $f0a0
01f077 lda $1940
01f07a bne $f08f
01f07c lda $193d
01f07f beq $f0a0
01f081 cmp #$07
01f083 bcs $f08f
01f085 lda $193b
01f088 beq $f096
01f08a cmp $193d
01f08d beq $f0a0
01f08f lda $193f
01f092 bne $f0a2
01f094 bra $f0a1
01f0a0 inx
01f0a1 inx
01f0a2 tya
01f0a3 sta $1927
01f0a6 txa
01f0a7 sta $1926
01f0aa beq $f0c0
01f0ac dec
01f0ad bne $f0b7
01f0af ldy $19f1
01f0b2 lda $19d0
01f0b5 bra $f0bd
01f0b7 ldy $19f3
01f0ba lda $19d2
01f0bd jsr $f369
01f0c0 ldy $0e89
01f0c3 jsr $f325
01f0c6 bcs $f0f2
01f0c8 lda $1926
01f0cb beq $f0ed
01f0cd ldy $19f1
01f0d0 dec
01f0d1 beq $f0d6
01f0d3 ldy $19f3
01f0d6 lda #$00
01f0d8 xba
01f0d9 lda $0e8b
01f0dc asl a
01f0dd tax
01f0de phx
01f0df jsr $f325
01f0e2 plx
01f0e3 bcs $f0f2
01f0e5 ldy $19f1
01f0e8 jsr $f325
01f0eb bcs $f0f2
01f0ed lda #$03
01f0ef tsb $19b4
01f0f2 lda #$06
01f0f4 rts				; exit routine



01f0f5 ldy $0e89
01f0f8 jsr $f325
01f0fb bcs $f118
01f0fd lda #$05
01f0ff rts				; exit routine



01f108 ldy $0e89
01f10b jsr $f325
01f10e bcs $f118
01f110 lda #$10
01f112 rts				; exit routine



01f113 lda $1a5b
01f116 beq $f0fd
01f11b lda $1a5b
01f11e beq $f110
01f123 lda $1a5b
01f126 bne $f131
01f128 inc $19b0
01f12b ldx #$7000
01f12e stx $19ee
01f131 lda #$00
01f133 rts				; exit routine



01f134 lda $1a5b
01f137 bne $f16e
01f139 lda $f42c,x
01f13c tay
01f13d lda $0e88
01f140 dec
01f141 and #$7f
01f143 asl a
01f144 tax
01f145 rep #$20			; set A => 16bit
01f147 lda $07f011,x
01f14b tax
01f14c sep #$20			; set A => 8bit
01f14e iny
01f14f lda $070000,x
01f153 bpl $f158
01f155 inx
01f156 bra $f14f
01f158 dey
01f159 bne $f155
01f15b sta $1a5a
01f15e inx
01f15f stx $1a5d
01f162 inc $19b0
01f165 ldx #$7001
01f168 stx $19ee
01f16b lda #$00
01f16d rts				; exit routine



01f19c lda $1a5b
01f19f beq $f1a4
01f1a4 lda #$00
01f1a6 xba
01f1a7 lda $0e88
01f1aa dec
01f1ab cmp #$14
01f1ad bcc $f1c2
01f1af inc $19b0
01f1b2 rep #$20			; set A => 16bit
01f1b4 asl a
01f1b5 tax
01f1b6 lda $07efa1,x
01f1ba sta $19ee
01f1bd sep #$20			; set A => 8bit
01f1bf lda #$00
01f1c1 rts				; exit routine



01f1c2 sta $0513
01f1c5 tax
01f1c6 lda $01f436,x
01f1ca sep #$10			; set X,Y => 8bit
01f1cc pha
01f1cd lsr a
01f1ce lsr a
01f1cf lsr a
01f1d0 tay
01f1d1 pla
01f1d2 and #$07
01f1d4 beq $f1e1
01f1d6 jsl $009776
01f1da beq $f1e1
01f1e1 sty $0a9c
01f1e4 inc $19b0
01f1e7 rep #$10			; set X,Y => 16bit
01f1e9 ldx #$7003
01f1ec stx $19ee
01f1ef lda #$00
01f1f1 rts				; exit routine



01f1f2 lda #$00
01f1f4 xba
01f1f5 lda $1a60
01f1f8 and #$c0
01f1fa beq $f201
01f1fc ldx #$000a
01f1ff bra $f209
01f201 lda $1a61
01f204 and #$bf
01f206 ldx #$0008
01f209 asl a
01f20a bcs $f20f
01f20c dex
01f20d bne $f209
01f20f txa
01f210 rts				; exit routine



01f211 jsr $f22e
01f214 sta $19d5
01f217 stx $19cf
01f21a sty $19f1
01f21d rts				; exit routine



01f21e ldy $19f1
01f221 jsr $f231
01f224 sta $19d6
01f227 stx $19d1
01f22a sty $19f3
01f22d rts				; exit routine



01f22e ldy $0e89
01f231 lda #$00
01f233 xba
01f234 lda $19d7
01f237 asl a
01f238 tax
01f239 rep #$20			; set A => 16bit
01f23b tya
01f23c sep #$20			; set A => 8bit
01f23e clc
01f23f adc $90d4,x
01f242 xba
01f243 clc
01f244 adc $90d5,x
01f247 bpl $f24f
01f249 clc
01f24a adc $1925
01f24d bra $f258
01f24f cmp $1925
01f252 bcc $f258
01f258 xba
01f259 bpl $f261
01f261 cmp $1924
01f264 bcc $f26a
01f26a tay
01f26b xba
01f26c sta $4202
01f26f lda $1924
01f272 sta $4203
01f275 xba
01f276 rep #$20			; set A => 16bit
01f278 and #$003f
01f27b clc
01f27c adc $4216
01f27f tax
01f280 sep #$20			; set A => 8bit
01f282 lda $7f8000,x
01f286 pha
01f287 rep #$20			; set A => 16bit
01f289 and #$007f
01f28c asl a
01f28d tax
01f28e lda $7fd174,x
01f292 sep #$20			; set A => 8bit
01f294 tax
01f295 pla
01f296 rts				; exit routine



01f297 rep #$20			; set A => 16bit
01f299 tya
01f29a sep #$20			; set A => 8bit
01f29c clc
01f29d adc $90d4,x
01f2a0 xba
01f2a1 clc
01f2a2 adc $90d5,x
01f2a5 bpl $f2ad
01f2ad cmp $1925
01f2b0 bcc $f2b6
01f2b6 xba
01f2b7 bpl $f2bf
01f2bf cmp $1924
01f2c2 bcc $f2c8
01f2c8 tay
01f2c9 rts				; exit routine



01f2ca phd				; save direct page to stack
01f2cb pea $1a62
01f2ce pld
01f2cf sty $00
01f2d1 lda $19b4
01f2d4 and #$07
01f2d6 sta $02
01f2d8 ldx #$0000		; clear X
01f2db txa
01f2dc xba
01f2dd lda $10,x
01f2df bmi $f2ff
01f2e1 ldy $1b,x
01f2e3 cpy $00
01f2e5 bne $f2ff
01f2e7 lda $1d,x
01f2e9 bit #$04
01f2eb bne $f2ff
01f2ed lda $02
01f2ef beq $f316
01f2f1 lda $1e,x
01f2f3 and #$07
01f2f5 beq $f316
01f2f7 cmp #$07
01f2f9 beq $f316
01f2fb cmp $02
01f2fd beq $f316
01f2ff lda #$1a
01f301 sta $211b
01f304 stz $211b
01f307 xba
01f308 inc
01f309 sta $211c
01f30c ldx $2134
01f30f cmp #$16
01f311 bne $f2dc
01f313 pld
01f314 clc
01f315 rts				; exit routine



01f316 lda $1f,x
01f318 sta $19e6
01f31b stx $19e8
01f31e xba
01f31f sta $19ec
01f322 pld
01f323 sec
01f324 rts				; exit routine



01f325 phd				; save direct page to stack
01f326 pea $1a62
01f329 pld
01f32a sty $00
01f32c ldx #$0000		; clear X
01f32f txa
01f330 xba
01f331 lda $10,x
01f333 bmi $f343
01f335 ldy $1b,x
01f337 cpy $00
01f339 bne $f343
01f33b lda $1d,x
01f33d and #$18
01f33f cmp #$18
01f341 beq $f35a
01f343 lda #$1a
01f345 sta $211b
01f348 stz $211b
01f34b xba
01f34c inc
01f34d sta $211c
01f350 ldx $2134
01f353 cmp #$16
01f355 bne $f330
01f357 pld
01f358 clc
01f359 rts				; exit routine



01f369 bit #$80
01f36b beq $f3b4
01f36d bit #$60
01f36f bne $f3b4
01f371 inc $19b0
01f374 stz $19ee
01f377 and #$1f
01f379 sta $19ef
01f37c cmp #$03
01f37e beq $f3b4
01f380 cmp #$16
01f382 bcs $f3b5
01f384 sty $192b
01f387 phb				; save databank to stack
01f388 lda #$05
01f38a pha
01f38b plb
01f38c lda $0e91
01f38f asl a
01f390 rep #$20			; set A => 16bit
01f392 and #$00ff
01f395 tax
01f396 lda $05f920,x
01f39a tax
01f39b sep #$20			; set A => 8bit
01f39d ldy $f9f8,x
01f3a0 cpy $192b
01f3a3 bne $f3ad
01f3a5 lda $f9fa,x
01f3a8 sta $19ee
01f3ab bra $f3b3
01f3ad inx
01f3ae inx
01f3af inx
01f3b0 tya
01f3b1 bpl $f39d
01f3b3 plb
01f3b4 rts				; exit routine



01f454 lda #$0f
01f456 sta $0506
01f459 lda #$88
01f45b sta $0507
01f45e lda #$27
01f460 sta $0505
01f463 jsl $00d0a0
01f467 lda #$02
01f469 sta $0e8b
01f46c jsr $94cc
01f46f jsr $8b82
01f472 lda $0e88
01f475 jsl $0c8013
01f479 rts				; exit routine



01f47a inc $19f7
01f47d jsr $82cf
01f480 lda #$10
01f482 sta $1993
01f485 stz $1929
01f488 lda #$01
01f48a sta $1928
01f48d jsr $f52e
01f490 lda $1a5a
01f493 sta $0e88
01f496 cmp #$0c
01f498 bcc $f4ca
01f49a cmp #$12
01f49c bcc $f4a6
01f49e cmp #$26
01f4a0 bcc $f4ca
01f4a2 cmp #$2b
01f4a4 bcs $f4ca
01f4ca bra $f467
01f502 rts				; exit routine



01f52e ldx $1a5d
01f531 lda $070000,x
01f535 bpl $f502
01f537 inx
01f538 stx $1a5d
01f53b pha
01f53c and #$1f
01f53e sta $1a5f
01f541 pla
01f542 and #$60
01f544 lsr a
01f545 lsr a
01f546 lsr a
01f547 lsr a
01f548 lsr a
01f549 sta $0e8b
01f54c sta $19d7
01f54f jsr $f55c
01f552 dec $1a5f
01f555 bne $f54f
01f557 bra $f52e
01f55c ldx #$0000		; clear X
01f55f lda $19cb
01f562 and #$07
01f564 dec
01f565 bne $f56a
01f56a txa
01f56b sta $0e8d
01f56e jsr $f211
01f571 ldx $19cf
01f574 txa
01f575 and #$08
01f577 bne $f57c
01f579 stz $0e8d
01f57c lda $0e8d
01f57f bne $f585
01f581 txa
01f582 jsr $885f
01f585 lda $19d5
01f588 sta $19d3
01f58b ldx $19cf
01f58e stx $19cb
01f591 jmp $935c
01f7c6 jsr $82cf
01f7c9 dey
01f7ca bne $f7c6
01f7cc rts				; exit routine



01f849 sep #$20			; set A => 8bit
01f84b inc $19f7
01f84e jsr $82cf
01f851 ldx $1900
01f854 stx $1904
01f857 ldx $1902
01f85a stx $1906
01f85d lda #$07
01f85f sta $1a4c
01f862 jsr $f8a5
01f865 ldx #$0000		; clear X
01f868 phx
01f869 rep #$20			; set A => 16bit
01f86b lda $f891,x
01f86e sta $1a14
01f871 clc
01f872 adc #$0400
01f875 sta $1a16
01f878 sep #$20			; set A => 8bit
01f87a jsr $f8da
01f87d plx
01f87e inx
01f87f inx
01f880 cpx #$0014
01f883 bne $f868
01f885 stz $1a4c
01f888 lda #$15
01f88a sta $1a4e
01f88d stz $1a4f
01f890 rts				; exit routine



01f8a5 ldx #$0000		; clear X
01f8a8 rep #$20			; set A => 16bit
01f8aa lda #$00fb
01f8ad sta $0900,x
01f8b0 inx
01f8b1 inx
01f8b2 cpx #$0080
01f8b5 bne $f8ad
01f8b7 sep #$20			; set A => 8bit
01f8b9 lda #$80
01f8bb sta $1a13
01f8be ldx #$0900
01f8c1 stx $1a1c
01f8c4 stx $1a1e
01f8c7 ldx #$0080
01f8ca stx $1a24
01f8cd stx $1a26
01f8d0 ldx #$0000		; clear X
01f8d3 stx $1a28
01f8d6 stx $1a2a
01f8d9 rts				; exit routine



01f8da lda #$08
01f8dc sta $1a46
01f8df jsr $82cf
01f8e2 ldx #$0004
01f8e5 inc $1904
01f8e8 phx
01f8e9 rep #$20			; set A => 16bit
01f8eb dec $1906
01f8ee dec $1906
01f8f1 dec $1906
01f8f4 dec $1906
01f8f7 sep #$20			; set A => 8bit
01f8f9 ldx #$270b
01f8fc stx $19ee
01f8ff jsl $01b24b
01f903 jsr $82cf
01f906 ldx #$0008
01f909 phx
01f90a rep #$20			; set A => 16bit
01f90c dec $1900
01f90f dec $1900
01f912 dec $1904
01f915 dec $1904
01f918 jsr $82cf
01f91b inc $1900
01f91e inc $1900
01f921 inc $1904
01f924 inc $1904
01f927 jsr $82cf
01f92a sep #$20			; set A => 8bit
01f92c plx
01f92d dex
01f92e bne $f909
01f930 plx
01f931 dex
01f932 bne $f8e8
01f934 rts				; exit routine



01f977 php				; save processor status to stack
01f978 sep #$20			; set A => 8bit
01f97a ldx #$0000		; clear X
01f97d ldy $192d
01f980 jsr $f99f
01f983 plp
01f984 rts				; exit routine



01f985 lda $19d7
01f988 asl a
01f989 rep #$20			; set A => 16bit
01f98b and #$0006
01f98e tax
01f98f lda $0e89
01f992 sep #$20			; set A => 8bit
01f994 clc
01f995 adc $88c4,x
01f998 xba
01f999 clc
01f99a adc $88c5,x
01f99d xba
01f99e tay
01f99f jsr $fd50
01f9a2 sty $1a31
01f9a5 sty $1a2d
01f9a8 ldy #$0000
01f9ab sty $1a2f
01f9ae lda $19b4
01f9b1 asl a
01f9b2 asl a
01f9b3 asl a
01f9b4 asl a
01f9b5 and #$80
01f9b7 sta $1a33
01f9ba lda $1a52
01f9bd sta $1a34
01f9c0 phx
01f9c1 jsr ($f9fb,x)
01f9c4 plx
01f9c5 lda $1a4c
01f9c8 dec
01f9c9 bne $f9fa
01f9cb lda $1a2d
01f9ce clc
01f9cf adc $1a56
01f9d2 sta $1a31
01f9d5 lda $1a2e
01f9d8 clc
01f9d9 adc $1a57
01f9dc sta $1a32
01f9df ldy $1a31
01f9e2 jsr $fd50
01f9e5 sty $1a31
01f9e8 ldy $1a4a
01f9eb sty $1a2f
01f9ee stz $1a33
01f9f1 lda $1a53
01f9f4 sta $1a34
01f9f7 jsr ($fa03,x)
01f9fa rts				; exit routine



01fa0b ldy #$0000
01fa0e phy
01fa0f ldy $1a31
01fa12 lda $1a33
01fa15 jsr $fc8e
01fa18 ply
01fa19 rep #$20			; set A => 16bit
01fa1b lda $1a3d
01fa1e sta $0800,y
01fa21 lda $1a3f
01fa24 sta $0802,y
01fa27 lda $1a41
01fa2a sta $0880,y
01fa2d lda $1a43
01fa30 sta $0882,y
01fa33 sep #$20			; set A => 8bit
01fa35 iny
01fa36 iny
01fa37 iny
01fa38 iny
01fa39 lda $1a31
01fa3c inc
01fa3d cmp $1924
01fa40 bcc $fa46
01fa42 sec
01fa43 sbc $1924
01fa46 sta $1a31
01fa49 cpy #$0044
01fa4c bne $fa0e
01fa4e lda #$80
01fa50 sta $19fa
01fa53 rep #$20			; set A => 16bit
01fa55 lda $19bd
01fa58 eor #$ffff
01fa5b and #$000f
01fa5e inc
01fa5f asl a
01fa60 asl a
01fa61 sta $1a0b
01fa64 sta $1a0d
01fa67 lda #$0044
01fa6a sec
01fa6b sbc $1a0b
01fa6e sta $1a0f
01fa71 sta $1a11
01fa74 lda #$0800
01fa77 sta $1a03
01fa7a clc
01fa7b adc $1a0b
01fa7e sta $1a07
01fa81 lda #$0880
01fa84 sta $1a05
01fa87 clc
01fa88 adc $1a0d
01fa8b sta $1a09
01fa8e jsr $fd24
01fa91 sta $19fb
01fa94 clc
01fa95 adc #$0020
01fa98 sta $19fd
01fa9b eor #$0400
01fa9e and #$47c0
01faa1 sta $19ff
01faa4 clc
01faa5 adc #$0020
01faa8 sta $1a01
01faab sep #$20			; set A => 8bit
01faad rts				; exit routine



01faae ldy #$0000
01fab1 phy
01fab2 ldy $1a31
01fab5 lda $1a33
01fab8 jsr $fc8e
01fabb ply
01fabc rep #$20			; set A => 16bit
01fabe lda $1a3d
01fac1 sta $0800,y
01fac4 lda $1a3f
01fac7 sta $0880,y
01faca lda $1a41
01facd sta $0802,y
01fad0 lda $1a43
01fad3 sta $0882,y
01fad6 sep #$20			; set A => 8bit
01fad8 iny
01fad9 iny
01fada iny
01fadb iny
01fadc lda $1a32
01fadf inc
01fae0 cmp $1925
01fae3 bcc $fae9
01fae5 sec
01fae6 sbc $1925
01fae9 sta $1a32
01faec cpy #$0040
01faef bne $fab1
01faf1 lda #$81
01faf3 sta $19fa
01faf6 rep #$20			; set A => 16bit
01faf8 lda $19bf
01fafb eor #$ffff
01fafe and #$000f
01fb01 inc
01fb02 asl a
01fb03 asl a
01fb04 sta $1a0b
01fb07 sta $1a0d
01fb0a lda #$0040
01fb0d sec
01fb0e sbc $1a0b
01fb11 sta $1a0f
01fb14 sta $1a11
01fb17 lda #$0800
01fb1a sta $1a03
01fb1d clc
01fb1e adc $1a0b
01fb21 sta $1a07
01fb24 lda #$0880
01fb27 sta $1a05
01fb2a clc
01fb2b adc $1a0d
01fb2e sta $1a09
01fb31 jsr $fd24
01fb34 sta $19fb
01fb37 inc
01fb38 sta $19fd
01fb3b dec
01fb3c and #$441e
01fb3f sta $19ff
01fb42 inc
01fb43 sta $1a01
01fb46 sep #$20			; set A => 8bit
01fb48 rts				; exit routine



01fb49 ldy #$0000
01fb4c phy
01fb4d ldy $1a31
01fb50 lda $1a33
01fb53 jsr $fc8e
01fb56 ply
01fb57 rep #$20			; set A => 16bit
01fb59 lda $1a3d
01fb5c sta $0900,y
01fb5f lda $1a3f
01fb62 sta $0902,y
01fb65 lda $1a41
01fb68 sta $0980,y
01fb6b lda $1a43
01fb6e sta $0982,y
01fb71 sep #$20			; set A => 8bit
01fb73 iny
01fb74 iny
01fb75 iny
01fb76 iny
01fb77 lda $1a31
01fb7a inc
01fb7b cmp $1924
01fb7e bcc $fb84
01fb84 sta $1a31
01fb87 cpy #$0044
01fb8a bne $fb4c
01fb8c lda #$80
01fb8e sta $1a13
01fb91 rep #$20			; set A => 16bit
01fb93 lda $19bd
01fb96 eor #$ffff
01fb99 and #$000f
01fb9c inc
01fb9d asl a
01fb9e asl a
01fb9f sta $1a24
01fba2 sta $1a26
01fba5 lda #$0044
01fba8 sec
01fba9 sbc $1a24
01fbac sta $1a28
01fbaf sta $1a2a
01fbb2 lda #$0900
01fbb5 sta $1a1c
01fbb8 clc
01fbb9 adc $1a24
01fbbc sta $1a20
01fbbf lda #$0980
01fbc2 sta $1a1e
01fbc5 clc
01fbc6 adc $1a26
01fbc9 sta $1a22
01fbcc jsr $fd24
01fbcf ora #$0800
01fbd2 sta $1a14
01fbd5 clc
01fbd6 adc #$0020
01fbd9 sta $1a16
01fbdc eor #$0400
01fbdf and #$4fc0
01fbe2 sta $1a18
01fbe5 clc
01fbe6 adc #$0020
01fbe9 sta $1a1a
01fbec sep #$20			; set A => 8bit
01fbee rts				; exit routine



01fbef ldy #$0000
01fbf2 phy
01fbf3 ldy $1a31
01fbf6 lda $1a33
01fbf9 jsr $fc8e
01fbfc ply
01fbfd rep #$20			; set A => 16bit
01fbff lda $1a3d
01fc02 sta $0900,y
01fc05 lda $1a3f
01fc08 sta $0980,y
01fc0b lda $1a41
01fc0e sta $0902,y
01fc11 lda $1a43
01fc14 sta $0982,y
01fc17 sep #$20			; set A => 8bit
01fc19 iny
01fc1a iny
01fc1b iny
01fc1c iny
01fc1d lda $1a32
01fc20 inc
01fc21 cmp $1925
01fc24 bcc $fc2a
01fc26 sec
01fc27 sbc $1925
01fc2a sta $1a32
01fc2d cpy #$0040
01fc30 bne $fbf2
01fc32 lda #$81
01fc34 sta $1a13
01fc37 rep #$20			; set A => 16bit
01fc39 lda $19bf
01fc3c eor #$ffff
01fc3f and #$000f
01fc42 inc
01fc43 asl a
01fc44 asl a
01fc45 sta $1a24
01fc48 sta $1a26
01fc4b lda #$0040
01fc4e sec
01fc4f sbc $1a24
01fc52 sta $1a28
01fc55 sta $1a2a
01fc58 lda #$0900
01fc5b sta $1a1c
01fc5e clc
01fc5f adc $1a24
01fc62 sta $1a20
01fc65 lda #$0980
01fc68 sta $1a1e
01fc6b clc
01fc6c adc $1a26
01fc6f sta $1a22
01fc72 jsr $fd24
01fc75 ora #$0800
01fc78 sta $1a14
01fc7b inc
01fc7c sta $1a16
01fc7f dec
01fc80 and #$4c1e
01fc83 clc
01fc84 sta $1a18
01fc87 inc
01fc88 sta $1a1a
01fc8b sep #$20			; set A => 8bit
01fc8d rts				; exit routine



01fc8e sta $1a3a
01fc91 rep #$20			; set A => 16bit
01fc93 tya
01fc94 sep #$20			; set A => 8bit
01fc96 xba
01fc97 sta $4202
01fc9a lda $1924
01fc9d sta $4203
01fca0 xba
01fca1 rep #$20			; set A => 16bit
01fca3 and #$003f
01fca6 clc
01fca7 adc $4216
01fcaa clc
01fcab adc $1a2f
01fcae tax
01fcaf lda #$0000
01fcb2 sep #$20			; set A => 8bit
01fcb4 lda $7f8000,x
01fcb8 eor $1a3a
01fcbb bpl $fcbf
01fcbd lda #$80
01fcbf rep #$20			; set A => 16bit
01fcc1 and #$007f
01fcc4 tay
01fcc5 asl a
01fcc6 asl a
01fcc7 tax
01fcc8 lda $7fcef4,x
01fccc sta $1a35
01fccf lda $7fcef6,x
01fcd3 sta $1a37
01fcd6 sep #$20			; set A => 8bit
01fcd8 tyx
01fcd9 lda $7fd0f4,x
01fcdd sta $1a39
01fce0 sta $1a3c
01fce3 bpl $fcec
01fce5 and #$70
01fce7 lsr a
01fce8 lsr a
01fce9 sta $1a3b
01fcec sep #$10			; set X,Y => 8bit
01fcee ldx #$00
01fcf0 txy
01fcf1 lda $1a35,y
01fcf4 sta $1a3d,x
01fcf7 phx
01fcf8 tax
01fcf9 lsr $1a3c
01fcfc ror a
01fcfd ror a
01fcfe and #$40
01fd00 xba
01fd01 lda $1a39
01fd04 bmi $fd0f
01fd06 lda $7ff274,x
01fd0a asl a
01fd0b asl a
01fd0c sta $1a3b
01fd0f xba
01fd10 plx
01fd11 ora $1a34
01fd14 ora $1a3b
01fd17 sta $1a3e,x
01fd1a inx
01fd1b inx
01fd1c iny
01fd1d cpy #$04
01fd1f bne $fcf1
01fd21 rep #$10			; set X,Y => 16bit
01fd23 rts				; exit routine



01fd24 sep #$20			; set A => 8bit
01fd26 ldx #$0000		; clear X
01fd29 lda $19bf
01fd2c sta $4202
01fd2f lda #$40
01fd31 sta $4203
01fd34 lda $19bd
01fd37 bit #$10
01fd39 beq $fd3d
01fd3b inx
01fd3c inx
01fd3d asl a
01fd3e rep #$20			; set A => 16bit
01fd40 and #$001e
01fd43 clc
01fd44 adc $fd4c,x
01fd47 clc
01fd48 adc $4216
01fd4b rts				; exit routine



01fd50 rep #$20			; set A => 16bit
01fd52 tya
01fd53 sep #$20			; set A => 8bit
01fd55 xba
01fd56 bpl $fd5e
01fd58 clc
01fd59 adc $1925
01fd5c bra $fd67
01fd5e cmp $1925
01fd61 bcc $fd67
01fd63 sec
01fd64 sbc $1925
01fd67 xba
01fd68 bpl $fd70
01fd6a clc
01fd6b adc $1924
01fd6e bra $fd79
01fd70 cmp $1924
01fd73 bcc $fd79
01fd75 sec
01fd76 sbc $1924
01fd79 tay
01fd7a rts				; exit routine



; ROUTINE: Copy tile data to WRAM (for certain maps, like first map "Level Forest") TODO: what all calls this?
; Note that the M flag is set so A is 8bit
						; set bank to 05
01fd7b phb					; save bank to stack
01fd7c lda #$05				; set A to $5
01fd7e pha					; push the $5 to the stack
01fd7f plb					; set the bank to $5 from the stack
						; setup destination address (WRAM)
01fd80 ldx #$d274			; lower 16 bits of destination address
01fd83 stx $2181			; set destination offset to $d274
01fd86 lda #$7f				; upper 8 bits of destination address
01fd88 sta $2183			; set destination bank to $7F
01fd8b ldx #$0000		; setup X as a counter starting at $0000
; start of loop - copy $8 blocks of $20 tiles {
	01fd8e lda $191a,x		; get value from $05191a (lowram)
	01fd91 bpl $fd9e		; if A isn't negative (if n flag = 0), branch to next section

	01fd93 ldy #$0020
	01fd96 jsr $e946
	01fd99 dey
	01fd9a bne $fd96
	01fd9c bra $fdc2

							; determine source address offset
	01fd9e xba					; swap the high and low bytes of A (save lower byte for later use)
	01fd9f stz $211b			; clear $211b-211c (multiplication registers [M7A] and [M7B])
									; mpy* = 01 00 00 ($000001)
	01fda2 lda #$03				; set A to $3
	01fda4 sta $211b			; copy A to [M7A]
									; mpy* = 00 03 00 ($000300)
	01fda7 xba					; swap the high and low bytes of A (bring back the byte from earlier)
	01fda8 sta $211c			; copy A to [M7B]
	01fdab rep #$20				; clear the M flag, so A is now 16bit
	01fdad lda #$8c80			; set A to $8c80
	01fdb0 clc					; clear the carry flag
	01fdb1 adc $2134			; add the multiplication result at $2134-2135 ([MPYL] and [MPYM]) to A
									; so mpy* contains an offset
	01fdb4 tay					; copy A to Y
	01fdb5 sep #$20				; set A => 8bit
	01fdb7 phx				; push X to the stack (save our loop counter)
	01fdb8 ldx #$0020		; setup X as a counter starting at $20
	; start of loop - copy $20 tiles to WRAM {
		01fdbb jsr $e90c		; jump to the "Copy one tile to WRAM" routine
		01fdbe dex				; decrement our counter
		01fdbf bne $fdbb		; if X > 0, go back to top of loop
	}
	01fdc1 plx				; pull our saved counter from the stack into X
	01fdc2 inx				; increment our counter
	01fdc3 cpx #$0008		; compare X to $0008
	01fdc6 bne $fd8e		; if x != 8, go back to top of loop
}
						; set bank to 05
01fdc8 lda #$05				; set A to $5
01fdca pha					; push the $5 to the stack
01fdcb plb					; set the bank to $5 from the stack
01fdcc ldx #$f274
01fdcf stx $2181
01fdd2 ldx #$0000		; clear X
01fdd5 lda $191a,x
01fdd8 phx
01fdd9 sta $211b
01fddc stz $211b
01fddf lda #$10
01fde1 sta $211c
01fde4 ldy $2134
01fde7 ldx #$0010
01fdea lda $f280,y
01fded and #$07
01fdef sta $2180
01fdf2 lda $f280,y
01fdf5 and #$70
01fdf7 lsr a
01fdf8 lsr a
01fdf9 lsr a
01fdfa lsr a
01fdfb sta $2180
01fdfe iny
01fdff dex
01fe00 bne $fdea
01fe02 plx
01fe03 inx
01fe04 cpx #$0008
01fe07 bne $fdd5
01fe09 plb
01fe0a rts				; exit routine



01fe0b phb				; save databank to stack
01fe0c lda #$04
01fe0e pha
01fe0f plb
01fe10 stz $2181
01fe13 ldx #$7f40
01fe16 stx $2182
01fe19 ldy #$9a20
01fe1c jsr $e90c
01fe1f cpy #$9ba0
01fe22 bne $fe1c
01fe24 ldy #$ca20
01fe27 jsr $e90c
01fe2a cpy #$d1a0
01fe2d bne $fe27
01fe2f ldx #$0000		; clear X
01fe32 lda $1910
01fe35 bpl $fe3a
01fe37 ldx #$000c
01fe3a lda #$7f
01fe3c pha
01fe3d plb
01fe3e ldy #$4000
01fe41 lda #$0c
01fe43 pha
01fe44 lda $018a14,x
01fe48 inx
01fe49 phx
01fe4a ldx #$0008
01fe4d asl a
01fe4e pha
01fe4f bcc $fe56
01fe51 phy
01fe52 jsr $e92f
01fe55 ply
01fe56 rep #$20			; set A => 16bit
01fe58 tya
01fe59 clc
01fe5a adc #$0020
01fe5d tay
01fe5e sep #$20			; set A => 8bit
01fe60 pla
01fe61 dex
01fe62 bne $fe4d
01fe64 plx
01fe65 pla
01fe66 dec
01fe67 bne $fe43
01fe69 plb
01fe6a rts				; exit routine



01fe6b lda #$00
01fe6d xba
01fe6e lda $1a4c
01fe71 asl a
01fe72 tax
01fe73 jsr ($fe7a,x)
01fe76 jsr $ffc1
01fe79 rts				; exit routine



01fe88 lda #$20
01fe8a bra $fe8e
01fe8c lda #$40
01fe8e sta $1a2c
01fe91 lda $1a53
01fe94 sta $1a34
01fe97 lda $1a55
01fe9a jsr $fcbf
01fe9d ldy #$0000
01fea0 rep #$20			; set A => 16bit
01fea2 lda $1a3d
01fea5 sta $0900,y
01fea8 lda $1a3f
01feab sta $0902,y
01feae lda $1a41
01feb1 sta $0980,y
01feb4 lda $1a43
01feb7 sta $0982,y
01feba iny
01febb iny
01febc iny
01febd iny
01febe cpy #$0040
01fec1 bne $fea2
01fec3 sep #$20			; set A => 8bit
01fec5 jsr $ff81
01fec8 jsr $ffab
01fecb jsr $8400
01fece dec $1a2c
01fed1 bne $fec8
01fed3 rts				; exit routine



01fed4 lda $1a53
01fed7 sta $1a34
01feda jsr $ff81
01fedd ldx #$0000		; clear X
01fee0 rep #$20			; set A => 16bit
01fee2 lda $ff44,x
01fee5 sta $1a2f
01fee8 sep #$20			; set A => 8bit
01feea lda #$10
01feec sta $1a2c
01feef phx
01fef0 ldx $1a2f
01fef3 jsr $ff4c
01fef6 jsr $ffab
01fef9 jsr $8400
01fefc rep #$20			; set A => 16bit
01fefe lda $1a2f
01ff01 clc
01ff02 adc #$0020
01ff05 sta $1a2f
01ff08 sep #$20			; set A => 8bit
01ff0a dec $1a2c
01ff0d bne $fef0
01ff0f plx
01ff10 inx
01ff11 inx
01ff12 cpx #$0008
01ff15 bne $fee0
01ff17 lda $1a4c
01ff1a cmp #$06
01ff1c bne $ff43
01ff43 rts				; exit routine



01ff4c ldy #$0000
01ff4f lda $7f9000,x
01ff53 phx
01ff54 phy
01ff55 jsr $fcbf
01ff58 ply
01ff59 plx
01ff5a rep #$20			; set A => 16bit
01ff5c lda $1a3d
01ff5f sta $0900,y
01ff62 lda $1a3f
01ff65 sta $0902,y
01ff68 lda $1a41
01ff6b sta $0980,y
01ff6e lda $1a43
01ff71 sta $0982,y
01ff74 sep #$20			; set A => 8bit
01ff76 inx
01ff77 iny
01ff78 iny
01ff79 iny
01ff7a iny
01ff7b cpy #$0040
01ff7e bne $ff4f
01ff80 rts				; exit routine



01ff81 lda #$80
01ff83 sta $1a13
01ff86 ldx #$0040
01ff89 stx $1a24
01ff8c stx $1a26
01ff8f ldx #$0000		; clear X
01ff92 stx $1a28
01ff95 stx $1a2a
01ff98 ldx #$0900
01ff9b stx $1a1c
01ff9e ldx #$0980
01ffa1 stx $1a1e
01ffa4 ldx #$47c0
01ffa7 stx $1a14
01ffaa rts				; exit routine



01ffab rep #$20			; set A => 16bit
01ffad lda $1a14
01ffb0 clc
01ffb1 adc #$0040
01ffb4 sta $1a14
01ffb7 clc
01ffb8 adc #$0020
01ffbb sta $1a16
01ffbe sep #$20			; set A => 8bit
01ffc0 rts				; exit routine



01ffc1 lda $0e89
01ffc4 sec
01ffc5 sbc #$08
01ffc7 sta $192d
01ffca lda $0e8a
01ffcd sec
01ffce sbc #$06
01ffd0 sta $192e
01ffd3 ldx #$000f
01ffd6 stx $19bf
01ffd9 ldx #$0000		; clear X
01ffdc stx $19bd
01ffdf phx
01ffe0 jsr $f977
01ffe3 jsr $83be
01ffe6 inc $192e
01ffe9 plx
01ffea stx $19bf
01ffed inx
01ffee cpx #$000d
01fff1 bne $ffdf
01fff3 ldx #$0000		; clear X
01fff6 stx $19bf
01fff9 rts				; exit routine



028000 phb				; save databank to stack
028001 phd				; save direct page to stack
028002 php				; save processor status to stack
028003 rep #$30			; set A,X,Y => 16bit
028005 pea $0400
028008 pld
028009 stz $00
02800b ldx #$0400
02800e ldy #$0402
028011 lda #$00fd
028014 mvn $00,$00
028017 stz $0a00
02801a ldx #$0a00
02801d ldy #$0a02
028020 lda #$000a
028023 mvn $00,$00
028026 lda #$ffff
028029 sta $1100
02802c ldx #$1100
02802f ldy #$1102
028032 lda #$027d
028035 mvn $00,$00
028038 ldx #$8f4a
02803b ldy #$0496
02803e lda #$0009
028041 mvn $02,$00
028044 ldx #$1000
028047 ldy #$1800
02804a lda #$00ff
02804d mvn $00,$00
028050 phk
028051 plb
028052 sep #$20			; set A => 8bit
028054 rep #$10			; set X,Y => 16bit
028056 lda $0513
028059 cmp #$ff
02805b beq $8060
02805d sta $0514
028060 jsr $8c06
028063 jsl $02da98
028067 sep #$20			; set A => 8bit
028069 rep #$10			; set X,Y => 16bit
02806b lda #$ff
02806d sta $0a84
028070 jsl $02d149
028074 sep #$20			; set A => 8bit
028076 rep #$10			; set X,Y => 16bit
028078 jsr $8187
02807b stz $b5
02807d lda #$ff
02807f sta $1050
028082 sta $1051
028085 sta $1052
028088 sta $10d0
02808b sta $10d1
02808e sta $10d2
028091 lda $76
028093 dec
028094 beq $80aa
028096 jsl $00d2c6
02809a lda $1020
02809d and #$40
02809f beq $80aa
0280a1 jsr $8219
0280a4 inc
0280a5 bne $80aa
0280a7 jmp $815f
0280aa jsr $82f9
0280ad stz $89
0280af lda #$00
0280b1 xba
0280b2 lda $89
0280b4 tax
0280b5 lda $7c,x
0280b7 sta $8b
0280b9 phd				; save direct page to stack
0280ba jsr $8f22
0280bd lda $21
0280bf xba
0280c0 lda $10
0280c2 pld
0280c3 inc
0280c4 beq $810f
0280c6 xba
0280c7 and #$c0
0280c9 bne $810f
0280cb jsr $83a8
0280ce rep #$30			; set A,X,Y => 16bit
0280d0 phd				; save direct page to stack
0280d1 jsr $8f22
0280d4 lda $42
0280d6 and #$7f7f
0280d9 sta $42
0280db lda $44
0280dd and #$7f7f
0280e0 sta $44
0280e2 lda $46
0280e4 and #$7f7f
0280e7 sta $46
0280e9 lda $48
0280eb and #$7f7f
0280ee sta $48
0280f0 lda $4a
0280f2 and #$7f7f
0280f5 sta $4a
0280f7 sep #$20			; set A => 8bit
0280f9 rep #$10			; set X,Y => 16bit
0280fb lda #$ff
0280fd sta $50
0280ff sta $51
028101 sta $52
028103 pld
028104 jsr $8725
028107 lda $95
028109 bne $813f
02810b lda $94
02810d bne $8157
02810f inc $89
028111 lda $89
028113 cmp $8a
028115 bcc $80af
028117 jsr $886b
02811a jsr $8725
02811d lda $95
02811f bne $813f
028121 lda $94
028123 bne $8157
028125 stz $8b
028127 phd				; save direct page to stack
028128 jsr $8f22
02812b lda $20
02812d and #$8f
02812f sta $20
028131 pld
028132 inc $8b
028134 lda $8b
028136 cmp #$05
028138 bcc $8127
02813a inc $b5
02813c jmp $8096
02813f lda #$7a
028141 jsl $009776
028145 bne $814c
028147 lda #$04
028149 sta $0500
02814c ldx #$d542
02814f jsr $8835
028152 jsr $8938
028155 bra $8163
028157 ldx #$d530
02815a jsr $8835
02815d bra $8163
02815f sep #$20
028161 rep #$10
028163 jsl $02d132
028167 lda #$01
028169 sta $8b
02816b phd				; save direct page to stack
02816c jsr $8f22
02816f ldx #$0003
028172 lda $4c,x
028174 sta $26,x
028176 clc
028177 adc $2a,x
028179 sta $22,x
02817b dex
02817c bpl $8172
02817e pld
02817f dec $8b
028181 bpl $816b
028183 plp
028184 pld
028185 plb
028186 rtl				; exit routine



028187 sep #$20			; set A => 8bit
028189 rep #$10			; set X,Y => 16bit
02818b lda $af
02818d and #$80
02818f bne $8207
028191 lda $1110
028194 clc
028195 adc $1190
028198 clc
028199 adc $1190
02819c inc
02819d inc
02819e inc
02819f sta $4204
0281a2 stz $4205
0281a5 lda $b3
0281a7 sta $4206
0281aa lda $1010
0281ad sta $a0
0281af lda $1090
0281b2 bmi $81ba
0281b4 clc
0281b5 adc $a0
0281b7 lsr a
0281b8 sta $a0
0281ba lda $4214
0281bd sec
0281be sbc $a0
0281c0 beq $8204
0281c2 bpl $81c7
0281c4 eor #$ff
0281c6 inc
0281c7 pha
0281c8 lda #$00
0281ca sbc #$00
0281cc sta $a0
0281ce pla
0281cf cmp #$0b
0281d1 bcc $81d5
0281d3 lda #$0a
0281d5 sta $4202
0281d8 lda #$0a
0281da sta $4203
0281dd lda #$64
0281df sec
0281e0 sbc $4216
0281e3 sta $a2
0281e5 lda #$65
0281e7 sta $00a8
0281ea jsl $009783
0281ee lda $00a9
0281f1 cmp $a2
0281f3 bcc $8204
0281f5 lda $a0
0281f7 beq $8207
0281f9 ldx #$d2d2
0281fc jsr $8835
0281ff lda #$02
028201 sta $76
028203 rts				; exit routine



028204 stz $76
028206 rts				; exit routine



028207 lda $0514
02820a cmp #$14
02820c bcs $8204
02820e ldx #$d2de
028211 jsr $8835
028214 lda #$01
028216 sta $76
028218 rts				; exit routine
028219 sep #$20
02821b rep #$10
02821d lda $af
02821f and #$40
028221 beq $8226
028223 jmp $82ee
028226 lda $b5
028228 bne $8233
02822a lda $76
02822c cmp #$02
02822e bne $8233
028233 stz $a0
028235 ldx #$0000
028238 lda $1021
02823b and #$f0
02823d bne $8245
02823f lda $1024
028242 inx
028243 sta $a0
028245 lda $10a1
028248 and #$f0
02824a bne $8255
02824c lda $a0
02824e clc
02824f adc $10a4
028252 sta $a0
028254 inx
028255 cpx #$0002
028258 bne $825c
02825a lsr $a0
02825c rep #$30
02825e lda #$0001
028261 sta $a2
028263 ldx #$0000
028266 lda $1121
028269 and #$00f0
02826c bne $8277
02826e lda $1124
028271 and #$00ff
028274 inx
028275 sta $a2
028277 lda $11a1
02827a and #$00f0
02827d bne $828b
02827f lda $11a4
028282 and #$00ff
028285 clc
028286 adc $a2
028288 inx
028289 sta $a2
02828b lda $1221
02828e and #$00f0
028291 bne $829f
028293 lda $1224
028296 and #$00ff
028299 clc
02829a adc $a2
02829c inx
02829d sta $a2
02829f lda $a2
0282a1 sta $4204
0282a4 sep #$20
0282a6 rep #$10
0282a8 txa
0282a9 jsl $009726
0282ad lda $4214
0282b0 sta $a2
0282b2 stz $a3
0282b4 sta $4204
0282b7 stz $4205
0282ba lda #$05
0282bc jsl $009726
0282c0 lda $4214
0282c3 sta $4202
0282c6 lda $b5
0282c8 sta $4203
0282cb php
0282cc plp
0282cd lda $4216
0282d0 inc
0282d1 sta $00a8
0282d4 jsl $009783
0282d8 lda $00a9
0282db eor #$ff
0282dd inc
0282de clc
0282df adc $a2
0282e1 cmp $a0
0282e3 bcs $82ee
0282e5 ldx #$d2ee
0282e8 jsr $8835
0282eb lda #$ff
0282ed rts
0282ee ldx #$d2fd
0282f1 jsr $8835
0282f4 lda #$01
0282f6 sta $76
0282f8 rts



0282f9 sep #$20			; set A => 8bit
0282fb rep #$10			; set X,Y => 16bit
0282fd pea $0400
028300 pld
028301 stz $8a
028303 stz $87
028305 lda $76
028307 dec
028308 beq $8313
02830a dec
02830b beq $831d
02830d lda #$05
02830f sta $88
028311 bra $8321
028313 lda #$02
028315 sta $87
028317 lda #$03
028319 sta $88
02831b bra $8321
02831d lda #$02
02831f sta $88
028321 lda $87
028323 sta $a0
028325 lda $88
028327 sta $a2
028329 stz $a4
02832b stz $a5
02832d lda $a0
02832f sta $8b
028331 phd				; save direct page to stack
028332 jsr $8f22
028335 lda $21
028337 and #$c0
028339 beq $833f
02833b lda #$02
02833d bra $8344
02833f inc $048a
028342 lda $24
028344 pld
028345 pha
028346 lsr a
028347 sta $00a8
02834a jsl $009783
02834e lda $00a9
028351 clc
028352 adc $01,s
028354 ldy $a4
028356 sta $0481,y
028359 lda $a0
02835b sta $047c,y
02835e pla
02835f inc $a4
028361 inc $a0
028363 dec $a2
028365 bne $832d
028367 pea $0400
02836a pld
02836b sep #$30			; set A,X,Y => 8bit
02836d stz $86
02836f ldx $88
028371 dex
028372 beq $839d
028374 lda $81,x
028376 dex
028377 cmp $81,x
028379 beq $837d
02837b bcs $8380
02837d inx
02837e bra $8371
028380 tay
028381 lda $81,x
028383 inx
028384 sta $81,x
028386 dex
028387 tya
028388 sta $81,x
02838a inx
02838b lda $7c,x
02838d dex
02838e tay
02838f lda $7c,x
028391 inx
028392 sta $7c,x
028394 dex
028395 tya
028396 sta $7c,x
028398 inx
028399 inc $86
02839b bra $8371
02839d lda $86
02839f bne $836d
0283a1 sep #$20			; set A => 8bit
0283a3 rep #$10			; set X,Y => 16bit
0283a5 stz $76
0283a7 rts				; exit routine



0283a8 ldx #$0000		; clear X
0283ab stx $d1
0283ad stx $d3
0283af stx $d5
0283b1 stx $d7
0283b3 stx $d9
0283b5 lda #$ff
0283b7 sta $bc
0283b9 sta $bd
0283bb stz $b6
0283bd phd				; save direct page to stack
0283be jsr $8f22
0283c1 lda $60
0283c3 sta $043b
0283c6 lda $21
0283c8 pld
0283c9 bit #$c0
0283cb beq $83ce
0283ce and #$38
0283d0 beq $83ec
0283ec phd				; save direct page to stack
0283ed jsr $8f22
0283f0 lda $21
0283f2 sta $0411
0283f5 lda $10
0283f7 sta $0400
0283fa lda $2e
0283fc sta $0416
0283ff lda $2f
028401 sta $0417
028404 lda $40
028406 sta $0428
028409 lda $22
02840b sta $0412
02840e lda $23
028410 sta $0413
028413 lda $24
028415 sta $0414
028418 lda $25
02841a sta $0415
02841d lda $20
02841f sta $0410
028422 pld
028423 lda $11
028425 and #$08
028427 bne $842f
028429 lda $10
02842b and #$80
02842d beq $8443
02842f jsr $a633
028432 lda $11
028434 and #$08
028436 bne $8443
028438 lda $8b
02843a pha
02843b php				; save processor status to stack
02843c jsr $a278
02843f plp
028440 pla
028441 sta $8b
028443 phd				; save direct page to stack
028444 jsr $8f22
028447 lda $31
028449 pha
02844a lda $50
02844c pha
02844d lda $51
02844f pha
028450 lda $52
028452 sta $043a
028455 pla
028456 sta $0439
028459 pla
02845a sta $0438
02845d bne $8464
02845f pla
028460 sta $043a
028463 pha
028464 pla
028465 pld
028466 lda $38
028468 inc
028469 bne $846c
02846b rts				; exit routine



02846c dec
02846d lda $38
02846f cmp #$01
028471 bne $8477
028473 lda #$1e
028475 bra $847d
028477 cmp #$11
028479 bne $8486
02847b lda #$1f
02847d stz $8d
02847f stz $8e
028481 sta $de
028483 jmp $85c9
028486 lda $11
028488 and #$01
02848a beq $84b1
0284b1 jsr $8b0f
0284b4 jsr $8ec0
0284b7 lda $39
0284b9 bit #$80
0284bb beq $8505
0284bd bit #$01
0284bf bne $84dd
0284c1 stz $8d
0284c3 lda #$01
0284c5 sta $8e
0284c7 lda $1021
0284ca and #$c0
0284cc beq $84d2
0284d2 lda $10a1
0284d5 and #$c0
0284d7 beq $8509
0284dd lda #$02
0284df sta $8d
0284e1 jsr $8532
0284e4 inc
0284e5 beq $84ee
0284e7 xba
0284e8 and #$80
0284ea bne $84ee
0284ec bra $84ff
0284ee inc $8d
0284f0 jsr $8532
0284f3 inc
0284f4 beq $84ee
0284f6 xba
0284f7 and #$80
0284f9 bne $84fd
0284fb bra $84ff
0284fd inc $8d
0284ff lda #$04
028501 sta $8e
028503 bra $8509
028505 sta $8d
028507 sta $8e
028509 lda $8e
02850b sta $91
02850d lda $8d
02850f sta $90
028511 sta $8f
028513 jsr $853d
028516 inc $8f
028518 lda $8f
02851a sta $8d
02851c lda $8e
02851e cmp $8d
028520 bcs $8513
028522 jsl $02ed05
028526 jsr $8600
028529 jsl $02d149
02852d jsl $009b02
028531 rts				; exit routine



028532 phd				; save direct page to stack
028533 jsr $8f2f
028536 lda $21
028538 xba
028539 lda $10
02853b pld
02853c rts				; exit routine



02853d ldx #$0000		; clear X
028540 stx $77
028542 lda $8b
028544 cmp #$02
028546 bcs $8554
028548 lda $dc
02854a and #$c0
02854c bne $8590
02854e lda $3a
028550 cmp #$11
028552 beq $8590
028554 phd				; save direct page to stack
028555 jsr $8f2f
028558 lda $21
02855a xba
02855b lda $10
02855d pld
02855e inc
02855f bne $8562
028561 rts				; exit routine



028562 xba
028563 and #$c0
028565 beq $8568
028568 lda $8b
02856a cmp #$02
02856c bcc $8590
02856e phd				; save direct page to stack
02856f jsr $8f2f
028572 lda $20
028574 pld
028575 and #$30
028577 beq $8590
028579 and #$10
02857b lsr a
02857c lsr a
02857d lsr a
02857e lsr a
02857f sta $8d
028581 phd
028582 jsr $8f2f
028585 lda $21
028587 pld
028588 and #$fa
02858a beq $8590
02858c lda $8f
02858e sta $8d
028590 lda $38
028592 cmp #$30
028594 bne $859e
028596 lda $3a
028598 jsl $00dbf9
02859c bra $85c9
02859e lda $8d
0285a0 cmp $90
0285a2 bne $85c9
0285a4 lda $38
0285a6 cmp #$20
0285a8 bne $85c9
0285aa lda $3a
0285ac sec
0285ad sbc #$14
0285af sta $4204
0285b2 stz $4205
0285b5 lda #$04
0285b7 jsl $009726
0285bb lda #$00
0285bd xba
0285be lda $4214
0285c1 tax
0285c2 phd				; save direct page to stack
0285c3 jsr $8f22
0285c6 dec $18,x
0285c8 pld
0285c9 sep #$20			; set A => 8bit
0285cb rep #$10			; set X,Y => 16bit
0285cd phd				; save direct page to stack
0285ce jsr $8f2f
0285d1 lda $60
0285d3 sta $0475
0285d6 lda $21
0285d8 pld
0285d9 lda #$00
0285db xba
0285dc lda $38
0285de bne $85e9
0285e0 lda $3a
0285e2 inc
0285e3 bne $85e9
0285e9 lda $de
0285eb asl a
0285ec tax
0285ed jsr ($a1d7,x)
0285f0 sep #$20			; set A => 8bit
0285f2 rep #$10			; set X,Y => 16bit
0285f4 lda #$00
0285f6 xba
0285f7 lda $8d
0285f9 asl a
0285fa tax
0285fb ldy $77
0285fd sty $d1,x
0285ff rts				; exit routine



028600 ldx #$0400
028603 stx $8d
028605 jsr $8611
028608 inc $8d
02860a lda $8e
02860c cmp $8d
02860e bcs $8605
028610 rts				; exit routine



028611 phd				; save direct page to stack
028612 jsr $8f2f
028615 lda $21
028617 pld
028618 and #$c0
02861a beq $861d
02861c rts				; exit routine



02861d rep #$30			; set A,X,Y => 16bit
02861f lda $8d
028621 and #$000f
028624 asl a
028625 tax
028626 lda $d1,x
028628 bne $862f
02862a sep #$20			; set A => 8bit
02862c rep #$10			; set X,Y => 16bit
02862e rts				; exit routine



02862f sta $a0
028631 bpl $8642
028633 phd				; save direct page to stack
028634 jsr $8f2f
028637 lda $14
028639 sec
02863a sbc $04a0
02863d sta $14
02863f pld
028640 bra $86a3
028642 lda $04a0
028645 cmp #$7fff
028648 beq $862a
02864a cmp #$7ffe
02864d beq $862a
02864f phd				; save direct page to stack
028650 jsr $8f2f
028653 lda $14
028655 cmp $04a0
028658 beq $865e
02865a bcc $865e
02865c bra $8695
02865e sep #$20			; set A => 8bit
028660 rep #$10			; set X,Y => 16bit
028662 lda #$80
028664 sta $21
028666 ldx #$0000		; clear X
028669 stx $14
02866b pld
02866c lda #$00
02866e xba
02866f lda $8d
028671 cmp #$02
028673 bcc $8690
028675 dec
028676 dec
028677 tax
028678 lda #$ff
02867a sta $0a02,x
02867d phd				; save direct page to stack
02867e jsr $8f2f
028681 lda $60
028683 pld
028684 phd				; save direct page to stack
028685 pea $0f18
028688 pld
028689 jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
02868d pld
02868e dec $b3
028690 rep #$30			; set A,X,Y => 16bit
028692 bra $86a3
028695 lda $14
028697 sec
028698 sbc $04a0
02869b sta $14
02869d lda #$0010
0286a0 trb $21
0286a2 pld
0286a3 phd				; save direct page to stack
0286a4 jsr $8f2f
0286a7 lda $14
0286a9 sta $0098
0286ac lda #$0004
0286af sta $009c
0286b2 jsl $0096b3
0286b6 lda $009e
0286b9 sta $0098
0286bc lda $00a0
0286bf sta $009a
0286c2 lda $16
0286c4 sta $009c
0286c7 jsl $0096e4
0286cb sep #$20			; set A => 8bit
0286cd rep #$10			; set X,Y => 16bit
0286cf lda $009e
0286d2 eor #$ff
0286d4 clc
0286d5 adc #$04
0286d7 bpl $86db
0286d9 lda #$00
0286db sta $04a0
0286de lda #$00
0286e0 xba
0286e1 lda $048d
0286e4 tax
0286e5 phx
0286e6 lda #$00
0286e8 xba
0286e9 lda $0a20,x
0286ec asl a
0286ed asl a
0286ee clc
0286ef adc $04a0
0286f2 tax
0286f3 lda $8715,x
0286f6 plx
0286f7 sta $04bf,x
0286fa sta $0a05,x
0286fd pha
0286fe lda $60
028700 cmp #$4c
028702 bcc $8709
028709 pla
02870a lda $2f
02870c and #$fc
02870e ora $04a0
028711 sta $2f
028713 pld
028714 rts				; exit routine



028725 sep #$20			; set A => 8bit
028727 rep #$10			; set X,Y => 16bit
028729 lda $1121
02872c and $11a1
02872f and $1221
028732 and #$80
028734 sta $95
028736 lda $1021
028739 and #$c0
02873b bne $8740
02873d stz $94
02873f rts				; exit routine



028740 lda $1090
028743 cmp #$ff
028745 beq $874e
028747 lda $10a1
02874a and #$c0
02874c beq $873d
02874e sta $94
028750 rts
028751 sep #$20
028753 rep #$10
028755 phd
028756 stz $8b
028758 jsr $8f22
02875b lda $10
02875d sta $04a0
028760 inc
028761 cmp #$2a
028763 bcc $8767
028767 sta $10
028769 lda #$2a
02876b sta $0505
02876e ldx #$d325
028771 jsr $8835
028774 rep #$30
028776 lda $16
028778 pha
028779 clc
02877a adc #$0028
02877d sta $16
02877f sta $0098
028782 lda $14
028784 sta $009c
028787 jsl $0096b3
02878b lda $009e
02878e sta $0098
028791 lda $00a0
028794 sta $009a
028797 pla
028798 sta $009c
02879b jsl $0096e4
02879f lda $009e
0287a2 sta $14
0287a4 sep #$20
0287a6 rep #$10
0287a8 lda $10
0287aa sta $04a2
0287ad lda $1b
0287af sec
0287b0 sbc $04a0
0287b3 clc
0287b4 adc $10
0287b6 sta $1b
0287b8 lsr $04a0
0287bb lsr $04a2
0287be lda $1c
0287c0 sec
0287c1 sbc $04a0
0287c4 clc
0287c5 adc $04a2
0287c8 sta $1c
0287ca lsr $04a0
0287cd lsr $04a2
0287d0 lda $1d
0287d2 sec
0287d3 sbc $04a0
0287d6 clc
0287d7 adc $04a2
0287da sta $1d
0287dc inc $4c
0287de inc $4c
0287e0 inc $4c
0287e2 inc $4d
0287e4 inc $4d
0287e6 inc $4e
0287e8 inc $4e
0287ea inc $4f
0287ec ldx #$1026
0287ef ldy #$0004
0287f2 lda $0000,x
0287f5 cmp #$63
0287f7 bcc $87fb
0287fb sta $0000,x
0287fe inx
0287ff dey
028800 bne $87f2
028802 lda $4c
028804 sta $26
028806 clc
028807 adc $2a
028809 sta $22
02880b lda $4d
02880d sta $27
02880f adc $2b
028811 sta $23
028813 lda $4e
028815 sta $28
028817 adc $2c
028819 sta $24
02881b lda $4f
02881d sta $29
02881f adc $2d
028821 sta $25
028823 sep #$20
028825 rep #$10
028827 lda $10
028829 lsr a
02882a clc
02882b adc #$4b
02882d sta $40
02882f pld
028830 jsl $009b02
028834 rts
028835 stx $0017
028838 jsl $00d029
02883c rts				; exit routine



02883d sep #$20			; set A => 8bit
02883f rep #$10			; set X,Y => 16bit
028841 lda $8d
028843 cmp #$02
028845 beq $8835
028847 bcc $8835
028849 lda $39
02884b and #$80
02884d beq $8835
02884f ldy #$0000
028852 lda $75
028854 cmp $04bc,y
028857 bne $885a
028859 rts				; exit routine



02885a lda $8d
02885c cmp #$03
02885e beq $8835
028860 lda $75
028862 iny
028863 cmp $04bc,y
028866 bne $8869
028868 rts				; exit routine



028869 bra $8835
02886b sep #$20			; set A => 8bit
02886d rep #$10			; set X,Y => 16bit
02886f ldx #$0000		; clear X
028872 stx $d1
028874 stx $d3
028876 stx $d5
028878 stx $d7
02887a stx $d9
02887c stz $89
02887e lda #$00
028880 pha
028881 lda #$00
028883 xba
028884 lda $89
028886 tax
028887 lda $7c,x
028889 sta $8b
02888b phd				; save direct page to stack
02888c jsr $8f22
02888f lda $10
028891 inc
028892 beq $88d0
028894 lda $21
028896 bit #$c0
028898 bne $88d0
02889a and #$04
02889c beq $88d0
0288d0 pld
0288d1 inc $89
0288d3 lda $89
0288d5 cmp #$05
0288d7 bcc $8881
0288d9 pla
0288da bne $88dd
0288dc rts				; exit routine



028938 php				; save processor status to stack
028939 sep #$20			; set A => 8bit
02893b rep #$10			; set X,Y => 16bit
02893d ldx #$0000		; clear X
028940 stx $a0
028942 stx $a2
028944 ldx #$04ac
028947 lda #$02
028949 sta $8b
02894b phd				; save direct page to stack
02894c jsr $8f22
02894f lda $10
028951 inc
028952 bne $8957
028954 pld
028955 bra $899f
028957 lda $53
028959 pha
02895a lda $54
02895c pha
02895d cmp #$42
02895f bcs $8965
028961 lda #$03
028963 bra $896f
02896f sta $4202
028972 pla
028973 sta $4203
028976 pha
028977 pla
028978 rep #$30			; set A,X,Y => 16bit
02897a lda $4216
02897d clc
02897e adc $04a2
028981 sta $04a2
028984 sep #$20			; set A => 8bit
028986 rep #$10			; set X,Y => 16bit
028988 pla
028989 sta $4203
02898c pha
02898d pla
02898e rep #$30			; set A,X,Y => 16bit
028990 lda $4216
028993 clc
028994 adc $04a0
028997 sta $04a0
02899a sep #$20			; set A => 8bit
02899c rep #$10			; set X,Y => 16bit
02899e pld
02899f inx
0289a0 inc $8b
0289a2 lda $8b
0289a4 cmp #$05
0289a6 bcc $894b
0289a8 ldx $a2
0289aa phx
0289ab ldx #$d309
0289ae jsr $8835
0289b1 jsr $8a43
0289b4 plx
0289b5 stx $a2
0289b7 ldx #$d319
0289ba jsr $8835
0289bd lda #$00
0289bf xba
0289c0 lda $0514
0289c3 cmp #$14
0289c5 bcc $89ca
0289c7 jmp $8a41
0289ca tax
0289cb dec $0fd4,x
0289ce beq $89de
0289d0 lda $0fd4,x
0289d3 sta $009e
0289d6 ldx #$d59e
0289d9 jsr $8835
0289dc bra $89c7
0289de pha
0289df lda #$81
0289e1 clc
0289e2 adc $01,s
0289e4 jsl $00976b
0289e8 lda #$95
0289ea clc
0289eb adc $01,s
0289ed jsl $009760
0289f1 pla
0289f2 asl a
0289f3 tax
0289f4 phx
0289f5 ldx #$d5b0
0289f8 jsr $8835
0289fb plx
0289fc rep #$30			; set A,X,Y => 16bit
0289fe lda $07efa1,x
028a02 bit #$8000
028a05 beq $8a1d
028a07 and #$7fff
028a0a pha
028a0b asl a
028a0c clc
028a0d adc $01,s
028a0f sta $a0
028a11 pla
028a12 ldx #$d5bd
028a15 jsr $8835
028a18 jsr $8a43
028a1b bra $8a41
028a41 plp
028a42 rts				; exit routine



028a43 sep #$20			; set A => 8bit
028a45 rep #$10			; set X,Y => 16bit
028a47 sec
028a48 lda $0512
028a4b cmp $1013
028a4e beq $8a53
028a50 bcc $8a64
028a52 rts				; exit routine



028a53 rep #$30			; set A,X,Y => 16bit
028a55 lda $0510
028a58 cmp $1011
028a5b beq $8a64
028a5d bcc $8a64
028a5f sep #$20			; set A => 8bit
028a61 rep #$10			; set X,Y => 16bit
028a63 rts				; exit routine
028a64 sep #$20
028a66 rep #$10
028a68 jmp $8751



028ae0 php				; save processor status to stack
028ae1 phb				; save databank to stack
028ae2 phd				; save direct page to stack
028ae3 phk
028ae4 plb
028ae5 pea $0400
028ae8 pld
028ae9 sep #$20			; set A => 8bit
028aeb rep #$10			; set X,Y => 16bit
028aed ldx #$0000		; clear X
028af0 lda $3a
028af2 cmp $8b06,x
028af5 bcc $8afa
028af7 inx
028af8 bra $8af2
028afa lda $8b0a,x
028afd sta $38
028aff jsr $8b0f
028b02 pld
028b03 plb
028b04 plp
028b05 rtl				; exit routine



028b0f pea $0400
028b12 pld
028b13 sep #$20			; set A => 8bit
028b15 rep #$10			; set X,Y => 16bit
028b17 lda #$00
028b19 xba
028b1a lda $38
028b1c lsr a
028b1d lsr a
028b1e lsr a
028b1f lsr a
028b20 tax
028b21 lda $8bfc,x
028b24 sta $4202
028b27 lda $3a
028b29 sec
028b2a sbc $8c01,x
028b2d sta $4203
028b30 rep #$30			; set A,X,Y => 16bit
028b32 txa
028b33 asl a
028b34 tax
028b35 lda $8bf2,x
028b38 clc
028b39 adc $4216
028b3c tax
028b3d sep #$20			; set A => 8bit
028b3f rep #$10			; set X,Y => 16bit
028b41 lda $38
028b43 cmp #$30
028b45 beq $8b5a
028b47 rep #$30			; set A,X,Y => 16bit
028b49 lda $0000,x
028b4c sta $db
028b4e sep #$20			; set A => 8bit
028b50 rep #$10			; set X,Y => 16bit
028b52 inx
028b53 inx
028b54 lda $38
028b56 cmp #$40
028b58 beq $8bab
028b5a rep #$30			; set A,X,Y => 16bit
028b5c phb				; save databank to stack
028b5d ldy #$04dd
028b60 lda #$0003
028b63 mvn $02,$00
028b66 plb
028b67 sep #$20			; set A => 8bit
028b69 rep #$10			; set X,Y => 16bit
028b6b lda $df
028b6d and #$c0
028b6f lsr a
028b70 lsr a
028b71 sta $e1
028b73 lda $de
028b75 and #$c0
028b77 ora $e1
028b79 lsr a
028b7a lsr a
028b7b lsr a
028b7c sta $e1
028b7e lsr a
028b7f clc
028b80 adc $e1
028b82 adc #$37
028b84 sta $e1
028b86 rep #$30			; set A,X,Y => 16bit
028b88 lda $de
028b8a and #$3f3f
028b8d sta $de
028b8f sep #$20			; set A => 8bit
028b91 rep #$10			; set X,Y => 16bit
028b93 lda $38
028b95 cmp #$30
028b97 bne $8b9a
028b99 rts				; exit routine



028b9a cmp #$10
028b9c beq $8bab
028b9e lda $0000,x
028ba1 sta $e2
028ba3 lda $38
028ba5 cmp #$20
028ba7 bne $8baa
028ba9 rts				; exit routine



028baa inx
028bab sep #$20			; set A => 8bit
028bad rep #$10			; set X,Y => 16bit
028baf jsr $8be9
028bb2 sta $e5
028bb4 xba
028bb5 and #$f0
028bb7 lsr a
028bb8 lsr a
028bb9 lsr a
028bba lsr a
028bbb sta $e4
028bbd lda $0000,x
028bc0 lsr a
028bc1 lsr a
028bc2 sta $e3
028bc4 lda $38
028bc6 cmp #$40
028bc8 beq $8bcb
028bca rts				; exit routine



028bcb jsr $8be8
028bce sta $e7
028bd0 xba
028bd1 and #$f0
028bd3 lsr a
028bd4 lsr a
028bd5 lsr a
028bd6 lsr a
028bd7 sta $e6
028bd9 jsr $8be8
028bdc sta $e9
028bde xba
028bdf and #$f0
028be1 lsr a
028be2 lsr a
028be3 lsr a
028be4 lsr a
028be5 sta $e8
028be7 rts				; exit routine



028be8 inx
028be9 lda $0000,x
028bec pha
028bed xba
028bee pla
028bef and #$0f
028bf1 rts				; exit routine



028c06 pea $0400
028c09 pld
028c0a sep #$20			; set A => 8bit
028c0c rep #$10			; set X,Y => 16bit
028c0e lda #$65
028c10 sta $00a8
028c13 jsl $009783
028c17 lda #$00
028c19 xba
028c1a lda $0513
028c1d cmp #$ff
028c1f bne $8c24
028c21 jmp $8c6e
028c24 rep #$30			; set A,X,Y => 16bit
028c26 pha
028c27 asl a
028c28 clc
028c29 adc $01,s
028c2b tax
028c2c pla
028c2d sep #$20			; set A => 8bit
028c2f rep #$10			; set X,Y => 16bit
028c31 cmp #$14
028c33 bcs $8c4d
028c35 lda #$00
028c37 xba
028c38 lda $00a9
028c3b cmp #$22
028c3d bcc $8c63
028c3f sec
028c40 sbc #$22
028c42 inx
028c43 cmp #$22
028c45 bcc $8c63
028c4d lda #$00
028c4f xba
028c50 lda $00a9
028c53 cmp #$22
028c55 bcc $8c63
028c57 sec
028c58 sbc #$22
028c5a inx
028c5b cmp #$22
028c5d bcc $8c63
028c5f sec
028c60 sbc #$22
028c62 inx
028c63 lda $ce12,x
028c66 sta $0515
028c69 lda #$ff
028c6b sta $0513
028c6e jmp $8cc8
028cc8 lda #$00
028cca xba
028ccb lda $0515
028cce rep #$30			; set A,X,Y => 16bit
028cd0 asl a
028cd1 asl a
028cd2 sep #$20			; set A => 8bit
028cd4 rep #$10			; set X,Y => 16bit
028cd6 tax
028cd7 ldy #$0000
028cda lda $ca6a,x
028cdd pha
028cde cmp #$ff
028ce0 beq $8ce4
028ce2 and #$7f
028ce4 sta $04ac,y
028ce7 sta $0a02,y
028cea pla
028ceb and #$80
028ced sta $04b0,y
028cf0 sta $0a0a,y
028cf3 inx
028cf4 iny
028cf5 tya
028cf6 cmp #$03
028cf8 bne $8cda
028cfa lda $ca6a,x
028cfd sta $af
028cff and #$30
028d01 sta $0a01
028d04 stz $b3
028d06 lda $ac
028d08 inc
028d09 beq $8d0d
028d0b inc $b3
028d0d lda $ad
028d0f inc
028d10 beq $8d14
028d12 inc $b3
028d14 lda $ae
028d16 inc
028d17 beq $8d1b
028d19 inc $b3
028d1b lda $b3
028d1d sta $b4
028d1f sta $0a00
028d22 ldx #$1100
028d25 stx $92
028d27 lda $ac
028d29 jsr $8d37
028d2c lda $ad
028d2e jsr $8d37
028d31 lda $ae
028d33 jsr $8d37
028d36 rts				; exit routine



028d37 inc
028d38 bne $8d49
028d3a rep #$30			; set A,X,Y => 16bit
028d3c lda $92
028d3e clc
028d3f adc #$0080
028d42 sta $92
028d44 sep #$20			; set A => 8bit
028d46 rep #$10			; set X,Y => 16bit
028d48 rts				; exit routine



028d49 dec
028d4a pha
028d4b pha
028d4c php				; save processor status to stack
028d4d rep #$30			; set A,X,Y => 16bit
028d4f lda $92
028d51 clc
028d52 adc #$0060
028d55 tax
028d56 tay
028d57 iny
028d58 iny
028d59 stz $0000,x
028d5c lda #$001d
028d5f phb				; save databank to stack
028d60 mvn $00,$00
028d63 plb
028d64 sep #$20			; set A => 8bit
028d66 rep #$10			; set X,Y => 16bit
028d68 plp
028d69 pla
028d6a pha
028d6b ldy #$0060
028d6e sta ($92),y
028d70 rep #$30			; set A,X,Y => 16bit
028d72 and #$00ff
028d75 asl a
028d76 asl a
028d77 asl a
028d78 asl a
028d79 adc #$cba0
028d7c tax
028d7d ldy $92
028d7f lda #$0010
028d82 phb				; save databank to stack
028d83 mvn $0c,$00
028d86 plb
028d87 sep #$20			; set A => 8bit
028d89 rep #$10			; set X,Y => 16bit
028d8b pla
028d8c sta $4202
028d8f lda #$03
028d91 sta $4203
028d94 rep #$30			; set A,X,Y => 16bit
028d96 lda #$c17c
028d99 clc
028d9a adc $4216
028d9d tax
028d9e sep #$20			; set A => 8bit
028da0 rep #$10			; set X,Y => 16bit
028da2 lda $0000,x
028da5 inx
028da6 ldy #$0010
028da9 sta ($92),y
028dab rep #$30			; set A,X,Y => 16bit
028dad lda #$0053
028db0 clc
028db1 adc $92
028db3 tay
028db4 lda #$0001
028db7 phb				; save databank to stack
028db8 mvn $02,$00
028dbb plb
028dbc sep #$20			; set A => 8bit
028dbe rep #$10			; set X,Y => 16bit
028dc0 pla
028dc1 pha
028dc2 sta $4202
028dc5 lda #$0e
028dc7 sta $4203
028dca rep #$30			; set A,X,Y => 16bit
028dcc lda #$c275
028dcf clc
028dd0 adc $4216
028dd3 tax
028dd4 lda $0000,x
028dd7 ldy #$0014
028dda sta ($92),y
028ddc iny
028ddd iny
028dde sta ($92),y
028de0 inx
028de1 inx
028de2 lda #$0020
028de5 clc
028de6 adc $92
028de8 tay
028de9 lda #$0080
028dec sta $0000,y
028def iny
028df0 iny
028df1 lda #$0003
028df4 phb				; save databank to stack
028df5 mvn $02,$00
028df8 plb
028df9 phx
028dfa lda #$0022
028dfd clc
028dfe adc $92
028e00 tax
028e01 adc #$0004
028e04 tay
028e05 lda #$0003
028e08 phb				; save databank to stack
028e09 mvn $00,$00
028e0c plb
028e0d lda #$0022
028e10 clc
028e11 adc $92
028e13 tax
028e14 adc #$002a
028e17 tay
028e18 lda #$0003
028e1b phb				; save databank to stack
028e1c mvn $00,$00
028e1f plb
028e20 plx
028e21 lda $0000,x
028e24 inx
028e25 inx
028e26 ldy #$003a
028e29 sta ($92),y
028e2b iny
028e2c iny
028e2d sta ($92),y
028e2f lda #$003e
028e32 clc
028e33 adc $92
028e35 tay
028e36 lda #$0003
028e39 phb				; save databank to stack
028e3a mvn $02,$00
028e3d plb
028e3e sep #$20			; set A => 8bit
028e40 rep #$10			; set X,Y => 16bit
028e42 lda $0000,x
028e45 ldy #$0056
028e48 sta ($92),y
028e4a inx
028e4b lda $0000,x
028e4e ldy #$002e
028e51 sta ($92),y
028e53 phy
028e54 ldy #$0060
028e57 lda ($92),y
028e59 cmp #$42
028e5b bcc $8e61
028e5d lda #$80
028e5f bra $8e63
028e61 lda #$00
028e63 ply
028e64 iny
028e65 sta ($92),y
028e67 pla
028e68 sta $4202
028e6b lda #$09
028e6d sta $4203
028e70 rep #$30			; set A,X,Y => 16bit
028e72 lda #$c6ff
028e75 clc
028e76 adc $4216
028e79 tax
028e7a phx
028e7b lda $0000,x
028e7e and #$000f
028e81 asl a
028e82 asl a
028e83 asl a
028e84 clc
028e85 adc #$c9ea
028e88 tax
028e89 lda #$0044
028e8c clc
028e8d adc $92
028e8f tay
028e90 lda #$0007
028e93 phb				; save databank to stack
028e94 mvn $02,$00
028e97 plb
028e98 plx
028e99 lda #$0057
028e9c clc
028e9d adc $92
028e9f tay
028ea0 lda #$0008
028ea3 phb				; save databank to stack
028ea4 mvn $02,$00
028ea7 plb
028ea8 tya
028ea9 adc #$0020
028eac sta $92
028eae sep #$20			; set A => 8bit
028eb0 rep #$10			; set X,Y => 16bit
028eb2 rts				; exit routine



028ec0 lda $39
028ec2 and #$80
028ec4 beq $8ec7
028ec6 rts				; exit routine



028ec7 lda $3a
028ec9 cmp #$11
028ecb bne $8ece
028ecd rts				; exit routine



028ece lda $dc
028ed0 and #$c0
028ed2 beq $8ee1
028ed4 lda $8b
028ed6 cmp #$02
028ed8 bcs $8ee1
028eda lda $39
028edc cmp #$02
028ede bcs $8ee1
028ee0 rts
028ee1 lda $39
028ee3 sta $8d
028ee5 phd				; save direct page to stack
028ee6 jsr $8f2f
028ee9 lda $21
028eeb pld
028eec and #$c0
028eee bne $8ef1
028ef0 rts				; exit routine



028ef1 lda $39
028ef3 cmp #$02
028ef5 bcs $8efc
028ef7 ldx #$0100
028efa bra $8eff
028efc ldx #$0402
028eff stx $8d
028f01 phd				; save direct page to stack
028f02 jsr $8f2f
028f05 lda $21
028f07 xba
028f08 lda $10
028f0a pld
028f0b inc
028f0c beq $8f15
028f0e xba
028f0f and #$c0
028f11 bne $8f15
028f13 bra $8f1d
028f15 inc $8d
028f17 lda $8e
028f19 cmp $8d
028f1b bcs $8f01
028f1d lda $8d
028f1f sta $39
028f21 rts				; exit routine



028f22 pha
028f23 phx
028f24 phy
028f25 php				; save processor status to stack
028f26 sep #$20			; set A => 8bit
028f28 rep #$10			; set X,Y => 16bit
028f2a lda $048b
028f2d bra $8f3a
028f2f pha
028f30 phx
028f31 phy
028f32 php				; save processor status to stack
028f33 sep #$20			; set A => 8bit
028f35 rep #$10			; set X,Y => 16bit
028f37 lda $048d
028f3a asl a
028f3b rep #$20			; set A => 16bit
028f3d sep #$10			; set X,Y => 8bit
028f3f tax
028f40 lda $8f4a,x
028f43 pha
028f44 pld
028f45 plp
028f46 ply
028f47 plx
028f48 pla
028f49 rts				; exit routine



028fd4 jsr $9797
028fd7 jsr $97d9
028fda lda $b7
028fdc cmp $b8
028fde bcs $8fe3
028fe0 jmp $9785
028fe3 jsr $999d
028fe6 jsr $9a36
028fe9 jsr $9bd9
028fec lda $8d
028fee cmp #$02
028ff0 bcc $8ff5
028ff2 jsr $9b25
028ff5 jsr $99c6
028ff8 lda $3a
028ffa cmp #$26
028ffc beq $9007
028ffe cmp #$27
029000 beq $9007
029002 cmp #$28
029004 beq $9007
029006 rts				; exit routine



029007 lsr $b7
029009 lda #$65
02900b sta $00a8
02900e jsl $009783
029012 lda $00a9
029015 sta $b9
029017 jsl $009783
02901b lda $00a9
02901e sta $b8
029020 lda $b7
029022 cmp $b8
029024 bcs $9027
029026 rts				; exit routine



029027 jmp $9cb6
02902a phd				; save direct page to stack
02902b jsr $8f22
02902e lda $30
029030 pld
029031 inc
029032 dec
029033 bne $9038
029038 lda $90
02903a cmp $8f
02903c bne $9052
02903e lda $3a
029040 cmp #$46
029042 bne $9048
029048 jsr $9797
02904b phd				; save direct page to stack
02904c jsr $8f22
02904f dec $30
029051 pld
029052 lda $8b
029054 cmp #$02
029056 bcs $9058
029058 jsr $97d9
02905b jsr $999d
02905e jsr $9a55
029061 jsr $9727
029064 cmp $8f
029066 lda $90
029068 bne $906a
02906a lda $8d
02906c cmp #$02
02906e bcc $9073
029070 jsr $9b25
029073 jsr $99c6
029076 lda $3a
029078 cmp #$4f
02907a beq $907d
02907c rts				; exit routine



0290a0 phd				; save direct page to stack
0290a1 jsr $8f22
0290a4 lda $30
0290a6 pld
0290a7 inc
0290a8 dec
0290a9 bne $90ae
0290ae jsr $9797
0290b1 lda $8b
0290b3 cmp #$02
0290b5 bcs $90be
0290b7 phd				; save direct page to stack
0290b8 jsr $8f22
0290bb dec $30
0290bd pld
0290be jsr $97d9
0290c1 lda $b7
0290c3 cmp $b8
0290c5 bcs $90ca
0290c7 jmp $9785
0290ca jsr $999d
0290cd jsr $9a67
0290d0 jsr $9bd9
0290d3 lda $8d
0290d5 cmp #$02
0290d7 bcc $90dc
0290d9 jsr $9b25
0290dc jsr $99c6
0290df jmp $9cb6
0290e2 lda $90
0290e4 cmp $8f
0290e6 bne $90eb
0290e8 jsr $9797
0290eb jsr $97d9
0290ee jsr $99b0
0290f1 jsr $9a77
0290f4 jsr $9727
0290f7 jsr $9bd9
0290fa lda $8d
0290fc cmp #$02
0290fe bcc $9103
029100 jsr $9b25
029103 jsr $99c6
029106 jmp $9ff4
029109 lda $90
02910b cmp $8f
02910d bne $9112
02910f jsr $9797
029112 jsr $97d9
029115 jsr $99b0
029118 jsr $9a91
02911b jsr $9727
02911e cmp $8f
029120 lda $90
029122 bne $9124
029124 jsr $9bd9
029127 lda $8d
029129 cmp #$02
02912b bcc $9130
02912d jsr $9b25
029130 jsr $99c6
029133 jmp $9ff4
029136 lda $3a
029138 cmp #$13
02913a bne $914c
02914c lda $3a
02914e cmp #$1d
029150 bne $9160
029160 ldx #$d428
029163 jsr $8835
029166 ldx #$d43d
029169 jsr $8835
02916c jsr $a217
02916f jsr $a217
029172 jsr $97d9
029175 lda $b7
029177 cmp $b8
029179 bcs $917e
02917b jmp $9785
02917e jsr $a0cd
029181 jsr $999d
029184 lda #$1e
029186 sta $4202
029189 lda $dd
02918b and #$0f
02918d sta $4203
029190 pha
029191 pla
029192 ldx $4216
029195 stx $77
029197 jsr $99c6
02919a jsr $9727
02919d jmp $9e81
029209 lda $11
02920b and #$08
02920d bne $9215
02920f jsr $9964
029212 inc
029213 beq $926d
02926d lda $90
02926f cmp $8f
029271 bne $9279
029273 jsr $97be
029276 jsr $a0cd
029279 phd
02927a jsr $8f2f
02927d rep #$30
02927f lda $16
029281 sec
029282 sbc $14
029284 pld
029285 sta $77
029287 sep #$20
029289 rep #$10
02928b jsr $95de
02928e jmp $9c87
029291 lda $3a
029293 cmp #$11
029295 beq $930d
02930d jsr $97b8
029310 lda #$24
029312 sta $e2
029314 lda #$15
029316 sta $df
029318 jsr $a0cd
02931b bra $9329
029329 phd				; save direct page to stack
02932a jsr $8f2f
02932d lda $21
02932f and #$80
029331 sta $21
029333 pld
029334 rts				; exit routine



02933c lda $38
02933e cmp #$20
029340 beq $9345
029342 jmp $9399
029345 lda $11
029347 and #$08
029349 bne $9354
02934b jsr $9964
02934e inc
02934f bne $9354
029351 jmp $93a6
029354 lda $90
029356 cmp $8f
029358 bne $935d
02935a jsr $9797
02935d jsr $97d9
029360 lda $b7
029362 cmp $b8
029364 bcs $9369
029369 jsr $99b0
02936c jsr $9a77
02936f lda $8d
029371 cmp #$02
029373 bcc $9378
029375 jsr $9b25
029378 ldx $77
02937a bne $9390
029390 jsr $9727
029393 jsr $99c6
029396 jmp $9ff4
029399 jsr $97b8
02939c lda #$23
02939e sta $e2
0293a0 lda #$14
0293a2 sta $df
0293a4 bra $93af
0293a6 lda $90
0293a8 cmp $8f
0293aa bne $93b2
0293ac jsr $97be
0293af jsr $a0cd
0293b2 lda $38
0293b4 cmp #$30
0293b6 bne $93bb
0293b8 jmp $9e65
0293bb jmp $9e06
0293be lda $90
0293c0 cmp $8f
0293c2 bne $93c7
0293c4 jsr $9797
0293c7 jsr $97d9
0293ca jsr $999d
0293cd lda $de
0293cf cmp #$0f
0293d1 beq $93e0
0293d3 cmp #$10
0293d5 beq $93e5
0293d7 cmp #$11
0293d9 beq $93ea
0293db jsr $9ac6
0293de bra $93ed
0293e0 jsr $9a9a
0293e3 bra $93ed
0293ea jsr $9ac6
0293ed jsr $9bd9
0293f0 jsr $9727
0293f3 jsr $99c6
0293f6 lda $3a
0293f8 cmp #$8a
0293fa beq $93fd
0293fc rts				; exit routine



029469 lda $90
02946b cmp $8f
02946d bne $9472
02946f jsr $9797
029472 jsr $97d9
029475 lda $de
029477 cmp #$15
029479 beq $9487
029487 phd				; save direct page to stack
029488 jsr $8f2f
02948b lda $2e
02948d pld
02948e and #$04
029490 beq $9495
029495 lda $de
029497 cmp #$15
029499 beq $94bb
0294bb jmp $9cb6
0295c7 php				; save processor status to stack
0295c8 rep #$30			; set A,X,Y => 16bit
0295ca lda $14
0295cc clc
0295cd adc $0477
0295d0 cmp $16
0295d2 bcc $95dc
0295d4 lda $16
0295d6 sec
0295d7 sbc $14
0295d9 sta $0477
0295dc plp
0295dd rts				; exit routine



0295de rep #$30			; set A,X,Y => 16bit
0295e0 lda $77
0295e2 eor #$ffff
0295e5 inc
0295e6 sta $77
0295e8 sep #$20			; set A => 8bit
0295ea rep #$10			; set X,Y => 16bit
0295ec rts				; exit routine



029727 ldx $77
029729 stx $4204
02972c ldx $78
02972e stx $4205
029731 lda $39
029733 cmp #$80
029735 beq $973c
029737 cmp #$81
029739 beq $9741
02973b rts				; exit routine



02973c jsr $974d
02973f bra $9743
029741 lda $b3
029743 jsl $009726
029747 ldx $4214
02974a stx $77
02974c rts				; exit routine



02974d lda $1021
029750 and #$c0
029752 bne $975e
029754 lda $10a1
029757 and #$c0
029759 bne $975e
02975b lda #$02
02975d rts				; exit routine



029761 ldx #$d335
029764 jsr $8835
029767 ldx #$d54f
02976a jmp $8835
02976d ldx #$d335
029770 jsr $8835
029773 ldx #$d558
029776 jmp $8835
029785 ldx #$7fff
029788 stx $77
02978a rts				; exit routine



029797 ldx #$d428
02979a jsr $8835
02979d ldx #$d43d
0297a0 jsr $8835
0297a3 jsr $a217
0297a6 jsr $a217
0297a9 jmp $a0cd
0297b8 ldx #$d367
0297bb jmp $8835
0297be ldx #$d346
0297c1 jmp $8835
0297cd ldx #$d4c9
0297d0 jmp $8835
0297d3 ldx #$d4d5
0297d6 jmp $8835
0297d9 sep #$20			; set A => 8bit
0297db rep #$10			; set X,Y => 16bit
0297dd lda $11
0297df and #$08
0297e1 bne $97ec
0297e3 jsr $9964
0297e6 inc
0297e7 bne $97ec
0297ec lda #$00
0297ee xba
0297ef lda $de
0297f1 asl a
0297f2 tax
0297f3 jmp ($992e,x)
0297ff lda $12
029801 clc
029802 adc $14
029804 lsr a
029805 lsr a
029806 lsr a
029807 clc
029808 adc #$4b
02980a jsr $9904
02980d lda #$08
02980f jmp $9895
029812 lda $12
029814 lsr a
029815 lsr a
029816 clc
029817 adc #$4b
029819 jsr $9904
02981c lda #$02
02981e bra $9895
029820 lda $14
029822 lsr a
029823 lsr a
029824 clc
029825 adc #$4b
029827 jsr $9904
02982a lda #$10
02982c bra $9895
02982e lda $e1
029830 sta $b7
029832 lda #$00
029834 bra $9895
029836 lda $14
029838 lsr a
029839 lsr a
02983a clc
02983b adc #$4b
02983d jsr $9904
029840 lda #$14
029842 bra $9895
029844 lda $15
029846 lsr a
029847 lsr a
029848 clc
029849 adc #$4b
02984b adc $e1
02984d lsr a
02984e sta $b7
029850 lda #$00
029852 bra $9895
029854 lda $14
029856 lsr a
029857 lsr a
029858 clc
029859 adc #$4b
02985b adc $28
02985d lsr a
02985e sta $b7
029860 lda #$05
029862 bra $9895
029864 lda $12
029866 bra $9856
029868 lda $12
02986a clc
02986b adc $14
02986d lsr a
02986e lsr a
02986f lsr a
029870 clc
029871 adc #$4b
029873 adc $e1
029875 adc $28
029877 lsr a
029878 sta $b7
02987a lda #$00
02987c bra $9895
029895 sta $bb
029897 lda $b7
029899 cmp #$64
02989b bcc $98a1
02989d lda #$63
02989f sta $b7
0298a1 lda $11
0298a3 and #$02
0298a5 beq $98a9
0298a9 lda $8b
0298ab cmp #$02
0298ad bcc $98ec
0298af phd				; save direct page to stack
0298b0 jsr $8f2f
0298b3 lda $10
0298b5 xba
0298b6 lda $2f
0298b8 pld
0298b9 and #$80
0298bb bne $98ec
0298bd xba
0298be cmp $00
0298c0 beq $98ec
0298c2 bcc $98ec
0298c4 lda $de
0298c6 cmp #$17
0298c8 beq $98d2
0298ca cmp #$0f
0298cc bcs $98e0
0298ce cmp #$08
0298d0 bcc $98e0
0298d2 phd				; save direct page to stack
0298d3 jsr $8f2f
0298d6 lda #$64
0298d8 sec
0298d9 sbc $3f
0298db pld
0298dc sta $b7
0298de bra $98ec
0298e0 phd				; save direct page to stack
0298e1 jsr $8f2f
0298e4 lda #$64
0298e6 sec
0298e7 sbc $41
0298e9 pld
0298ea sta $b7
0298ec lda #$65
0298ee sta $00a8
0298f1 jsl $009783
0298f5 lda $00a9
0298f8 sta $b9
0298fa jsl $009783
0298fe lda $00a9
029901 sta $b8
029903 rts				; exit routine



029904 adc $e1
029906 sta $4204
029909 stz $4205
02990c lda #$03
02990e jsl $009726
029912 lda $4214
029915 sta $b7
029917 lda $28
029919 sta $4204
02991c stz $4205
02991f lda #$03
029921 jsl $009726
029925 lda $4214
029928 clc
029929 adc $b7
02992b sta $b7
02992d rts				; exit routine



029964 lda $8b
029966 cmp #$02
029968 bcc $9972
02996a lda $8d
02996c cmp #$02
02996e bcs $997b
029970 bra $9978
029972 lda $8d
029974 cmp #$02
029976 bcc $997b
029978 lda #$00
02997a rts				; exit routine



02997b lda #$ff
02997d rts				; exit routine



02999d phd				; save direct page to stack
02999e jsr $8f2f
0299a1 lda $23
0299a3 sta $044e
0299a6 lda $50
0299a8 pld
0299a9 cmp #$01
0299ab bne $99af
0299ad asl $4e
0299af rts				; exit routine



0299b0 phd				; save direct page to stack
0299b1 jsr $8f2f
0299b4 lda $25
0299b6 clc
0299b7 adc $3e
0299b9 sta $044e
0299bc lda $50
0299be pld
0299bf cmp #$01
0299c1 bne $99c5
0299c5 rts				; exit routine



0299c6 rep #$30			; set A,X,Y => 16bit
0299c8 lda $4e
0299ca and #$00ff
0299cd sta $a0
0299cf lda $77
0299d1 sec
0299d2 sbc $a0
0299d4 beq $99d8
0299d6 bcs $99db
0299d8 lda #$0001
0299db sta $77
0299dd phd				; save direct page to stack
0299de jsr $8f2f
0299e1 lda $14
0299e3 pld
0299e4 cmp $77
0299e6 beq $9a1c
0299e8 bcc $9a1c
0299ea sep #$20			; set A => 8bit
0299ec rep #$10			; set X,Y => 16bit
0299ee lda $38
0299f0 cmp #$20
0299f2 beq $9a1c
0299f4 lda $3a
0299f6 cmp #$49
0299f8 bcc $9a00
0299fa cmp #$56
0299fc bcs $9a00
0299fe bra $9a1c
029a00 lda $db
029a02 and #$01
029a04 bne $9a1c
029a06 lda $90
029a08 cmp $8e
029a0a bne $9a1c
029a0c phd				; save direct page to stack
029a0d jsr $8f2f
029a10 lda $2e
029a12 pld
029a13 sta $4f
029a15 bit #$f8
029a17 beq $9a1c
029a19 jsr $9f2f
029a1c sep #$20			; set A => 8bit
029a1e rep #$10			; set X,Y => 16bit
029a20 rts				; exit routine



029a36 lda #$00
029a38 xba
029a39 lda $12
029a3b clc
029a3c adc $14
029a3e xba
029a3f rol a
029a40 xba
029a41 rep #$30			; set A,X,Y => 16bit
029a43 sta $77
029a45 lda $dd
029a47 and #$00ff
029a4a clc
029a4b adc $77
029a4d asl a
029a4e sta $77
029a50 sep #$20			; set A => 8bit
029a52 rep #$10			; set X,Y => 16bit
029a54 rts				; exit routine



029a55 lda $dd
029a57 sta $4202
029a5a lda #$12
029a5c sta $4203
029a5f pha
029a60 pla
029a61 ldx $4216
029a64 stx $77
029a66 rts				; exit routine



029a67 lda #$00
029a69 xba
029a6a lda $12
029a6c clc
029a6d asl a
029a6e bra $9a3e
029a77 lda #$00
029a79 xba
029a7a lda $15
029a7c clc
029a7d adc $dd
029a7f xba
029a80 rol a
029a81 xba
029a82 rep #$30			; set A,X,Y => 16bit
029a84 sta $77
029a86 asl a
029a87 clc
029a88 adc $77
029a8a sta $77
029a8c sep #$20			; set A => 8bit
029a8e rep #$10			; set X,Y => 16bit
029a90 rts				; exit routine



029a91 jsr $9a77
029a94 rep #$30			; set A,X,Y => 16bit
029a96 lda $77
029a98 bra $9a86
029a9a lda #$00
029a9c xba
029a9d lda $12
029a9f clc
029aa0 adc $dd
029aa2 xba
029aa3 rol a
029aa4 xba
029aa5 rep #$30			; set A,X,Y => 16bit
029aa7 sta $77
029aa9 jsr $9abe
029aac lsr a
029aad lsr a
029aae lsr a
029aaf lsr a
029ab0 jsr $9aee
029ab3 clc
029ab4 adc $77
029ab6 asl a
029ab7 sta $77
029ab9 sep #$20			; set A => 8bit
029abb rep #$10			; set X,Y => 16bit
029abd rts				; exit routine



029abe phd				; save direct page to stack
029abf jsr $8f22
029ac2 lda $16
029ac4 pld
029ac5 rts				; exit routine



029ac6 lda #$00
029ac8 xba
029ac9 lda $12
029acb clc
029acc adc $dd
029ace xba
029acf rol a
029ad0 xba
029ad1 rep #$30			; set A,X,Y => 16bit
029ad3 sta $77
029ad5 jsr $9abe
029ad8 lsr a
029ad9 lsr a
029ada lsr a
029adb jsr $9aee
029ade clc
029adf adc $77
029ae1 sta $77
029ae3 lsr a
029ae4 clc
029ae5 adc $77
029ae7 sta $77
029ae9 sep #$20			; set A => 8bit
029aeb rep #$10			; set X,Y => 16bit
029aed rts				; exit routine



029aee pha
029aef sep #$20			; set A => 8bit
029af1 rep #$10			; set X,Y => 16bit
029af3 lda $3b
029af5 cmp #$44
029af7 bcc $9b10
029b10 rep #$30			; set A,X,Y => 16bit
029b12 pla
029b13 rts				; exit routine



029b25 lda $8d
029b27 cmp #$02
029b29 bcs $9b2c
029b2c phd				; save direct page to stack
029b2d jsr $8f2f
029b30 lda $56
029b32 pld
029b33 sta $74
029b35 and $db
029b37 beq $9b9c
029b39 lda $db
029b3b cmp #$50
029b3d bne $9b64
029b3f lda $74
029b41 and #$50
029b43 cmp #$50
029b45 beq $9b48
029b47 rts				; exit routine



029b64 ldx #$d340
029b67 jsr $883d
029b6a ldx #$d3ab
029b6d jsr $883d
029b70 rep #$30			; set A,X,Y => 16bit
029b72 asl $77
029b74 sep #$20			; set A => 8bit
029b76 rep #$10			; set X,Y => 16bit
029b78 ldy #$fffe
029b7b lda $74
029b7d and $db
029b7f iny
029b80 iny
029b81 rol a
029b82 bcc $9b7f
029b84 ldx $9b8c,y
029b87 jsr $883d
029b8a bra $9bb0
029b9c lda $db
029b9e cmp #$08
029ba0 beq $9ba3
029ba2 rts				; exit routine



029bb0 ldx #$d3a4
029bb3 jsr $883d
029bb6 lda #$00
029bb8 xba
029bb9 lda $8d
029bbb cmp #$04
029bbd bne $9bc0
029bbf rts				; exit routine



029bc0 cmp #$02
029bc2 bcs $9bc5
029bc4 rts				; exit routine



029bc5 dec
029bc6 dec
029bc7 tax
029bc8 lda $75
029bca sta $bc,x
029bcc rts				; exit routine



029bcd ldx #$d340
029bd0 jsr $883d
029bd3 ldx #$d3b2
029bd6 jmp $883d
029bd9 jsr $9dfe
029bdc and $db
029bde bne $9be3
029be0 jmp $9c84
029be3 lda $db
029be5 and #$08
029be7 beq $9bf9
029bf9 lda $db
029bfb and #$50
029bfd cmp #$50
029bff bne $9c1e
029c01 jsr $9dfe
029c04 and #$50
029c06 cmp #$50
029c08 beq $9c0b
029c0a rts				; exit routine



029c1e jsr $9bcd
029c21 rep #$30			; set A,X,Y => 16bit
029c23 lsr $77
029c25 sep #$20			; set A => 8bit
029c27 rep #$10			; set X,Y => 16bit
029c29 lda $db
029c2b and #$80
029c2d beq $9c37
029c2f ldx #$d3bb
029c32 jsr $883d
029c35 bra $9c81
029c37 lda $db
029c39 and #$40
029c3b beq $9c45
029c3d ldx #$d3bf
029c40 jsr $883d
029c43 bra $9c81
029c81 jsr $9bb0
029c84 jmp $9efc
029c87 jsr $9964
029c8a inc
029c8b beq $9ca2
029ca2 phd
029ca3 jsr $8f2f
029ca6 stz $21
029ca8 pld
029ca9 rts
029cb6 lda $11
029cb8 and #$08
029cba bne $9cc5
029cbc jsr $9964
029cbf inc
029cc0 bne $9cc5
029cc5 lda $dc
029cc7 and #$01
029cc9 beq $9ce5
029ccb jsr $9df6
029cce and #$01
029cd0 and $dc
029cd2 bne $9cd9
029cd4 jsr $9de4
029cd7 bra $9ce5
029ce5 lda $dc
029ce7 and #$02
029ce9 beq $9d07
029ceb jsr $9df6
029cee and #$02
029cf0 and $dc
029cf2 bne $9cfb
029cf4 lda #$02
029cf6 jsr $9de4
029cf9 bra $9d07
029d07 lda $dc
029d09 and #$04
029d0b beq $9d29
029d0d jsr $9df6
029d10 and #$04
029d12 and $dc
029d14 bne $9d1d
029d16 lda #$04
029d18 jsr $9de4
029d1b bra $9d29
029d1d jsr $9bcd
029d20 ldx #$d3fd
029d23 jsr $883d
029d26 jsr $9bb0
029d29 lda $dc
029d2b and #$08
029d2d beq $9d4b
029d2f jsr $9df6
029d32 and #$08
029d34 and $dc
029d36 bne $9d3f
029d38 lda #$08
029d3a jsr $9de4
029d3d bra $9d4b
029d4b lda $dc
029d4d and #$10
029d4f beq $9d6d
029d51 jsr $9df6
029d54 and #$10
029d56 and $dc
029d58 bne $9d61
029d5a lda #$10
029d5c jsr $9de4
029d5f bra $9d6d
029d6d lda $dc
029d6f and #$20
029d71 beq $9d8f
029d73 jsr $9df6
029d76 and #$20
029d78 and $dc
029d7a bne $9d83
029d7c lda #$20
029d7e jsr $9de4
029d81 bra $9d8f
029d83 jsr $9bcd
029d86 ldx #$d403
029d89 jsr $883d
029d8c jsr $9bb0
029d8f lda $dc
029d91 and #$40
029d93 bne $9d96
029d95 rts				; exit routine



029d96 jsr $9df6
029d99 and #$40
029d9b and $dc
029d9d bne $9dd5
029d9f lda $8d
029da1 cmp #$02
029da3 bcs $9db4
029da5 lda $dc
029da7 phd				; save direct page to stack
029da8 jsr $8f2f
029dab sta $21
029dad pld
029dae ldx #$0000		; clear X
029db1 stx $77
029db3 rts				; exit routine



029db4 phd				; save direct page to stack
029db5 jsr $8f2f
029db8 lda #$80
029dba sta $21
029dbc pld
029dbd lda #$00
029dbf xba
029dc0 lda $8d
029dc2 dec
029dc3 dec
029dc4 tax
029dc5 lda #$ff
029dc7 sta $0a02,x
029dca lda #$00
029dcc sta $0505
029dcf ldx #$0000		; clear X
029dd2 stx $77
029dd4 rts				; exit routine



029dd5 jsr $9bcd
029dd8 ldx #$d3e9
029ddb jsr $883d
029dde jsr $9bb0
029de1 jmp $9dec
029de4 phd				; save direct page to stack
029de5 jsr $8f2f
029de8 tsb $21
029dea pld
029deb rts				; exit routine



029dec lda $dc
029dee phd				; save direct page to stack
029def jsr $8f2f
029df2 trb $21
029df4 pld
029df5 rts				; exit routine



029df6 phd				; save direct page to stack
029df7 jsr $8f2f
029dfa lda $3d
029dfc pld
029dfd rts				; exit routine



029dfe phd				; save direct page to stack
029dff jsr $8f2f
029e02 lda $3c
029e04 pld
029e05 rts				; exit routine



029e06 sep #$20			; set A => 8bit
029e08 rep #$10			; set X,Y => 16bit
029e0a jsr $9e22
029e0d phd				; save direct page to stack
029e0e jsr $8f2f
029e11 jsr $95c7
029e14 pld
029e15 jsr $95de
029e18 ldx $77
029e1a bne $9e21
029e1c ldx #$7ffe
029e1f stx $77
029e21 rts				; exit routine



029e22 sep #$20			; set A => 8bit
029e24 rep #$10			; set X,Y => 16bit
029e26 phd				; save direct page to stack
029e27 jsr $8f22
029e2a lda $25
029e2c lsr a
029e2d clc
029e2e adc $25
029e30 adc $04dd
029e33 sta $0098
029e36 stz $0099
029e39 jsr $8f2f
029e3c ldx $16
029e3e pld
029e3f stx $009c
029e42 jsl $0096b3
029e46 ldx $009e
029e49 stx $0098
029e4c ldx $00a0
029e4f stx $009a
029e52 ldx #$0064
029e55 stx $009c
029e58 jsl $0096e4
029e5c ldx $009e
029e5f stx $77
029e61 jsr $9727
029e64 rts				; exit routine
029e65 phd
029e66 jsr $8f2f
029e69 ldx $16
029e6b stx $0098
029e6e lda $04dd
029e71 pld
029e72 sta $009c
029e75 stz $009d
029e78 jsl $0096b3
029e7c jsr $9e46
029e7f bra $9e0d



029e81 lda $38
029e83 cmp #$30
029e85 beq $9ed4
029e87 lda $3a
029e89 cmp #$1d
029e8b beq $9ed4
029e8d ldx #$d33b
029e90 jsr $8835
029e93 lda #$00
029e95 xba
029e96 lda $dd
029e98 rol a
029e99 rol a
029e9a rol a
029e9b and #$03
029e9d tax
029e9e phx
029e9f asl a
029ea0 tay
029ea1 ldx $9ef4,y
029ea4 jsr $8835
029ea7 lda $dd
029ea9 lsr a
029eaa lsr a
029eab lsr a
029eac lsr a
029ead and #$03
029eaf sta $4202
029eb2 lda #$19
029eb4 sta $4203
029eb7 plx
029eb8 phd				; save direct page to stack
029eb9 jsr $8f2f
029ebc lda $26,x
029ebe sec
029ebf sbc $4216
029ec2 bcs $9ec6
029ec6 sta $26,x
029ec8 clc
029ec9 adc $2a,x
029ecb sta $22,x
029ecd pld
029ece ldx #$d382
029ed1 jmp $8835
029efc lda $39
029efe and #$80
029f00 beq $9f03
029f02 rts				; exit routine



029f03 lda $38
029f05 cmp #$20
029f07 bne $9f0a
029f09 rts				; exit routine



029f0a lda $38
029f0c cmp #$10
029f0e bne $9f1a
029f10 lda $3a
029f12 cmp #$49
029f14 bcc $9f1a
029f16 cmp #$50
029f18 bcs $9f1a
029f1a lda $bb
029f1c cmp $b9
029f1e bcs $9f21
029f20 rts				; exit routine



029f21 rep #$30			; set A,X,Y => 16bit
029f23 asl $77
029f25 sep #$20			; set A => 8bit
029f27 rep #$10			; set X,Y => 16bit
029f29 ldx #$d47e
029f2c jmp $8835
029f2f jsr $97d9
029f32 lda $b7
029f34 cmp $b8
029f36 bcs $9f39
029f39 lda $4f
029f3b and #$08
029f3d beq $9f9c
029f3f lda #$65
029f41 sta $00a8
029f44 jsl $009783
029f48 lda $00a9
029f4b clc
029f4c adc #$0a
029f4e sta $0098
029f51 stz $0099
029f54 rep #$30			; set A,X,Y => 16bit
029f56 lda $13
029f58 and #$00ff
029f5b sta $a0
029f5d lda $77
029f5f sta $009c
029f62 jsl $0096b3
029f66 lda $009e
029f69 sta $0098
029f6c lda $009f
029f6f sta $0099
029f72 lda #$0064
029f75 sta $009c
029f78 jsl $0096e4
029f7c lda $009e
029f7f sec
029f80 sbc $a0
029f82 bcs $9f89
029f84 sep #$20			; set A => 8bit
029f86 rep #$10			; set X,Y => 16bit
029f88 rts				; exit routine



029f89 sep #$20			; set A => 8bit
029f8b rep #$10			; set X,Y => 16bit
029f8d jsr $97cd
029f90 lda #$00
029f92 xba
029f93 lda $8b
029f95 asl a
029f96 tax
029f97 ldy $a0
029f99 sty $d1,x
029f9b rts				; exit routine



029f9c jsr $97d3
029f9f ldx #$fffe
029fa2 lda $4f
029fa4 inx
029fa5 inx
029fa6 rol a
029fa7 bcc $9fa4
029fa9 jmp ($9fac,x)
029fc8 ldx #$d4ed
029fcb jsr $8835
029fce lda #$20
029fd0 bra $9fda
029fd2 ldx #$d4f8
029fd5 jsr $8835
029fd8 lda #$08
029fda sta $dc
029fdc lda $8d
029fde xba
029fdf lda $8b
029fe1 sta $8d
029fe3 xba
029fe4 sta $8b
029fe6 jsr $9cc5
029fe9 lda $8d
029feb xba
029fec lda $8b
029fee sta $8d
029ff0 xba
029ff1 sta $8b
029ff3 rts				; exit routine



029ff4 phd				; save direct page to stack
029ff5 jsr $8f2f
029ff8 lda $2e
029ffa pld
029ffb and #$04
029ffd bne $a000
029fff rts				; exit routine



02a0cd lda $90
02a0cf cmp $8f
02a0d1 beq $a0d4
02a0d4 lda $df
02a0d6 sta $0505
02a0d9 lda $8d
02a0db cmp #$02
02a0dd bcs $a10f
02a0df jsr $a17a
02a0e2 lda $39
02a0e4 and #$80
02a0e6 bne $a0f5
02a0e8 lda #$00
02a0ea xba
02a0eb lda $8d
02a0ed tax
02a0ee lda $e3
02a0f0 sta $0ab2,x
02a0f3 bra $a149
02a0f5 lda $1021
02a0f8 and #$c0
02a0fa bne $a101
02a0fc lda $e3
02a0fe sta $0ab2
02a101 lda $10a1
02a104 and #$c0
02a106 bne $a10d
02a108 lda $e3
02a10a sta $0ab3
02a10d bra $a149
02a10f jsr $a190
02a112 lda $39
02a114 and #$80
02a116 bne $a125
02a118 lda #$00
02a11a xba
02a11b lda $8d
02a11d tax
02a11e lda $e2
02a120 sta $0ab2,x
02a123 bra $a149
02a125 lda $1121
02a128 and #$c0
02a12a bne $a131
02a12c lda $e2
02a12e sta $0ab4
02a131 lda $11a1
02a134 and #$c0
02a136 bne $a13d
02a138 lda $e2
02a13a sta $0ab5
02a13d lda $1221
02a140 and #$c0
02a142 bne $a149
02a144 lda $e2
02a146 sta $0ab6
02a149 lda $38
02a14b cmp #$20
02a14d bne $a175
02a14f phd				; save direct page to stack
02a150 jsr $8f2f
02a153 lda $2e
02a155 pld
02a156 and #$04
02a158 beq $a175
02a175 jsl $02e782
02a179 rts				; exit routine



02a17a lda $8b
02a17c cmp #$02
02a17e bcc $a181
02a180 rts				; exit routine



02a181 lda #$00
02a183 xba
02a184 lda $e2
02a186 sec
02a187 sbc #$22
02a189 tax
02a18a lda $a1b8,x
02a18d sta $e3
02a18f rts				; exit routine



02a190 lda $8b
02a192 cmp #$02
02a194 bcs $a197
02a196 rts				; exit routine



02a197 lda #$00
02a199 xba
02a19a lda $e3
02a19c sec
02a19d sbc #$10
02a19f tax
02a1a0 lda $a1a6,x
02a1a3 sta $e2
02a1a5 rts				; exit routine



02a217 php				; save processor status to stack
02a218 sep #$20			; set A => 8bit
02a21a rep #$10			; set X,Y => 16bit
02a21c pea $0400
02a21f pld
02a220 lda #$00
02a222 xba
02a223 lda $8b
02a225 cmp #$02
02a227 bcc $a25c
02a229 dec
02a22a dec
02a22b asl a
02a22c tax
02a22d ldy #$0012
02a230 jsl $0c8000
02a234 lda $a25e,x
02a237 sta $2121
02a23a lda $a264,y
02a23d sta $2122
02a240 lda $a265,y
02a243 sta $2122
02a246 lda $a25f,x
02a249 sta $2121
02a24c lda $a264,y
02a24f sta $2122
02a252 lda $a265,y
02a255 sta $2122
02a258 dey
02a259 dey
02a25a bpl $a230
02a25c plp
02a25d rts				; exit routine



02a278 pea $0400
02a27b pld
02a27c sep #$20			; set A => 8bit
02a27e rep #$10			; set X,Y => 16bit
02a280 lda $17
02a282 and #$80
02a284 beq $a287
02a286 rts				; exit routine



02a287 stz $d0
02a289 lda $8b
02a28b cmp #$01
02a28d beq $a292
02a28f jmp $a35f
02a292 ldx #$04c4
02a295 stx $92
02a297 stz $8b
02a299 lda #$01
02a29b sta $8c
02a29d jsr $a3f8
02a2a0 rep #$30			; set A,X,Y => 16bit
02a2a2 lda $c4
02a2a4 ora $c6
02a2a6 bne $a2b2
02a2a8 sep #$20			; set A => 8bit
02a2aa rep #$10			; set X,Y => 16bit
02a2ac lda $d0
02a2ae dec
02a2af beq $a31a
02a2b1 rts				; exit routine



02a2b2 sep #$20			; set A => 8bit
02a2b4 rep #$10			; set X,Y => 16bit
02a2b6 lda #$ff
02a2b8 sta $d0
02a2ba lda #$01
02a2bc sta $8b
02a2be stz $ce
02a2c0 rep #$30			; set A,X,Y => 16bit
02a2c2 lda $c4
02a2c4 bit #$0100
02a2c7 beq $a2cc
02a2cc and #$00e0
02a2cf beq $a2d4
02a2d1 jmp $a514
02a2d4 lda $c6
02a2d6 ora $c4
02a2d8 and #$0010
02a2db beq $a304
02a304 lda $c6
02a306 ora $c4
02a308 and #$0027
02a30b lda $c6
02a30d cmp $c4
02a30f bcc $a317
02a317 jmp $a514
02a35f lda #$65
02a361 sta $00a8
02a364 jsl $009783
02a368 lda $00a9
02a36b cmp #$32
02a36d bcc $a370
02a36f rts				; exit routine



02a370 lda $8b
02a372 pha
02a373 ldx #$04c8
02a376 stx $92
02a378 lda #$02
02a37a sta $8b
02a37c lda #$04
02a37e sta $8c
02a380 jsr $a3f8
02a383 pla
02a384 sta $8b
02a386 rep #$30			; set A,X,Y => 16bit
02a388 lda $c8
02a38a ora $ca
02a38c ora $cc
02a38e bne $a395
02a390 sep #$20			; set A => 8bit
02a392 rep #$10			; set X,Y => 16bit
02a394 rts				; exit routine



02a395 sep #$20			; set A => 8bit
02a397 rep #$10			; set X,Y => 16bit
02a399 lda #$ff
02a39b sta $d0
02a39d rep #$30			; set A,X,Y => 16bit
02a39f lda $c8
02a3a1 ora $ca
02a3a3 ora $cc
02a3a5 and #$0060
02a3a8 beq $a3b0
02a3b0 lda $c8
02a3b2 ora $ca
02a3b4 ora $cc
02a3b6 and #$0010
02a3b9 beq $a3be
02a3bb jmp $a596
02a3f8 ldx $92
02a3fa rep #$30			; set A,X,Y => 16bit
02a3fc lda #$0000
02a3ff sta $0000,x
02a402 sep #$20			; set A => 8bit
02a404 rep #$10			; set X,Y => 16bit
02a406 phd				; save direct page to stack
02a407 jsr $8f22
02a40a lda $10
02a40c inc
02a40d beq $a42d
02a40f lda $21
02a411 and #$c0
02a413 bne $a41c
02a415 lda $2f
02a417 and #$02
02a419 sta $0000,x
02a41c lda $2e
02a41e and #$02
02a420 bne $a426
02a422 lda #$ff
02a424 bra $a428
02a428 and $21
02a42a sta $0001,x
02a42d rep #$30			; set A,X,Y => 16bit
02a42f lda $0000,x
02a432 jsr $a457
02a435 sta $0000,x
02a438 sep #$20			; set A => 8bit
02a43a rep #$10			; set X,Y => 16bit
02a43c lda $048b
02a43f cmp #$02
02a441 bcc $a44b
02a443 lda #$fe
02a445 and $0001,x
02a448 sta $0001,x
02a44b inx
02a44c inx
02a44d pld
02a44e inc $8b
02a450 lda $8c
02a452 cmp $8b
02a454 bcs $a3fa
02a456 rts				; exit routine



02a457 pha
02a458 pha
02a459 and #$000a
02a45c asl a
02a45d asl a
02a45e asl a
02a45f sta $04a0
02a462 pla
02a463 and #$0f00
02a466 lsr a
02a467 lsr a
02a468 lsr a
02a469 lsr a
02a46a lsr a
02a46b lsr a
02a46c lsr a
02a46d lsr a
02a46e ora $04a0
02a471 sta $04a0
02a474 pla
02a475 and #$f000
02a478 lsr a
02a479 lsr a
02a47a lsr a
02a47b lsr a
02a47c lsr a
02a47d lsr a
02a47e lsr a
02a47f ora $04a0
02a482 rts				; exit routine



02a483 rep #$30			; set A,X,Y => 16bit
02a485 lda #$0002
02a488 sta $a0
02a48a sta $8d
02a48c phd				; save direct page to stack
02a48d jsr $8f2f
02a490 lda $21
02a492 and #$0080
02a495 beq $a49f
02a497 inc $04a0
02a49a inc $048d
02a49d bra $a48d
02a49f lda $14
02a4a1 sta $04a2
02a4a4 inc $048d
02a4a7 lda #$0005
02a4aa cmp $048d
02a4ad beq $a4cb
02a4af jsr $8f2f
02a4b2 lda $21
02a4b4 and #$0080
02a4b7 bne $a4a4
02a4b9 lda $14
02a4bb cmp $04a2
02a4be bcs $a4a4
02a4c0 sta $04a2
02a4c3 lda $048d
02a4c6 sta $04a0
02a4c9 bra $a4a4
02a4cb sep #$20			; set A => 8bit
02a4cd rep #$10			; set X,Y => 16bit
02a4cf jsr $8f22
02a4d2 lda $21
02a4d4 and #$08
02a4d6 beq $a4e6
02a4e6 lda $04a0
02a4e9 sta $51
02a4eb pld
02a4ec rts				; exit routine



02a514 sep #$20			; set A => 8bit
02a516 rep #$10			; set X,Y => 16bit
02a518 lda $8b
02a51a cmp #$01
02a51c beq $a53c
02a53c lda #$11
02a53e jsl $00da6a
02a542 inc
02a543 dec
02a544 beq $a558
02a546 lda #$30
02a548 sta $10d0
02a54b lda #$11
02a54d sta $10d2
02a550 lda $ce
02a552 sta $10d1
02a555 sta $39
02a557 rts				; exit routine



02a596 sep #$20			; set A => 8bit
02a598 rep #$10			; set X,Y => 16bit
02a59a lda $8b
02a59c cmp #$01
02a59e beq $a5bb
02a5a0 phd				; save direct page to stack
02a5a1 jsr $8f22
02a5a4 lda $5f
02a5a6 pld
02a5a7 cmp #$49
02a5a9 bne $a60c
02a5ab phd				; save direct page to stack
02a5ac jsr $8f22
02a5af lda #$10
02a5b1 sta $50
02a5b3 lda #$49
02a5b5 sta $52
02a5b7 pld
02a5b8 jmp $a483
02a60c lda $8b
02a60e cmp #$02
02a610 bcs $a622
02a622 lda #$ef
02a624 and $c8
02a626 sta $c8
02a628 and $ca
02a62a sta $ca
02a62c and $cc
02a62e sta $cc
02a630 jmp $a386
02a633 sep #$20			; set A => 8bit
02a635 rep #$10			; set X,Y => 16bit
02a637 lda $8b
02a639 cmp #$02
02a63b bcc $a640
02a63d jmp $a98d
02a640 phd				; save direct page to stack
02a641 jsr $8f22
02a644 lda $21
02a646 pld
02a647 and #$08
02a649 beq $a6b3
02a6b3 lda #$02
02a6b5 sta $a4
02a6b7 ldx #$0403
02a6ba stx $a5
02a6bc lda $1121
02a6bf bmi $a6c4
02a6c1 lda $1110
02a6c4 sta $a7
02a6c6 lda $11a1
02a6c9 bmi $a6ce
02a6cb lda $1190
02a6ce sta $a8
02a6d0 lda $1221
02a6d3 bmi $a6d8
02a6d5 lda $1210
02a6d8 sta $a9
02a6da ldy #$0003
02a6dd ldx #$0001
02a6e0 lda $a7,x
02a6e2 cmp $a8,x
02a6e4 bcc $a6fa
02a6e6 lda $a7,x
02a6e8 pha
02a6e9 lda $a8,x
02a6eb sta $a7,x
02a6ed pla
02a6ee sta $a8,x
02a6f0 lda $a4,x
02a6f2 pha
02a6f3 lda $a5,x
02a6f5 sta $a4,x
02a6f7 pla
02a6f8 sta $a5,x
02a6fa rep #$30			; set A,X,Y => 16bit
02a6fc txa
02a6fd eor #$0001
02a700 tax
02a701 sep #$20			; set A => 8bit
02a703 rep #$10			; set X,Y => 16bit
02a705 dey
02a706 bpl $a6e0
02a708 ldy #$04a4
02a70b lda #$00
02a70d xba
02a70e lda $b3
02a710 tax
02a711 lda $0000,y
02a714 sta $8d
02a716 lda $75
02a718 phd				; save direct page to stack
02a719 pea $0f18
02a71c pld
02a71d jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
02a721 pld
02a722 inc
02a723 dec
02a724 beq $a72f
02a726 phd				; save direct page to stack
02a727 jsr $8f2f
02a72a lda $56
02a72c pld
02a72d bne $a736
02a72f iny
02a730 dex
02a731 bne $a711
02a733 jmp $a84a
02a736 sta $a7
02a738 stz $38
02a73a stz $10d0
02a73d lda $10b1
02a740 sta $3a
02a742 sta $10d2
02a745 jsr $8b0f
02a748 lda $db
02a74a and $a7
02a74c and #$07
02a74e beq $a776
02a750 lda $3a
02a752 cmp #$2d
02a754 beq $a75c
02a756 cmp #$2e
02a758 beq $a75c
02a75a bra $a761
02a761 stz $10d0
02a764 lda $e0
02a766 and #$02
02a768 beq $a770
02a76a lda #$81
02a76c sta $10d1
02a76f rts				; exit routine



02a770 lda $8d
02a772 sta $10d1
02a775 rts				; exit routine



02a776 lda #$00
02a778 xba
02a779 lda $10a0
02a77c and #$0f
02a77e dec
02a77f tax
02a780 lda $a842,x
02a783 and $a7
02a785 bne $a78a
02a787 jmp $a84a
02a78a pha
02a78b and #$50
02a78d cmp #$50
02a78f bne $a796
02a796 pla
02a797 ldx #$0005
02a79a and #$f8
02a79c lsr a
02a79d lsr a
02a79e lsr a
02a79f dex
02a7a0 lsr a
02a7a1 bcc $a79f
02a7a3 txa
02a7a4 sta $a2
02a7a6 lda #$00
02a7a8 xba
02a7a9 lda $10a0
02a7ac and #$0f
02a7ae dec
02a7af pha
02a7b0 asl a
02a7b1 asl a
02a7b2 clc
02a7b3 adc $01,s
02a7b5 adc $a2
02a7b7 tax
02a7b8 pla
02a7b9 lda $a81a,x
02a7bc bne $a7c1
02a7c1 sta $3a
02a7c3 sta $10d2
02a7c6 cmp #$1c
02a7c8 bne $a7d1
02a7d1 cmp #$15
02a7d3 bne $a7dc
02a7d5 lda $1098
02a7d8 beq $a84a
02a7da bra $a7e1
02a7e1 lda #$20
02a7e3 sta $38
02a7e5 sta $10d0
02a7e8 jsr $8b0f
02a7eb and #$03
02a7ed cmp #$02
02a7ef bne $a7f4
02a7f4 cmp #$01
02a7f6 bne $a7fb
02a7fb lda $af
02a7fd and #$10
02a7ff beq $a806
02a801 jsr $a76a
02a804 bra $a80b
02a80b phd				; save direct page to stack
02a80c jsr $8f2f
02a80f lda $2e
02a811 pld
02a812 and #$04
02a814 bne $a817
02a816 rts				; exit routine



02a84a lda $b5
02a84c bne $a85a
02a84e lda $c2
02a850 and #$80
02a852 bne $a86d
02a854 lda $c3
02a856 and #$80
02a858 bne $a87b
02a85a lda #$65
02a85c sta $00a8
02a85f jsl $009783
02a863 lda $00a9
02a866 cmp $10c2
02a869 beq $a86d
02a86b bcs $a88b
02a86d phd				; save direct page to stack
02a86e jsr $8f22
02a871 stz $50
02a873 lda $31
02a875 sta $52
02a877 pld
02a878 jmp $a93c
02a88b lda #$65
02a88d sta $00a8
02a890 jsl $009783
02a894 lda $00a9
02a897 sta $a0
02a899 ldx #$0007
02a89c lda $10c4,x
02a89f beq $a8a5
02a8a1 cmp $a0
02a8a3 bcs $a8b2
02a8a5 lda $a0
02a8a7 sec
02a8a8 sbc $10c4,x
02a8ab sta $a0
02a8ad dex
02a8ae bpl $a89c
02a8b2 txa
02a8b3 clc
02a8b4 adc #$18
02a8b6 phd				; save direct page to stack
02a8b7 jsr $8f22
02a8ba sta $52
02a8bc lda #$20
02a8be sta $50
02a8c0 lda $52
02a8c2 ldx $19
02a8c4 pld
02a8c5 cmp #$1c
02a8c7 bcc $a8d2
02a8d2 txa
02a8d3 inc
02a8d4 dec
02a8d5 bne $a8da
02a8da jsr $a93c
02a8dd lda $8b
02a8df bne $a8e2
02a8e2 phd				; save direct page to stack
02a8e3 jsr $8f22
02a8e6 lda $51
02a8e8 bit #$80
02a8ea bne $a91b
02a8ec sta $048d
02a8ef jsr $8f2f
02a8f2 lda $2e
02a8f4 xba
02a8f5 lda $60
02a8f7 pld
02a8f8 tax
02a8f9 phx
02a8fa phd				; save direct page to stack
02a8fb pea $0f18
02a8fe pld
02a8ff jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
02a903 pld
02a904 inc
02a905 dec
02a906 bne $a90a
02a908 plx
02a909 rts				; exit routine



02a90a plx
02a90b rep #$30			; set A,X,Y => 16bit
02a90d txa
02a90e sep #$20			; set A => 8bit
02a910 rep #$10			; set X,Y => 16bit
02a912 xba
02a913 and #$04
02a915 bne $a918
02a917 rts				; exit routine



02a91b pld
02a91c lda #$02
02a91e sta $8d
02a920 phd				; save direct page to stack
02a921 jsr $8f2f
02a924 lda $2e
02a926 xba
02a927 lda $21
02a929 pld
02a92a and #$80
02a92c bne $a933
02a92e xba
02a92f and #$04
02a931 bne $a918
02a933 inc $8d
02a935 lda $8d
02a937 cmp #$05
02a939 bcc $a920
02a93b rts				; exit routine



02a93c phd				; save direct page to stack
02a93d jsr $8f22
02a940 lda $50
02a942 sta $0438
02a945 lda $52
02a947 sta $043a
02a94a pld
02a94b jsr $8b0f
02a94e lda $e0
02a950 and #$03
02a952 cmp #$02
02a954 beq $a96b
02a956 cmp #$01
02a958 beq $a968
02a95a lda #$02
02a95c sta $00a8
02a95f jsl $009783
02a963 lda $00a9
02a966 beq $a96b
02a968 jmp $a483
02a96b phd				; save direct page to stack
02a96c jsr $8f22
02a96f lda #$81
02a971 sta $51
02a973 lda $21
02a975 and #$08
02a977 beq $a98b
02a98b pld
02a98c rts				; exit routine



02a98d lda $17
02a98f and #$80
02a991 beq $a99c
02a993 lda $3b
02a995 cmp #$4a
02a997 bcc $a99c
02a99c lda $11
02a99e and #$08
02a9a0 beq $a9be
02a9be lda $b5
02a9c0 bne $a9d8
02a9c2 ldx #$0007
02a9c5 phd				; save direct page to stack
02a9c6 jsr $8f22
02a9c9 lda $44,x
02a9cb and #$80
02a9cd beq $a9d4
02a9d4 dex
02a9d5 bpl $a9c9
02a9d7 pld
02a9d8 lda #$65
02a9da sta $00a8
02a9dd jsl $009783
02a9e1 lda $00a9
02a9e4 sta $a0
02a9e6 phd				; save direct page to stack
02a9e7 jsr $8f22
02a9ea ldx #$0007
02a9ed lda $44,x
02a9ef beq $aa0b
02a9f1 cmp $04a0
02a9f4 bcc $aa0b
02a9f6 lda $58,x
02a9f8 inc
02a9f9 beq $aa0b
02a9fb dec
02a9fc sta $52
02a9fe sta $043a
02aa01 lda #$10
02aa03 sta $50
02aa05 sta $0438
02aa08 pld
02aa09 bra $aa1a
02aa0b lda $04a0
02aa0e sec
02aa0f sbc $44,x
02aa11 sta $04a0
02aa14 dex
02aa15 bpl $a9ed
02aa17 pld
02aa18 bra $a9d8
02aa1a jsr $8b0f
02aa1d lda $e0
02aa1f and #$03
02aa21 cmp #$02
02aa23 beq $aa37
02aa25 cmp #$01
02aa27 beq $aa2f
02aa2f lda $a0
02aa31 and #$01
02aa33 sta $39
02aa35 bra $aa3b
02aa37 lda #$80
02aa39 sta $39
02aa3b phd				; save direct page to stack
02aa3c jsr $8f22
02aa3f lda $0439
02aa42 sta $51
02aa44 pld
02aa45 rts				; exit routine



02d0fe phd				; save direct page to stack
02d0ff php				; save processor status to stack
02d100 sep #$20			; set A => 8bit
02d102 pea $0a00
02d105 pld
02d106 lda #$01
02d108 sta $0a84
02d10b stz $0a7d
02d10e stz $c8
02d110 stz $c9
02d112 stz $e6
02d114 stz $e5
02d116 stz $e3
02d118 stz $e7
02d11a stz $e8
02d11c stz $e2
02d11e lda #$ff
02d120 sta $0ab2
02d123 sta $0ab3
02d126 sta $0ab4
02d129 sta $0ab5
02d12c sta $0ab6
02d12f plp
02d130 pld
02d131 rtl				; exit routine



02d132 php				; save processor status to stack
02d133 sep #$20			; set A => 8bit
02d135 rep #$10			; set X,Y => 16bit
02d137 stz $0ae9
02d13a jsl $0096a0
02d13e stz $0ae2
02d141 stz $0af3
02d144 stz $0af1
02d147 plp
02d148 rtl				; exit routine



02d149 pha
02d14a phx
02d14b phy
02d14c phb				; save databank to stack
02d14d phd				; save direct page to stack
02d14e php				; save processor status to stack
02d14f pea $0a00
02d152 pld
02d153 sep #$20			; set A => 8bit
02d155 rep #$10			; set X,Y => 16bit
02d157 lda $84
02d159 beq $d15e
02d15b brl $d1f5
02d15e lda $02
02d160 cmp #$50
02d162 bne $d171
02d171 lda $13
02d173 cmp $04b3
02d176 bpl $d18f
02d18f jsr $d358
02d192 rep #$30			; set A,X,Y => 16bit
02d194 ldx #$3800
02d197 ldy #$7800
02d19a lda #$2580
02d19d mvn $7e,$7e
02d1a0 phk
02d1a1 plb
02d1a2 jsr $d389
02d1a5 sep #$20			; set A => 8bit
02d1a7 rep #$10			; set X,Y => 16bit
02d1a9 lda $7b
02d1ab beq $d1f0
02d1ad lda $02
02d1af cmp #$50
02d1b1 bne $d1e1
02d1e1 lda #$1d
02d1e3 tsb $e3
02d1e5 inc $e5
02d1e7 lda $e3
02d1e9 bne $d1e7
02d1eb bra $d1f0
02d1f0 jsr $d3fd
02d1f3 bra $d25c
02d1f5 lda #$7e
02d1f7 sta $2183
02d1fa stz $83
02d1fc sep #$30			; set A,X,Y => 8bit
02d1fe ldx $83
02d200 lda $02,x
02d202 cmp #$ff
02d204 beq $d209
02d206 jsr $d80a
02d209 inx
02d20a stx $83
02d20c cpx $00
02d20e bmi $d200
02d210 inc $e5
02d212 jsr $d358
02d215 jsr $d389
02d218 lda #$1d
02d21a sta $e3
02d21c lda $e3
02d21e bne $d21c
02d220 lda $7e
02d222 beq $d25c
02d224 sep #$30			; set A,X,Y => 8bit
02d226 lda $02
02d228 cmp #$50
02d22a beq $d269
02d22c stz $ec
02d22e ldy #$00
02d230 jsr $ea60
02d233 lda #$1c
02d235 sta $7ec380,x
02d239 tya
02d23a clc
02d23b adc #$02
02d23d sta $7ec3a0,x
02d241 lda #$c5
02d243 sta $7ec240,x
02d247 iny
02d248 cpy #$03
02d24a bne $d230
02d24c lda #$18
02d24e xba
02d24f lda #$0c
02d251 jsl $0b92d6
02d255 sep #$20			; set A => 8bit
02d257 rep #$10			; set X,Y => 16bit
02d259 jsr $da18
02d25c inc $e6
02d25e lda $e6
02d260 bne $d25e
02d262 plp
02d263 pld
02d264 plb
02d265 ply
02d266 plx
02d267 pla
02d268 rtl				; exit routine



02d358 php				; save processor status to stack
02d359 phb				; save databank to stack
02d35a rep #$30			; set A,X,Y => 16bit
02d35c lda #$0000
02d35f sta $7ea800
02d363 ldx #$a800
02d366 ldy #$a801
02d369 lda #$0ffe
02d36c phb				; save databank to stack
02d36d mvn $7e,$7e
02d370 plb
02d371 sep #$20			; set A => 8bit
02d373 rep #$10			; set X,Y => 16bit
02d375 lda #$7e
02d377 sta $8d
02d379 ldx #$3800
02d37c stx $8e
02d37e lda #$04
02d380 sta $90
02d382 jsl $02e1c3
02d386 plb
02d387 plp
02d388 rts				; exit routine



02d389 php				; save processor status to stack
02d38a sep #$30			; set A,X,Y => 8bit
02d38c stz $83
02d38e stz $1d
02d390 stz $1e
02d392 stz $1f
02d394 stz $7b
02d396 lda $01
02d398 beq $d39c
02d39a inc $ea
02d39c ldx $83
02d39e lda $02,x
02d3a0 sta $20
02d3a2 cmp $0d,x
02d3a4 beq $d3ba
02d3a6 cmp #$ff
02d3a8 bne $d3c2
02d3aa lda $0d,x
02d3ac sta $20
02d3ae sta $02,x
02d3b0 jsr $d784
02d3b3 lda $0a1c
02d3b6 sta $07,x
02d3b8 inc $1d,x
02d3ba lda $10,x
02d3bc cmp $07,x
02d3be beq $d3c7
02d3c0 bmi $d3c4
02d3c2 lda #$ff
02d3c4 inc $7b
02d3c6 inc
02d3c7 sta $21
02d3c9 jsr $d4f7
02d3cc cmp $07,x
02d3ce bne $d3c6
02d3d0 lda $02,x
02d3d2 sta $0d,x
02d3d4 lda $07,x
02d3d6 sta $10,x
02d3d8 inc $83
02d3da lda $83
02d3dc cmp $00
02d3de bne $d39c
02d3e0 lda $04b3
02d3e3 sta $13
02d3e5 plp
02d3e6 rts				; exit routine



02d3fd phx
02d3fe phy
02d3ff php				; save processor status to stack
02d400 sep #$20			; set A => 8bit
02d402 rep #$10			; set X,Y => 16bit
02d404 lda $1d
02d406 ora $1e
02d408 ora $1f
02d40a beq $d485
02d40c lda $0d
02d40e cmp #$50
02d410 bne $d422
02d422 lda #$3f
02d424 sta $0505
02d427 lda #$7e
02d429 sta $87
02d42b ldy #$0000
02d42e ldx #$0000		; clear X
02d431 lda $1d,x
02d433 beq $d470
02d435 rep #$30			; set A,X,Y => 16bit
02d437 phx
02d438 txa
02d439 asl a
02d43a tax
02d43b lda $d3e7,x
02d43e sta $85
02d440 plx
02d441 sep #$20			; set A => 8bit
02d443 rep #$10			; set X,Y => 16bit
02d445 lda #$64
02d447 pha
02d448 lda #$00
02d44a jsr $d489
02d44d inc
02d44e inc
02d44f cmp #$10
02d451 bne $d44a
02d453 rep #$30			; set A,X,Y => 16bit
02d455 lda $85
02d457 clc
02d458 adc #$0020
02d45b sta $85
02d45d sep #$20			; set A => 8bit
02d45f rep #$10			; set X,Y => 16bit
02d461 pla
02d462 dec
02d463 bne $d447
02d465 cpy #$000c
02d468 bne $d470
02d46a lda #$ff
02d46c sta $02,x
02d46e sta $0d,x
02d470 inx
02d471 cpx #$0003
02d474 bne $d431
02d476 lda #$1c
02d478 tsb $e3
02d47a lda $e3
02d47c bne $d47a
02d47e iny
02d47f iny
02d480 cpy #$0010
02d483 bne $d42e
02d485 plp
02d486 ply
02d487 plx
02d488 rts				; exit routine



02d489 phx
02d48a phy
02d48b pha
02d48c php				; save processor status to stack
02d48d rep #$30			; set A,X,Y => 16bit
02d48f and #$00ff
02d492 tay
02d493 clc
02d494 adc $03,s
02d496 and #$000f
02d499 tax
02d49a lda [$85],y
02d49c and $d3ed,x
02d49f sta [$85],y
02d4a1 tya
02d4a2 clc
02d4a3 adc #$0010
02d4a6 tay
02d4a7 lda [$85],y
02d4a9 and $d3ed,x
02d4ac sta [$85],y
02d4ae plp
02d4af pla
02d4b0 ply
02d4b1 plx
02d4b2 rts				; exit routine



02d4f7 phk
02d4f8 plb
02d4f9 pha
02d4fa phx
02d4fb php				; save processor status to stack
02d4fc sep #$20			; set A => 8bit
02d4fe rep #$10			; set X,Y => 16bit
02d500 lda $20
02d502 cmp #$ff
02d504 bne $d50a
02d506 plp
02d507 plx
02d508 pla
02d509 rts				; exit routine



02d50a jsr $d784
02d50d jsr $d5bb
02d510 rep #$30			; set A,X,Y => 16bit
02d512 jsr $d6d0
02d515 lda $1a
02d517 sta $81
02d519 sep #$20			; set A => 8bit
02d51b rep #$10			; set X,Y => 16bit
02d51d lda $18
02d51f sta $80
02d521 rep #$30			; set A,X,Y => 16bit
02d523 lda $83
02d525 and #$00ff
02d528 asl a
02d529 tax
02d52a lda #$3800
02d52d adc $d58f,x
02d530 sta $70
02d532 sep #$20			; set A => 8bit
02d534 rep #$10			; set X,Y => 16bit
02d536 lda #$00
02d538 xba
02d539 lda $83
02d53b asl a
02d53c asl a
02d53d adc $21
02d53f asl a
02d540 rep #$30			; set A,X,Y => 16bit
02d542 tax
02d543 ldy $39,x
02d545 sty $69
02d547 ldy $51,x
02d549 sty $6b
02d54b jsr $d597
02d54e sep #$20			; set A => 8bit
02d550 rep #$10			; set X,Y => 16bit
02d552 lda #$08
02d554 sta $7f
02d556 asl $6d
02d558 bcc $d561
02d55a jsr $d66f
02d55d asl $6f
02d55f bra $d568
02d561 asl $6f
02d563 bcc $d568
02d565 jsr $d6b3
02d568 rep #$30			; set A,X,Y => 16bit
02d56a clc
02d56b lda $70
02d56d adc #$0020
02d570 sta $70
02d572 jsr $d62d
02d575 dec $81
02d577 beq $d58b
02d579 sep #$20			; set A => 8bit
02d57b rep #$10			; set X,Y => 16bit
02d57d dec $7f
02d57f bne $d556
02d581 rep #$30			; set A,X,Y => 16bit
02d583 inc $6b
02d585 sep #$20			; set A => 8bit
02d587 rep #$10			; set X,Y => 16bit
02d589 bra $d54b
02d58b plp
02d58c plx
02d58d pla
02d58e rts				; exit routine



02d597 php				; save processor status to stack
02d598 sep #$20			; set A => 8bit
02d59a rep #$10			; set X,Y => 16bit
02d59c ldx $6b
02d59e lda $0a8000,x
02d5a2 sta $6d
02d5a4 lda $0a830c,x
02d5a8 sta $6e
02d5aa lda #$ff
02d5ac sec
02d5ad sbc $6d
02d5af and $6e
02d5b1 sta $6f
02d5b3 lda $6d
02d5b5 and $6e
02d5b7 sta $6e
02d5b9 plp
02d5ba rts				; exit routine



02d5bb php				; save processor status to stack
02d5bc phb				; save databank to stack
02d5bd sep #$20			; set A => 8bit
02d5bf rep #$10			; set X,Y => 16bit
02d5c1 phk
02d5c2 plb
02d5c3 lda #$00
02d5c5 xba
02d5c6 lda #$7e
02d5c8 sta $2183
02d5cb lda $83
02d5cd asl a
02d5ce tax
02d5cf rep #$30			; set A,X,Y => 16bit
02d5d1 lda $d627,x
02d5d4 sta $74
02d5d6 jsr $d6d0
02d5d9 ldy $72
02d5db sep #$20			; set A => 8bit
02d5dd rep #$10			; set X,Y => 16bit
02d5df ldx $1a
02d5e1 lda $18
02d5e3 sta $7f
02d5e5 rep #$30			; set A,X,Y => 16bit
02d5e7 sty $2181
02d5ea iny
02d5eb lda $74
02d5ed sep #$20			; set A => 8bit
02d5ef rep #$10			; set X,Y => 16bit
02d5f1 sta $2180
02d5f4 xba
02d5f5 ora #$20
02d5f7 ora $2180
02d5fa sty $2181
02d5fd iny
02d5fe sta $2180
02d601 dex
02d602 beq $d624
02d604 dec $7f
02d606 bne $d61e
02d608 rep #$30			; set A,X,Y => 16bit
02d60a lda $72
02d60c clc
02d60d adc #$0040
02d610 sta $2181
02d613 sta $72
02d615 tay
02d616 sep #$20			; set A => 8bit
02d618 rep #$10			; set X,Y => 16bit
02d61a lda $18
02d61c sta $7f
02d61e rep #$30			; set A,X,Y => 16bit
02d620 inc $74
02d622 bra $d5e7
02d624 plb
02d625 plp
02d626 rts				; exit routine



02d62d php				; save processor status to stack
02d62e sep #$20			; set A => 8bit
02d630 rep #$10			; set X,Y => 16bit
02d632 ldy $72
02d634 iny
02d635 lda #$7e
02d637 sta $2183
02d63a lda $83
02d63c asl a
02d63d asl $6e
02d63f adc #$00
02d641 asl a
02d642 asl a
02d643 sty $2181
02d646 ora $2180
02d649 ora #$20
02d64b sty $2181
02d64e sta $2180
02d651 lda #$00
02d653 xba
02d654 dec $80
02d656 bne $d664
02d658 lda $18
02d65a sta $80
02d65c lda #$21
02d65e sec
02d65f sbc $18
02d661 asl a
02d662 bra $d666
02d664 lda #$02
02d666 rep #$30			; set A,X,Y => 16bit
02d668 clc
02d669 adc $72
02d66b sta $72
02d66d plp
02d66e rts				; exit routine



02d66f phy
02d670 php				; save processor status to stack
02d671 phb				; save databank to stack
02d672 sep #$20			; set A => 8bit
02d674 rep #$10			; set X,Y => 16bit
02d676 lda #$7e
02d678 sta $2183
02d67b ldx $70
02d67d stx $2181
02d680 lda $15
02d682 pha
02d683 plb
02d684 ldx $69
02d686 ldy #$0010
02d689 lda ($69)
02d68b sep #$20			; set A => 8bit
02d68d rep #$10			; set X,Y => 16bit
02d68f sta $2180
02d692 rep #$30			; set A,X,Y => 16bit
02d694 inc $69
02d696 dey
02d697 bne $d689
02d699 ldy #$0008
02d69c lda ($69)
02d69e sep #$20			; set A => 8bit
02d6a0 rep #$10			; set X,Y => 16bit
02d6a2 sta $2180
02d6a5 stz $2180
02d6a8 rep #$30			; set A,X,Y => 16bit
02d6aa inc $69
02d6ac dey
02d6ad bne $d69c
02d6af plb
02d6b0 plp
02d6b1 ply
02d6b2 rts				; exit routine



02d6b3 php				; save processor status to stack
02d6b4 phd				; save direct page to stack
02d6b5 sep #$20			; set A => 8bit
02d6b7 rep #$10			; set X,Y => 16bit
02d6b9 pea $2100
02d6bc pld
02d6bd lda #$00
02d6bf sta $83
02d6c1 ldx $0a70
02d6c4 stx $81
02d6c6 lda #$20
02d6c8 stz $80
02d6ca dec
02d6cb bne $d6c8
02d6cd pld
02d6ce plp
02d6cf rts				; exit routine



02d6d0 php				; save processor status to stack
02d6d1 sep #$30			; set A,X,Y => 8bit
02d6d3 ldx $83
02d6d5 lda #$0d
02d6d7 sec
02d6d8 sbc $19
02d6da inc
02d6db ldy $0a0a,x
02d6de beq $d6e6
02d6e0 ldy $0a07,x
02d6e3 bne $d6e6
02d6e5 dec
02d6e6 sta $17
02d6e8 phx
02d6e9 clc
02d6ea lda $00
02d6ec adc $00
02d6ee adc $00
02d6f0 dec
02d6f1 dec
02d6f2 dec
02d6f3 adc $01,s
02d6f5 tax
02d6f6 lda $18
02d6f8 lsr a
02d6f9 pha
02d6fa lda $d72b,x
02d6fd sec
02d6fe sbc $01,s
02d700 sta $16
02d702 pla
02d703 plx
02d704 jsr $d734
02d707 rep #$20			; set A => 16bit
02d709 sep #$10			; set X,Y => 8bit
02d70b lda $17
02d70d and #$00ff
02d710 asl a
02d711 asl a
02d712 asl a
02d713 asl a
02d714 asl a
02d715 sep #$30			; set A,X,Y => 8bit
02d717 clc
02d718 adc $16
02d71a xba
02d71b adc #$00
02d71d xba
02d71e rep #$20			; set A => 16bit
02d720 sep #$10			; set X,Y => 8bit
02d722 asl a
02d723 clc
02d724 adc #$a800
02d727 sta $72
02d729 plp
02d72a rts				; exit routine



02d734 phx
02d735 php				; save processor status to stack
02d736 rep #$30			; set A,X,Y => 16bit
02d738 lda $83
02d73a and #$00ff
02d73d asl a
02d73e asl a
02d73f adc #$0a2d
02d742 tay
02d743 ldx #$0a16
02d746 lda #$0003
02d749 mvn $02,$02
02d74c lda $18
02d74e ldx #$0000		; clear X
02d751 cmp $d77a,x
02d754 beq $d75a
02d756 inx
02d757 inx
02d758 bra $d751
02d75a txa
02d75b sep #$30			; set A,X,Y => 8bit
02d75d lsr a
02d75e ldx $83
02d760 sta $22,x
02d762 lda $02
02d764 cmp #$50
02d766 bne $d777
02d777 plp
02d778 plx
02d779 rts				; exit routine



02d784 pha
02d785 phx
02d786 php				; save processor status to stack
02d787 sep #$20			; set A => 8bit
02d789 rep #$10			; set X,Y => 16bit
02d78b phk
02d78c plb
02d78d ldx #$0000		; clear X
02d790 lda $d7d3,x
02d793 cmp $20
02d795 bpl $d7a5
02d797 rep #$30			; set A,X,Y => 16bit
02d799 txa
02d79a clc
02d79b adc #$0009
02d79e tax
02d79f sep #$20			; set A => 8bit
02d7a1 rep #$10			; set X,Y => 16bit
02d7a3 bra $d790
02d7a5 rep #$30			; set A,X,Y => 16bit
02d7a7 inx
02d7a8 txa
02d7a9 clc
02d7aa adc #$d7d3
02d7ad tax
02d7ae ldy #$0a15
02d7b1 lda #$0007
02d7b4 mvn $02,$02
02d7b7 sep #$20			; set A => 8bit
02d7b9 rep #$10			; set X,Y => 16bit
02d7bb lda $20
02d7bd sta $4202
02d7c0 lda #$05
02d7c2 jsl $00971e
02d7c6 ldx $4216
02d7c9 lda $098462,x
02d7cd sta $15
02d7cf plp
02d7d0 plx
02d7d1 pla
02d7d2 rts				; exit routine



02d80a phx
02d80b phb				; save databank to stack
02d80c php				; save processor status to stack
02d80d sep #$30			; set A,X,Y => 8bit
02d80f ldx $83
02d811 lda $02,x
02d813 sta $20
02d815 sep #$20			; set A => 8bit
02d817 rep #$10			; set X,Y => 16bit
02d819 sta $4202
02d81c lda #$05
02d81e jsl $00971e
02d822 ldx $4216
02d825 lda $098460,x
02d829 sta $69
02d82b lda $098461,x
02d82f sta $6a
02d831 lda $098462,x
02d835 sta $6b
02d837 phb				; save databank to stack
02d838 lda $098464,x
02d83c cmp #$ff
02d83e beq $d89b
02d840 pha
02d841 lda $098463,x
02d845 pha
02d846 rep #$30			; set A,X,Y => 16bit
02d848 lda $83
02d84a and #$00ff
02d84d asl a
02d84e asl a
02d84f asl a
02d850 asl a
02d851 asl a
02d852 asl a
02d853 clc
02d854 adc #$c040
02d857 tay
02d858 sep #$20			; set A => 8bit
02d85a rep #$10			; set X,Y => 16bit
02d85c pla
02d85d rep #$30			; set A,X,Y => 16bit
02d85f and #$00ff
02d862 asl a
02d863 asl a
02d864 asl a
02d865 asl a
02d866 clc
02d867 adc #$8000
02d86a tax
02d86b lda #$000f
02d86e mvn $09,$7e
02d871 tya
02d872 clc
02d873 adc #$0010
02d876 tay
02d877 sep #$20			; set A => 8bit
02d879 rep #$10			; set X,Y => 16bit
02d87b pla
02d87c rep #$30			; set A,X,Y => 16bit
02d87e and #$00ff
02d881 asl a
02d882 asl a
02d883 asl a
02d884 asl a
02d885 clc
02d886 adc #$8000
02d889 tax
02d88a lda #$000f
02d88d mvn $09,$7e
02d890 plb
02d891 jsr $d910
02d894 jsr $d994
02d897 plp
02d898 plb
02d899 plx
02d89a rts				; exit routine



02d8af phx
02d8b0 pha
02d8b1 php				; save processor status to stack
02d8b2 sep #$30			; set A,X,Y => 8bit
02d8b4 ldx $20
02d8b6 lda $d8bf,x
02d8b9 sta $78
02d8bb plp
02d8bc pla
02d8bd plx
02d8be rts				; exit routine



02d910 php				; save processor status to stack
02d911 phb				; save databank to stack
02d912 phk
02d913 plb
02d914 rep #$30			; set A,X,Y => 16bit
02d916 jsr $d8af
02d919 ldx #$0000		; clear X
02d91c lda $78
02d91e and #$00ff
02d921 cmp $d96e,x
02d924 bmi $d930
02d926 pha
02d927 txa
02d928 clc
02d929 adc #$000a
02d92c tax
02d92d pla
02d92e bra $d921
02d930 sec
02d931 sbc $d96c,x
02d934 sep #$20			; set A => 8bit
02d936 rep #$10			; set X,Y => 16bit
02d938 sta $4202
02d93b rep #$30			; set A,X,Y => 16bit
02d93d lda $d972,x
02d940 sta $0a79
02d943 sep #$20			; set A => 8bit
02d945 rep #$10			; set X,Y => 16bit
02d947 sta $4203
02d94a nop
02d94b nop
02d94c nop
02d94d nop
02d94e lda $4216
02d951 sta $4202
02d954 lda $d974,x
02d957 sta $4203
02d95a nop
02d95b nop
02d95c nop
02d95d nop
02d95e rep #$30			; set A,X,Y => 16bit
02d960 lda $d970,x
02d963 clc
02d964 adc $4216
02d967 sta $6b
02d969 plb
02d96a plp
02d96b rts				; exit routine



02d994 php				; save processor status to stack
02d995 phb				; save databank to stack
02d996 sep #$20			; set A => 8bit
02d998 rep #$10			; set X,Y => 16bit
02d99a lda #$0a
02d99c pha
02d99d plb
02d99e lda #$00
02d9a0 pha
02d9a1 lda $83
02d9a3 asl a
02d9a4 asl a
02d9a5 asl a
02d9a6 rep #$30			; set A,X,Y => 16bit
02d9a8 and #$00ff
02d9ab adc #$0a39
02d9ae tay
02d9af lda $69
02d9b1 sta $0000,y
02d9b4 phy
02d9b5 lda $6b
02d9b7 sta $0018,y
02d9ba pha
02d9bb clc
02d9bc adc $79
02d9be sta $001a,y
02d9c1 clc
02d9c2 adc $79
02d9c4 sta $001c,y
02d9c7 clc
02d9c8 adc $79
02d9ca sta $001e,y
02d9cd plx
02d9ce sep #$20			; set A => 8bit
02d9d0 rep #$10			; set X,Y => 16bit
02d9d2 lda $79
02d9d4 pha
02d9d5 lda #$00
02d9d7 xba
02d9d8 lda $0a8000,x
02d9dc inx
02d9dd ldy #$0008
02d9e0 asl a
02d9e1 xba
02d9e2 adc #$00
02d9e4 xba
02d9e5 dey
02d9e6 bne $d9e0
02d9e8 pla
02d9e9 dec
02d9ea beq $d9ef
02d9ec pha
02d9ed bra $d9d8
02d9ef xba
02d9f0 sta $4202
02d9f3 lda #$18
02d9f5 sta $4203
02d9f8 rep #$30			; set A,X,Y => 16bit
02d9fa ply
02d9fb lda $0000,y
02d9fe clc
02d9ff adc $4216
02da02 sta $0002,y
02da05 iny
02da06 iny
02da07 sep #$20			; set A => 8bit
02da09 rep #$10			; set X,Y => 16bit
02da0b pla
02da0c inc
02da0d cmp #$03
02da0f bpl $da15
02da11 pha
02da12 phy
02da13 bra $d9d2
02da15 plb
02da16 plp
02da17 rts				; exit routine



02da18 phd				; save direct page to stack
02da19 pea $2100
02da1c pld
02da1d stz $0a7e
02da20 lda #$1d
02da22 sta $2c
02da24 stz $2d
02da26 stz $30
02da28 ldx #$0000		; clear X
02da2b lda #$a1
02da2d sta $31
02da2f lda $da7d,x
02da32 beq $da49
02da34 inx
02da35 sta $32
02da37 jsl $0c8000
02da3b jsl $0c8000
02da3f jsl $0c8000
02da43 jsl $0c8000
02da47 bra $da2f
02da49 lda #$1f
02da4b sta $2c
02da4d lda #$22
02da4f sta $31
02da51 ldx #$0000		; clear X
02da54 lda $da7d,x
02da57 beq $da72
02da59 inx
02da5a sta $32
02da5c jsl $0c8000
02da60 jsl $0c8000
02da64 jsl $0c8000
02da68 jsl $0c8000
02da6c jsl $0c8000
02da70 bra $da54
02da72 stz $0a84
02da75 stz $30
02da77 stz $31
02da79 stz $32
02da7b pld
02da7c rts				; exit routine



02da98 pha
02da99 phx
02da9a phy
02da9b phd				; save direct page to stack
02da9c php				; save processor status to stack
02da9d phb				; save databank to stack
02da9e pea $0a00
02daa1 pld
02daa2 sep #$20			; set A => 8bit
02daa4 rep #$10			; set X,Y => 16bit
02daa6 phk
02daa7 plb
02daa8 jsr $dfcd
02daab lda #$ff
02daad sta $84
02daaf sta $7e
02dab1 stz $0af0
02dab4 lda #$0f
02dab6 sta $0110
02dab9 lda $04af
02dabc lsr a
02dabd lsr a
02dabe inc
02dabf and #$03
02dac1 beq $dad5
02dac3 sta $050b
02dac6 lda #$08
02dac8 sta $050c
02dacb lda #$0f
02dacd sta $050d
02dad0 lda #$03
02dad2 sta $050a
02dad5 stz $e3
02dad7 inc $e2
02dad9 stz $0af8
02dadc inc $e6
02dade lda $e6
02dae0 bne $dade
02dae2 phd				; save direct page to stack
02dae3 pea $2100
02dae6 pld
02dae7 lda #$42
02dae9 sta $07
02daeb lda #$4a
02daed sta $08
02daef rep #$30			; set A,X,Y => 16bit
02daf1 stz $0d
02daf3 stz $0d
02daf5 stz $0f
02daf7 stz $0f
02daf9 lda #$0000
02dafc sta $7ec240
02db00 ldx #$c240
02db03 ldy #$c241
02db06 lda #$03fe
02db09 mvn $7e,$7e
02db0c lda #$fefe
02db0f sta $0c40
02db12 ldx #$0c40
02db15 ldy #$0c41
02db18 lda #$01be
02db1b mvn $02,$02
02db1e lda #$5555
02db21 sta $0e04
02db24 ldx #$0e04
02db27 ldy #$0e05
02db2a lda #$001a
02db2d mvn $02,$02
02db30 pea $0b00
02db33 pld
02db34 sta $00
02db36 stz $02
02db38 stz $04
02db3a stz $06
02db3c stz $08
02db3e stz $0a
02db40 stz $0c
02db42 stz $0e
02db44 pld
02db45 sep #$20			; set A => 8bit
02db47 rep #$10			; set X,Y => 16bit
02db49 lda $0a9c
02db4c beq $db88
02db4e phd				; save direct page to stack
02db4f pea $0b00
02db52 pld
02db53 lda #$81
02db55 sta $33
02db57 sta $36
02db59 lda #$00
02db5b sta $34
02db5d sta $35
02db5f sta $37
02db61 inc $37
02db63 sta $38
02db65 sta $39
02db67 pld
02db68 ldx #$db83
02db6b ldy #$4370
02db6e lda #$00
02db70 xba
02db71 lda #$04
02db73 mvn $02,$00
02db76 lda #$80
02db78 tsb $0111
02db7b phk
02db7c plb
02db7d stz $ea
02db7f stz $eb
02db81 bra $db88
02db88 jsr $e6ed
02db8b jsr $e0db
02db8e ldx #$0005
02db91 lda #$ff
02db93 sta $0d,x
02db95 dex
02db96 bpl $db93
02db98 ldy #$0a25
02db9b ldx #$dcc4
02db9e lda $1090
02dba1 cmp #$ff
02dba3 bne $dba8
02dba5 ldx #$dccc
02dba8 rep #$30			; set A,X,Y => 16bit
02dbaa lda #$0007
02dbad mvn $02,$02
02dbb0 sep #$20			; set A => 8bit
02dbb2 rep #$10			; set X,Y => 16bit
02dbb4 lda $9c
02dbb6 beq $dbbd
02dbb8 jsr $dcdd
02dbbb bra $dbc0
02dbc0 sep #$30			; set A,X,Y => 8bit
02dbc2 jsr $ea60
02dbc5 stx $0ade
02dbc8 stz $0af4
02dbcb lda #$00
02dbcd sta $7ec320,x
02dbd1 lda #$00
02dbd3 sta $7ec400,x
02dbd7 sta $7ec340,x
02dbdb lda #$81
02dbdd sta $7ec240,x
02dbe1 ldy #$0c
02dbe3 jsr $ea7f
02dbe6 sta $7ec260,x
02dbea phx
02dbeb asl a
02dbec asl a
02dbed tax
02dbee phd				; save direct page to stack
02dbef pea $0c00
02dbf2 pld
02dbf3 lda #$1c
02dbf5 pha
02dbf6 sta $02,x
02dbf8 inc
02dbf9 sta $06,x
02dbfb inc
02dbfc sta $0a,x
02dbfe inc
02dbff sta $0e,x
02dc01 lda #$30
02dc03 sta $03,x
02dc05 sta $07,x
02dc07 sta $0b,x
02dc09 sta $0f,x
02dc0b lda $0a25
02dc0e asl a
02dc0f asl a
02dc10 asl a
02dc11 sta $00,x
02dc13 sta $08,x
02dc15 clc
02dc16 adc #$08
02dc18 sta $04,x
02dc1a sta $0c,x
02dc1c lda $0a26
02dc1f asl a
02dc20 asl a
02dc21 asl a
02dc22 dec
02dc23 sta $01,x
02dc25 sta $05,x
02dc27 clc
02dc28 adc #$08
02dc2a sta $09,x
02dc2c sta $0d,x
02dc2e pla
02dc2f pld
02dc30 plx
02dc31 sta $7ec480,x
02dc35 stz $0af5
02dc38 jsr $ea60
02dc3b lda #$02
02dc3d sta $7ec320,x
02dc41 stx $0adf
02dc44 lda #$00
02dc46 sta $7ec400,x
02dc4a sta $7ec340,x
02dc4e lda #$81
02dc50 sta $7ec240,x
02dc54 ldy #$0c
02dc56 jsr $ea7f
02dc59 sta $7ec260,x
02dc5d pha
02dc5e clc
02dc5f adc #$18
02dc61 sta $0ae9
02dc64 pla
02dc65 asl a
02dc66 asl a
02dc67 phx
02dc68 tax
02dc69 lda $10a0
02dc6c and #$0f
02dc6e tay
02dc6f lda $dcd4,y
02dc72 pha
02dc73 phd				; save direct page to stack
02dc74 pea $0c00
02dc77 pld
02dc78 sta $02,x
02dc7a inc
02dc7b sta $06,x
02dc7d inc
02dc7e sta $0a,x
02dc80 inc
02dc81 sta $0e,x
02dc83 lda #$34
02dc85 sta $03,x
02dc87 sta $07,x
02dc89 sta $0b,x
02dc8b sta $0f,x
02dc8d lda $0a29
02dc90 asl a
02dc91 asl a
02dc92 asl a
02dc93 sta $00,x
02dc95 sta $08,x
02dc97 clc
02dc98 adc #$08
02dc9a sta $04,x
02dc9c sta $0c,x
02dc9e lda $0a2a
02dca1 asl a
02dca2 asl a
02dca3 asl a
02dca4 dec
02dca5 sta $01,x
02dca7 sta $05,x
02dca9 clc
02dcaa adc #$08
02dcac sta $09,x
02dcae sta $0d,x
02dcb0 pld
02dcb1 pla
02dcb2 plx
02dcb3 sta $7ec480,x
02dcb7 jsl $0b935f
02dcbb inc $f8
02dcbd plb
02dcbe plp
02dcbf pld
02dcc0 ply
02dcc1 plx
02dcc2 pla
02dcc3 rtl				; exit routine



02dcdd php				; save processor status to stack
02dcde sep #$30			; set A,X,Y => 8bit
02dce0 jsr $df3e
02dce3 jsr $dfe8
02dce6 jsr $e021
02dce9 lda #$20
02dceb tsb $e3
02dced stz $98
02dcef lda #$06
02dcf1 sta $99
02dcf3 lda $0a9d
02dcf6 sta $9a
02dcf8 sta $97
02dcfa jsl $02e48c
02dcfe clc
02dcff adc #$04
02dd01 cmp #$10
02dd03 bne $dcf8
02dd05 ldy #$04
02dd07 ldx #$00
02dd09 stx $91
02dd0b sty $92
02dd0d lda #$10
02dd0f sta $94
02dd11 lda $9f
02dd13 and #$0f
02dd15 sta $96
02dd17 jsl $02e4eb
02dd1b inx
02dd1c cpx #$10
02dd1e bne $dd09
02dd20 ldx #$00
02dd22 iny
02dd23 cpy #$0e
02dd25 bne $dd09
02dd27 lda #$02
02dd29 tsb $e3
02dd2b jsr $e095
02dd2e plp
02dd2f rts				; exit routine



02df3e phx
02df3f phy
02df40 php				; save processor status to stack
02df41 tax
02df42 lda $df5b,x
02df45 sta $0aee
02df48 pea $df53
02df4b jsl $0097be
02df4f plp
02df50 ply
02df51 plx
02df52 rts				; exit routine



02df7f rts				; exit routine



02dfcd php				; save processor status to stack
02dfce phb				; save databank to stack
02dfcf sep #$20			; set A => 8bit
02dfd1 rep #$10			; set X,Y => 16bit
02dfd3 lda #$00
02dfd5 sta $7ec240
02dfd9 ldx #$c240
02dfdc ldy #$c241
02dfdf xba
02dfe0 lda #$1e
02dfe2 mvn $7e,$7e
02dfe5 plb
02dfe6 plp
02dfe7 rts				; exit routine



02dfe8 php				; save processor status to stack
02dfe9 sep #$20			; set A => 8bit
02dfeb rep #$10			; set X,Y => 16bit
02dfed lda $0a9c
02dff0 sta $4202
02dff3 lda #$03
02dff5 jsl $00971e
02dff9 ldx $4216
02dffc rep #$30			; set A,X,Y => 16bit
02dffe lda $0cf715,x
02e002 and #$00ff
02e005 asl a
02e006 asl a
02e007 asl a
02e008 asl a
02e009 sta $0a9d
02e00c sep #$20			; set A => 8bit
02e00e rep #$10			; set X,Y => 16bit
02e010 lda $0cf716,x
02e014 sta $0a9f
02e017 dec
02e018 lda $0cf717,x
02e01c sta $0aa0
02e01f plp
02e020 rts				; exit routine



02e021 php				; save processor status to stack
02e022 rep #$30			; set A,X,Y => 16bit
02e024 ldx #$e04f
02e027 ldy #$0a8a
02e02a lda #$0006
02e02d mvn $02,$02
02e030 sep #$20			; set A => 8bit
02e032 rep #$10			; set X,Y => 16bit
02e034 ldy #$0010
02e037 ldx $0a9d
02e03a lda $0cf425,x
02e03e inx
02e03f jsr $e056
02e042 dey
02e043 bne $e03a
02e045 lda $0a9f
02e048 and #$0f
02e04a jsr $e056
02e04d plp
02e04e rts				; exit routine



02e056 phx
02e057 phy
02e058 php				; save processor status to stack
02e059 sep #$20			; set A => 8bit
02e05b rep #$10			; set X,Y => 16bit
02e05d sta $4202
02e060 lda #$06
02e062 jsl $00971e
02e066 ldx $4216
02e069 ldy #$0004
02e06c sep #$20			; set A => 8bit
02e06e rep #$10			; set X,Y => 16bit
02e070 lda $0cef85,x
02e074 inx
02e075 sta $4202
02e078 lda #$18
02e07a jsl $00971e
02e07e rep #$30			; set A,X,Y => 16bit
02e080 lda $4216
02e083 clc
02e084 adc #$d785
02e087 sta $0a8b
02e08a jsl $02e1c3
02e08e dey
02e08f bne $e06c
02e091 plp
02e092 ply
02e093 plx
02e094 rts				; exit routine



02e095 php				; save processor status to stack
02e096 phb				; save databank to stack
02e097 phd				; save direct page to stack
02e098 rep #$30			; set A,X,Y => 16bit
02e09a pea $0a00
02e09d pld
02e09e lda #$00c0
02e0a1 clc
02e0a2 adc #$c040
02e0a5 tay
02e0a6 lda $0aa0
02e0a9 and #$00ff
02e0ac asl a
02e0ad asl a
02e0ae asl a
02e0af asl a
02e0b0 adc #$f285
02e0b3 tax
02e0b4 lda #$000f
02e0b7 mvn $0c,$7e
02e0ba lda #$00e0
02e0bd clc
02e0be adc #$c040
02e0c1 tay
02e0c2 lda $0a9f
02e0c5 and #$00f0
02e0c8 clc
02e0c9 adc #$f285
02e0cc tax
02e0cd lda #$000f
02e0d0 mvn $0c,$7e
02e0d3 sep #$20			; set A => 8bit
02e0d5 rep #$10			; set X,Y => 16bit
02e0d7 pld
02e0d8 plb
02e0d9 plp
02e0da rts				; exit routine



02e0db pha
02e0dc phx
02e0dd phy
02e0de php				; save processor status to stack
02e0df sep #$20			; set A => 8bit
02e0e1 rep #$10			; set X,Y => 16bit
02e0e3 ldx #$e180
02e0e6 ldy #$0a8a
02e0e9 lda #$00
02e0eb xba
02e0ec lda #$06
02e0ee mvn $02,$02
02e0f1 ldy #$0000
02e0f4 ldx $e187,y
02e0f7 stx $8b
02e0f9 lda #$04
02e0fb jsl $02e1c3
02e0ff dec
02e100 bne $e0fb
02e102 iny
02e103 iny
02e104 cpy #$003c
02e107 bne $e0f4
02e109 lda #$04
02e10b sta $e4
02e10d lda $e4
02e10f bne $e10d
02e111 lda #$06
02e113 sta $90
02e115 ldx #$7800
02e118 stx $8e
02e11a lda #$09
02e11c sta $8a
02e11e ldx #$fb9d
02e121 stx $8b
02e123 lda #$2b
02e125 jsl $02e1c3
02e129 dec
02e12a bne $e125
02e12c ldx #$f420
02e12f stx $8b
02e131 lda #$04
02e133 sta $8a
02e135 lda #$10
02e137 jsl $02e1c3
02e13b dec
02e13c bne $e137
02e13e lda #$05
02e140 sta $8a
02e142 ldx #$b470
02e145 stx $8b
02e147 lda #$04
02e149 jsl $02e1c3
02e14d dec
02e14e bne $e149
02e150 ldx #$cc88
02e153 stx $8b
02e155 jsl $02e1c3
02e159 ldx #$cda8
02e15c stx $8b
02e15e jsl $02e1c3
02e162 ldx #$ce08
02e165 stx $8b
02e167 jsl $02e1c3
02e16b lda #$02
02e16d trb $90
02e16f jsl $02e1c3
02e173 lda #$08
02e175 sta $e4
02e177 lda $e4
02e179 bne $e177
02e17b plp
02e17c ply
02e17d plx
02e17e pla
02e17f rts				; exit routine



02e1c3 phd				; save direct page to stack
02e1c4 pha
02e1c5 phx
02e1c6 phy
02e1c7 php				; save processor status to stack
02e1c8 sep #$20			; set A => 8bit
02e1ca rep #$10			; set X,Y => 16bit
02e1cc pea $2100
02e1cf pld
02e1d0 phb				; save databank to stack
02e1d1 lda $0a8a
02e1d4 ldy $0a8b
02e1d7 pha
02e1d8 plb
02e1d9 lda #$04
02e1db trb $0a90
02e1de beq $e1ea
02e1e0 lda $0a8d
02e1e3 sta $83
02e1e5 ldx $0a8e
02e1e8 stx $81
02e1ea lda $0a90
02e1ed bit #$02
02e1ef bne $e1f6
02e1f1 jsr $e34e
02e1f4 bra $e219
02e1f6 bit #$08
02e1f8 beq $e1ff
02e1fa jsr $e3e4
02e1fd bra $e202
02e1ff jsr $e454
02e202 lda $0a90
02e205 bit #$10
02e207 beq $e219
02e209 lda $0a8d
02e20c ldy $0a8e
02e20f clc
02e210 and #$01
02e212 adc #$7e
02e214 pha
02e215 plb
02e216 jsr $e475
02e219 plb
02e21a rep #$20			; set A => 16bit
02e21c lda $0a8e
02e21f clc
02e220 adc #$0020
02e223 sta $0a8e
02e226 lda $0a8b
02e229 clc
02e22a adc #$0018
02e22d sta $0a8b
02e230 plp
02e231 ply
02e232 plx
02e233 pla
02e234 pld
02e235 rtl				; exit routine



02e34e php				; save processor status to stack
02e34f sep #$20			; set A => 8bit
02e351 stz $80
02e353 stz $80
02e355 stz $80
02e357 stz $80
02e359 stz $80
02e35b stz $80
02e35d stz $80
02e35f stz $80
02e361 stz $80
02e363 stz $80
02e365 stz $80
02e367 stz $80
02e369 stz $80
02e36b stz $80
02e36d stz $80
02e36f stz $80
02e371 stz $80
02e373 stz $80
02e375 stz $80
02e377 stz $80
02e379 stz $80
02e37b stz $80
02e37d stz $80
02e37f stz $80
02e381 stz $80
02e383 stz $80
02e385 stz $80
02e387 stz $80
02e389 stz $80
02e38b stz $80
02e38d stz $80
02e38f stz $80
02e391 plp
02e392 rts				; exit routine



02e3e4 phx
02e3e5 pea $2100
02e3e8 pld
02e3e9 lda #$00
02e3eb xba
02e3ec ldx #$0010
02e3ef phx
02e3f0 lda $0000,y
02e3f3 iny
02e3f4 tax
02e3f5 lda $02e236,x
02e3f9 sta $80
02e3fb plx
02e3fc dex
02e3fd bne $e3ef
02e3ff ldx #$0008
02e402 phx
02e403 lda $0000,y
02e406 iny
02e407 tax
02e408 lda $02e236,x
02e40c sta $80
02e40e stz $80
02e410 plx
02e411 dex
02e412 bne $e402
02e414 plx
02e415 rts				; exit routine



02e454 phx
02e455 pea $2100
02e458 pld
02e459 ldx #$0010
02e45c lda $0000,y
02e45f iny
02e460 sta $80
02e462 dex
02e463 bne $e45c
02e465 ldx #$0008
02e468 lda $0000,y
02e46b iny
02e46c sta $80
02e46e stz $80
02e470 dex
02e471 bne $e468
02e473 plx
02e474 rts				; exit routine



02e475 phx
02e476 ldx #$0008
02e479 lda $0000,y
02e47c ora $0010,y
02e47f iny
02e480 ora $0000,y
02e483 sta $0010,y
02e486 iny
02e487 dex
02e488 bne $e479
02e48a plx
02e48b rts				; exit routine



02e48c pha
02e48d phb				; save databank to stack
02e48e phx
02e48f phy
02e490 php				; save processor status to stack
02e491 rep #$30			; set A,X,Y => 16bit
02e493 ldx #$0a97
02e496 ldy #$0a91
02e499 lda #$0003
02e49c mvn $02,$02
02e49f pea $0000
02e4a2 ldx #$0000		; clear X
02e4a5 rep #$20			; set A => 16bit
02e4a7 stx $94
02e4a9 txa
02e4aa inx
02e4ab phx
02e4ac clc
02e4ad adc $0a9d
02e4b0 tax
02e4b1 sep #$20			; set A => 8bit
02e4b3 lda $0cf425,x
02e4b7 plx
02e4b8 sta $96
02e4ba jsl $02e4eb
02e4be inc $91
02e4c0 pla
02e4c1 inc
02e4c2 pha
02e4c3 cmp #$04
02e4c5 bne $e4a5
02e4c7 lda $91
02e4c9 sec
02e4ca sbc #$04
02e4cc sta $91
02e4ce pla
02e4cf lda #$00
02e4d1 pha
02e4d2 inc $92
02e4d4 rep #$20			; set A => 16bit
02e4d6 pla
02e4d7 clc
02e4d8 adc #$0100
02e4db pha
02e4dc cmp #$0400
02e4df bne $e4a5
02e4e1 sep #$20			; set A => 8bit
02e4e3 pla
02e4e4 pla
02e4e5 plp
02e4e6 ply
02e4e7 plx
02e4e8 plb
02e4e9 pla
02e4ea rtl				; exit routine



02e4eb pha
02e4ec phx
02e4ed phy
02e4ee php				; save processor status to stack
02e4ef rep #$30			; set A,X,Y => 16bit
02e4f1 lda $0a91
02e4f4 and #$00ff
02e4f7 tax
02e4f8 lda $0a92
02e4fb and #$00ff
02e4fe tay
02e4ff jsr $e523
02e502 sep #$20			; set A => 8bit
02e504 rep #$10			; set X,Y => 16bit
02e506 lda $96
02e508 sta $4202
02e50b lda #$06
02e50d jsl $00971e
02e511 ldx $4216
02e514 lda $93
02e516 xba
02e517 lda $0cef89,x
02e51b jsr $e536
02e51e plp
02e51f ply
02e520 plx
02e521 pla
02e522 rtl				; exit routine



02e523 pha
02e524 phx
02e525 tya
02e526 asl a
02e527 inc
02e528 asl a
02e529 asl a
02e52a asl a
02e52b asl a
02e52c asl a
02e52d adc $01,s
02e52f adc $01,s
02e531 asl a
02e532 tay
02e533 plx
02e534 pla
02e535 rts				; exit routine



02e536 sep #$20			; set A => 8bit
02e538 asl $0a94
02e53b asl $0a94
02e53e rep #$20			; set A => 16bit
02e540 pha
02e541 pea $0000
02e544 sep #$20			; set A => 8bit
02e546 asl a
02e547 xba
02e548 lda #$00
02e54a adc #$00
02e54c asl a
02e54d asl a
02e54e asl a
02e54f asl a
02e550 adc $04,s
02e552 xba
02e553 asl a
02e554 xba
02e555 adc #$00
02e557 asl a
02e558 asl a
02e559 xba
02e55a pha
02e55b rep #$20			; set A => 16bit
02e55d and #$ff00
02e560 adc #$012d
02e563 sep #$20			; set A => 8bit
02e565 adc $0a94
02e568 inc $0a94
02e56b xba
02e56c adc #$00
02e56e phx
02e56f tyx
02e570 sta $7eb801,x
02e574 xba
02e575 sta $7eb800,x
02e579 plx
02e57a lda $03,s
02e57c inc
02e57d sta $03,s
02e57f cmp #$04
02e581 beq $e598
02e583 cmp #$02
02e585 bne $e591
02e587 rep #$20			; set A => 16bit
02e589 tya
02e58a clc
02e58b adc #$003e
02e58e tay
02e58f bra $e593
02e591 iny
02e592 iny
02e593 sep #$20			; set A => 8bit
02e595 pla
02e596 bra $e544
02e598 sep #$20			; set A => 8bit
02e59a pla
02e59b rep #$20			; set A => 16bit
02e59d pla
02e59e pla
02e59f rts				; exit routine



02e5ac pha
02e5ad phb				; save databank to stack
02e5ae phx
02e5af phy
02e5b0 php				; save processor status to stack
02e5b1 rep #$30			; set A,X,Y => 16bit
02e5b3 phk
02e5b4 plb
02e5b5 lda $e5a8
02e5b8 sta $0aae
02e5bb lda $e5aa
02e5be sta $0ab0
02e5c1 sep #$20			; set A => 8bit
02e5c3 rep #$10			; set X,Y => 16bit
02e5c5 jsr $e60f
02e5c8 lda #$80
02e5ca tsb $0110
02e5cd stz $212c
02e5d0 stz $212d
02e5d3 stz $2106
02e5d6 stz $2121
02e5d9 stz $2122
02e5dc stz $2122
02e5df plp
02e5e0 ply
02e5e1 plx
02e5e2 plb
02e5e3 pla
02e5e4 rtl				; exit routine



02e60f php				; save processor status to stack
02e610 jsl $0c8000
02e614 lda #$ff
02e616 sta $2127
02e619 sta $2129
02e61c stz $2126
02e61f stz $2128
02e622 stz $212e
02e625 stz $212f
02e628 stz $212a
02e62b stz $212b
02e62e lda #$22
02e630 sta $2123
02e633 sta $2124
02e636 sta $2125
02e639 lda #$40
02e63b sta $2130
02e63e ldx #$e6e8
02e641 ldy #$4310
02e644 lda #$00
02e646 xba
02e647 lda #$04
02e649 mvn $02,$02
02e64c lda #$81
02e64e sta $0aaa
02e651 lda #$ff
02e653 sta $0aa2
02e656 stz $0aa3
02e659 sta $0aab
02e65c stz $0aac
02e65f stz $0aad
02e662 lda #$80
02e664 sta $0aa1
02e667 lda #$02
02e669 jsl $0c8000
02e66d tsb $0111
02e670 sep #$20			; set A => 8bit
02e672 lda $0aaf
02e675 bit #$80
02e677 bne $e6d5
02e679 pha
02e67a sec
02e67b sbc #$1e
02e67d beq $e681
02e67f bpl $e683
02e681 lda #$01
02e683 sta $0aa1
02e686 pla
02e687 sta $0aa5
02e68a sta $0aa8
02e68d pha
02e68e eor #$ff
02e690 sta $0aa6
02e693 sta $0aa9
02e696 lda #$80
02e698 sec
02e699 sbc $01,s
02e69b sta $0aa4
02e69e sta $0aa7
02e6a1 pla
02e6a2 lda $0aa1
02e6a5 cmp #$0a
02e6a7 bmi $e6b4
02e6a9 lda $0aaf
02e6ac asl a
02e6ad and #$f0
02e6af ora #$07
02e6b1 sta $2106
02e6b4 rep #$20			; set A => 16bit
02e6b6 lda $0ab0
02e6b9 adc $0aae
02e6bc sta $0aae
02e6bf lda $0ab0
02e6c2 adc $e5a0
02e6c5 sta $0ab0
02e6c8 jsl $0c8000
02e6cc sep #$20			; set A => 8bit
02e6ce lda #$80
02e6d0 trb $0110
02e6d3 bra $e670
02e6d5 lda #$02
02e6d7 trb $0111
02e6da stz $2123
02e6dd stz $2124
02e6e0 stz $2125
02e6e3 stz $2130
02e6e6 plp
02e6e7 rts				; exit routine



02e6ed php				; save processor status to stack
02e6ee phd				; save direct page to stack
02e6ef pea $0a00
02e6f2 pld
02e6f3 sep #$20			; set A => 8bit
02e6f5 rep #$10			; set X,Y => 16bit
02e6f7 stz $c8
02e6f9 stz $c9
02e6fb stz $e6
02e6fd stz $e5
02e6ff stz $e4
02e701 stz $e3
02e703 stz $e7
02e705 stz $e8
02e707 lda #$43
02e709 sta $2101
02e70c lda #$ff
02e70e sta $0ab7
02e711 rep #$30			; set A,X,Y => 16bit
02e713 ldx #$0ab7
02e716 ldy #$0ab8
02e719 lda #$000d
02e71c phb				; save databank to stack
02e71d mvn $00,$00
02e720 plb
02e721 lda #$0000
02e724 sta $7e7800
02e728 ldx #$7800
02e72b ldy #$7801
02e72e lda #$1ffe
02e731 phb				; save databank to stack
02e732 mvn $7e,$7e
02e735 plb
02e736 sep #$20			; set A => 8bit
02e738 rep #$10			; set X,Y => 16bit
02e73a lda #$03
02e73c sta $e4
02e73e lda $e4
02e740 bne $e73e
02e742 pld
02e743 plp
02e744 rts				; exit routine



02e745 php				; save processor status to stack
02e746 sep #$20			; set A => 8bit
02e748 lda $e781
02e74b cmp $b4
02e74d beq $e777
02e74f cmp $b5
02e751 beq $e777
02e753 cmp $b6
02e755 beq $e777
02e757 lda $b4
02e759 cmp #$24
02e75b bne $e761
02e761 lda $b5
02e763 cmp #$24
02e765 bne $e76b
02e76b lda $b6
02e76d cmp #$24
02e76f bne $e775
02e775 plp
02e776 rts				; exit routine



02e777 sta $b4
02e779 lda #$ff
02e77b sta $b5
02e77d sta $b6
02e77f bra $e775
02e782 pha
02e783 phx
02e784 phy
02e785 phb				; save databank to stack
02e786 phk
02e787 plb
02e788 phd				; save direct page to stack
02e789 pea $0a00
02e78c pld
02e78d php				; save processor status to stack
02e78e sep #$30			; set A,X,Y => 8bit
02e790 jsr $e6ed
02e793 inc $e6
02e795 lda $e6
02e797 bne $e795
02e799 lda $048b
02e79c cmp #$02
02e79e bpl $e7ce
02e7a0 tay
02e7a1 rep #$20			; set A => 16bit
02e7a3 sep #$10			; set X,Y => 8bit
02e7a5 lda $0af4
02e7a8 sta $0af6
02e7ab sep #$30			; set A,X,Y => 8bit
02e7ad lda #$00
02e7af sta $0af4,y
02e7b2 ldx $0ade,y
02e7b5 lda $7ec400,x
02e7b9 sta $7ec420,x
02e7bd lda #$01
02e7bf sta $7ec400,x
02e7c3 lda $7ec400,x
02e7c7 cmp #$01
02e7c9 beq $e7c3
02e7cb jsr $e745
02e7ce ldy #$04
02e7d0 lda $0ab2,y
02e7d3 cmp #$ff
02e7d5 beq $e7fe
02e7d7 pha
02e7d8 jsr $e9f7
02e7db sta $0ac1,y
02e7de tax
02e7df tya
02e7e0 sta $7ec3a0,x
02e7e4 pla
02e7e5 jsr $e8cd
02e7e8 jsr $e905
02e7eb bne $e7fe
02e7ed jsr $e969
02e7f0 sta $7ec320,x
02e7f4 jsr $e992
02e7f7 jsr $eb30
02e7fa sta $7ec2c0,x
02e7fe lda #$00
02e800 sta $7ec340,x
02e804 dey
02e805 cpy #$ff
02e807 bne $e7d0
02e809 jsl $0096a0
02e80d inc $e8
02e80f jsl $0096a0
02e813 stz $e7
02e815 lda $e7
02e817 bne $e815
02e819 ldy #$04
02e81b ldx $c1,y
02e81d bmi $e827
02e81f lda $7ec340,x
02e823 cmp #$ff
02e825 bne $e82c
02e827 dey
02e828 bpl $e81b
02e82a bra $e892
02e82c ldy #$00
02e82e ldx $0ac1,y
02e831 bmi $e845
02e833 lda $7ec400,x
02e837 bmi $e84a
02e839 lda $7ec340,x
02e83d cmp #$ff
02e83f beq $e845
02e841 cmp #$05
02e843 bmi $e84a
02e845 ldx #$ff
02e847 phx
02e848 bra $e850
02e84a lda $7ec400,x
02e84e pha
02e84f phx
02e850 iny
02e851 cpy #$05
02e853 bmi $e82e
02e855 ldy #$04
02e857 plx
02e858 bmi $e85f
02e85a pla
02e85b bit #$80
02e85d beq $e868
02e85f dey
02e860 bpl $e857
02e862 jsl $0096a0
02e866 bra $e815
02e868 lsr a
02e869 lsr a
02e86a lsr a
02e86b sta $7ec300,x
02e86f stz $cc
02e871 lda $7ec420,x
02e875 sta $ca
02e877 cmp #$c8
02e879 bcc $e87d
02e87b inc $cc
02e87d lda $7ec2c0,x
02e881 sta $cb
02e883 lda $0ab2,y
02e886 jsr $e905
02e889 bne $e85f
02e88b jsr $eb55
02e88e inc $e7
02e890 bra $e85f
02e892 lda $048b
02e895 cmp #$02
02e897 bpl $e8b5
02e899 tay
02e89a ldx $0ade,y
02e89d lda #$02
02e89f sta $7ec400,x
02e8a3 lda $7ec400,x
02e8a7 cmp #$02
02e8a9 beq $e8a3
02e8ab rep #$20			; set A => 16bit
02e8ad lda $0af6
02e8b0 sta $0af4
02e8b3 sep #$20			; set A => 8bit
02e8b5 lda #$ff
02e8b7 sta $0ab2
02e8ba sta $0ab3
02e8bd sta $0ab4
02e8c0 sta $0ab5
02e8c3 sta $0ab6
02e8c6 plp
02e8c7 pld
02e8c8 plb
02e8c9 ply
02e8ca plx
02e8cb pla
02e8cc rtl				; exit routine



02e8cd php				; save processor status to stack
02e8ce rep #$30			; set A,X,Y => 16bit
02e8d0 pha
02e8d1 phx
02e8d2 phy
02e8d3 and #$00ff
02e8d6 asl a
02e8d7 asl a
02e8d8 tax
02e8d9 tya
02e8da asl a
02e8db tay
02e8dc lda $06fbc1,x
02e8e0 pha
02e8e1 lda $06fbc3,x
02e8e5 sta $0ab7,y
02e8e8 lda $05,s
02e8ea tax
02e8eb pla
02e8ec sta $7ec3c0,x
02e8f0 xba
02e8f1 sta $7ec3e0,x
02e8f5 lda #$0000
02e8f8 sta $7ec400,x
02e8fc sta $7ec420,x
02e900 ply
02e901 plx
02e902 pla
02e903 plp
02e904 rts				; exit routine



02e905 sep #$20			; set A => 8bit
02e907 sep #$10			; set X,Y => 8bit
02e909 pha
02e90a pha
02e90b phx
02e90c phy
02e90d ldx #$04
02e90f lda #$00
02e911 sta $04,s
02e913 txa
02e914 cmp $01,s
02e916 beq $e92b
02e918 lda $b2,x
02e91a cmp #$ff
02e91c beq $e922
02e91e cmp $03,s
02e920 beq $e925
02e922 dex
02e923 bra $e913
02e925 jsr $e930
02e928 inc
02e929 sta $04,s
02e92b ply
02e92c plx
02e92d pla
02e92e pla
02e92f rts				; exit routine



02e930 php				; save processor status to stack
02e931 sep #$20			; set A => 8bit
02e933 sep #$10			; set X,Y => 8bit
02e935 pha
02e936 phx
02e937 phy
02e938 txy
02e939 ldx $c1,y
02e93b lda $7ec320,x
02e93f pha
02e940 lda $7ec2c0,x
02e944 pha
02e945 lda $7ec300,x
02e949 pha
02e94a lda $04,s
02e94c tay
02e94d ldx $c1,y
02e94f pla
02e950 sta $7ec300,x
02e954 pla
02e955 sta $7ec2c0,x
02e959 pla
02e95a sta $7ec320,x
02e95e lda #$00
02e960 sta $7ec2e0,x
02e964 ply
02e965 plx
02e966 pla
02e967 plp
02e968 rts				; exit routine



02e969 phx
02e96a phy
02e96b php				; save processor status to stack
02e96c sep #$20			; set A => 8bit
02e96e sep #$10			; set X,Y => 8bit
02e970 ldx #$00
02e972 ldy #$08
02e974 lda #$01
02e976 tsb $c9
02e978 beq $e983
02e983 lda $e98a,x
02e986 plp
02e987 ply
02e988 plx
02e989 rts				; exit routine



02e992 php				; save processor status to stack
02e993 sep #$20			; set A => 8bit
02e995 sep #$10			; set X,Y => 8bit
02e997 pha
02e998 phx
02e999 phy
02e99a php				; save processor status to stack
02e99b rep #$20			; set A => 16bit
02e99d rep #$10			; set X,Y => 16bit
02e99f and #$00ff
02e9a2 asl a
02e9a3 asl a
02e9a4 asl a
02e9a5 asl a
02e9a6 asl a
02e9a7 adc #$0100
02e9aa adc #$c040
02e9ad tay
02e9ae lda $02,s
02e9b0 and #$00ff
02e9b3 asl a
02e9b4 tax
02e9b5 lda $0ab7,x
02e9b8 and #$00ff
02e9bb phx
02e9bc asl a
02e9bd asl a
02e9be asl a
02e9bf asl a
02e9c0 clc
02e9c1 adc #$82c0
02e9c4 tax
02e9c5 lda #$000f
02e9c8 phb				; save databank to stack
02e9c9 mvn $09,$7e
02e9cc plb
02e9cd plx
02e9ce sep #$20			; set A => 8bit
02e9d0 lda $0ab8,x
02e9d3 cmp #$ff
02e9d5 beq $e9ed
02e9d7 rep #$20			; set A => 16bit
02e9d9 and #$00ff
02e9dc asl a
02e9dd asl a
02e9de asl a
02e9df asl a
02e9e0 clc
02e9e1 adc #$82c0
02e9e4 tax
02e9e5 lda #$000f
02e9e8 phb				; save databank to stack
02e9e9 mvn $09,$7e
02e9ec plb
02e9ed sep #$20			; set A => 8bit
02e9ef inc $e5
02e9f1 plp
02e9f2 ply
02e9f3 plx
02e9f4 pla
02e9f5 plp
02e9f6 rts				; exit routine



02e9f7 phx
02e9f8 phy
02e9f9 php				; save processor status to stack
02e9fa jsr $ea60
02e9fd lda #$00
02e9ff sta $7ec300,x
02ea03 sta $7ec2e0,x
02ea07 sta $7ec380,x
02ea0b lda #$ff
02ea0d sta $7ec2c0,x
02ea11 phx
02ea12 lda $03,s
02ea14 asl a
02ea15 asl a
02ea16 tay
02ea17 lda $0a27,y
02ea1a lsr a
02ea1b sec
02ea1c sbc #$04
02ea1e clc
02ea1f adc $0a25,y
02ea22 asl a
02ea23 asl a
02ea24 asl a
02ea25 sta $7ec280,x
02ea29 lda $0a28,y
02ea2c sec
02ea2d sbc #$08
02ea2f clc
02ea30 adc $0a26,y
02ea33 pha
02ea34 lda $04,s
02ea36 cmp #$02
02ea38 bpl $ea41
02ea3a pla
02ea3b inc
02ea3c inc
02ea3d inc
02ea3e inc
02ea3f bra $ea42
02ea41 pla
02ea42 asl a
02ea43 asl a
02ea44 asl a
02ea45 sta $7ec2a0,x
02ea49 ldy #$01
02ea4b jsr $ea7f
02ea4e jsr $eb14
02ea51 sta $7ec260,x
02ea55 lda #$c0
02ea57 sta $7ec240,x
02ea5b pla
02ea5c plp
02ea5d ply
02ea5e plx
02ea5f rts				; exit routine



02ea60 pha
02ea61 phy
02ea62 ldy #$20
02ea64 ldx #$00
02ea66 lda $7ec240,x
02ea6a bpl $ea72
02ea6c inx
02ea6d dey
02ea6e bne $ea66
02ea72 lda #$00
02ea74 sta $7ec2e0,x
02ea78 sta $7ec360,x
02ea7c ply
02ea7d pla
02ea7e rts				; exit routine



02ea7f jsr $ea9f
02ea82 cmp #$80
02ea84 bpl $ea9c
02ea86 pha
02ea87 jsr $eaca
02ea8a pha
02ea8b phd				; save direct page to stack
02ea8c pea $0b00
02ea8f pld
02ea90 jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
02ea94 pld
02ea95 pla
02ea96 inc
02ea97 dey
02ea98 bne $ea87
02ea9a pla
02ea9b rts				; exit routine



02ea9f phy
02eaa0 lda #$00
02eaa2 pha
02eaa3 phd				; save direct page to stack
02eaa4 pea $0b00
02eaa7 pld
02eaa8 jsl $00975a		; call routine "Text - AND value at direct page with mask from $0097fb[] ($00:975a)"
02eaac pld
02eaad inc
02eaae dec
02eaaf bne $eabf
02eab1 pla
02eab2 inc
02eab3 cmp #$80
02eab5 bpl $eac6
02eab7 dey
02eab8 bne $eaa2
02eaba sec
02eabb sbc $01,s
02eabd ply
02eabe rts				; exit routine



02eabf lda $02,s
02eac1 tay
02eac2 pla
02eac3 inc
02eac4 bra $eaa2
02eaca pha
02eacb phx
02eacc phy
02eacd php				; save processor status to stack
02eace rep #$30			; set A,X,Y => 16bit
02ead0 pha
02ead1 and #$00ff
02ead4 asl a
02ead5 asl a
02ead6 tax
02ead7 sep #$20			; set A => 8bit
02ead9 rep #$10			; set X,Y => 16bit
02eadb lda #$01
02eadd sta $0c03,x
02eae0 lda #$fe
02eae2 sta $0c02,x
02eae5 lda #$ff
02eae7 sta $0c00,x
02eaea lda #$c0
02eaec sta $0c01,x
02eaef rep #$30			; set A,X,Y => 16bit
02eaf1 lda $01,s
02eaf3 and #$00ff
02eaf6 lsr a
02eaf7 lsr a
02eaf8 tax
02eaf9 pla
02eafa and #$0003
02eafd tay
02eafe sep #$20			; set A => 8bit
02eb00 rep #$10			; set X,Y => 16bit
02eb02 lda $eb10,y
02eb05 eor $0e00,x
02eb08 sta $0e00,x
02eb0b plp
02eb0c ply
02eb0d plx
02eb0e pla
02eb0f rts				; exit routine



02eb14 pha
02eb15 phx
02eb16 phy
02eb17 lsr a
02eb18 lsr a
02eb19 tax
02eb1a lda $03,s
02eb1c and #$03
02eb1e tay
02eb1f lda $eb2c,y
02eb22 eor $0e00,x
02eb25 sta $0e00,x
02eb28 ply
02eb29 plx
02eb2a pla
02eb2b rts				; exit routine



02eb30 php				; save processor status to stack
02eb31 sep #$20			; set A => 8bit
02eb33 sep #$10			; set X,Y => 8bit
02eb35 phx
02eb36 phy
02eb37 ldy #$04
02eb39 ldx #$00
02eb3b lda #$01
02eb3d tsb $c8
02eb3f beq $eb4a
02eb41 asl a
02eb42 inx
02eb43 dey
02eb44 bne $eb3d
02eb4a lda $eb51,x
02eb4d ply
02eb4e plx
02eb4f plp
02eb50 rts				; exit routine



02eb55 pha
02eb56 phb				; save databank to stack
02eb57 phx
02eb58 phy
02eb59 php				; save processor status to stack
02eb5a sep #$20			; set A => 8bit
02eb5c rep #$10			; set X,Y => 16bit
02eb5e lda #$0b
02eb60 pha
02eb61 plb
02eb62 jsr $ec45
02eb65 lda #$06
02eb67 sta $8a
02eb69 lda #$7e
02eb6b sta $8d
02eb6d lda #$38
02eb6f sta $ce
02eb71 lda $cb
02eb73 and #$08
02eb75 sta $cd
02eb77 lda $ca
02eb79 jsr $ebd2
02eb7c sty $cf
02eb7e ldy #$0001
02eb81 lda #$02
02eb83 sta $90
02eb85 lda #$00
02eb87 xba
02eb88 lda $0000,x
02eb8b bit #$80
02eb8d beq $eba0
02eb8f and #$3f
02eb91 tay
02eb92 lda $0000,x
02eb95 inx
02eb96 bit #$40
02eb98 beq $eba0
02eb9a lda #$02
02eb9c trb $90
02eb9e bra $ebad
02eba0 lda $0000,x
02eba3 and #$60
02eba5 lsr a
02eba6 lsr a
02eba7 tsb $90
02eba9 lda $0000,x
02ebac inx
02ebad and #$1f
02ebaf sta $d0
02ebb1 jsr $ebeb
02ebb4 lda $cb
02ebb6 and #$08
02ebb8 cmp $cd
02ebba beq $ebc3
02ebbc lda $cb
02ebbe clc
02ebbf adc #$08
02ebc1 sta $cb
02ebc3 dec $ce
02ebc5 beq $ebcc
02ebc7 dey
02ebc8 bne $ebb1
02ebca bra $eb7e
02ebcc plp
02ebcd ply
02ebce plx
02ebcf plb
02ebd0 pla
02ebd1 rts				; exit routine



02ebd2 pha
02ebd3 php				; save processor status to stack
02ebd4 rep #$30			; set A,X,Y => 16bit
02ebd6 and #$00ff
02ebd9 asl a
02ebda asl a
02ebdb tax
02ebdc lda $0bf091,x
02ebe0 tay
02ebe1 lda $0bf08f,x
02ebe5 inc
02ebe6 inc
02ebe7 tax
02ebe8 plp
02ebe9 pla
02ebea rts				; exit routine



02ebeb pha
02ebec php				; save processor status to stack
02ebed sep #$20			; set A => 8bit
02ebef lda $90
02ebf1 bit #$02
02ebf3 beq $ec40
02ebf5 lda #$04
02ebf7 tsb $90
02ebf9 lda $cf
02ebfb clc
02ebfc adc $d0
02ebfe sta $4202
02ec01 lda #$30
02ec03 jsl $00971e
02ec07 lda $cc
02ec09 beq $ec12
02ec12 rep #$20			; set A => 16bit
02ec14 lda #$bfc1
02ec17 clc
02ec18 adc $4216
02ec1b sta $8b
02ec1d lda $cb
02ec1f and #$00ff
02ec22 asl a
02ec23 asl a
02ec24 asl a
02ec25 asl a
02ec26 asl a
02ec27 adc #$7800
02ec2a sta $8e
02ec2c jsl $02e1c3
02ec30 clc
02ec31 adc #$0200
02ec34 sta $8e
02ec36 sep #$20			; set A => 8bit
02ec38 lda #$04
02ec3a tsb $90
02ec3c jsl $02e1c3
02ec40 inc $cb
02ec42 plp
02ec43 pla
02ec44 rts				; exit routine



02ec45 php				; save processor status to stack
02ec46 phd				; save direct page to stack
02ec47 sep #$20			; set A => 8bit
02ec49 rep #$10			; set X,Y => 16bit
02ec4b pea $2100
02ec4e pld
02ec4f stz $83
02ec51 lda $0acb
02ec54 sta $4202
02ec57 lda #$20
02ec59 jsl $00971e
02ec5d rep #$30			; set A,X,Y => 16bit
02ec5f clc
02ec60 lda #$7800
02ec63 adc $4216
02ec66 ldx #$0008
02ec69 sta $81
02ec6b sep #$20			; set A => 8bit
02ec6d ldy #$0004
02ec70 stz $80
02ec72 stz $80
02ec74 stz $80
02ec76 stz $80
02ec78 stz $80
02ec7a stz $80
02ec7c stz $80
02ec7e stz $80
02ec80 stz $80
02ec82 stz $80
02ec84 stz $80
02ec86 stz $80
02ec88 stz $80
02ec8a stz $80
02ec8c stz $80
02ec8e stz $80
02ec90 stz $80
02ec92 stz $80
02ec94 stz $80
02ec96 stz $80
02ec98 stz $80
02ec9a stz $80
02ec9c stz $80
02ec9e stz $80
02eca0 stz $80
02eca2 stz $80
02eca4 stz $80
02eca6 stz $80
02eca8 stz $80
02ecaa stz $80
02ecac stz $80
02ecae stz $80
02ecb0 stz $80
02ecb2 stz $80
02ecb4 stz $80
02ecb6 stz $80
02ecb8 stz $80
02ecba stz $80
02ecbc stz $80
02ecbe stz $80
02ecc0 stz $80
02ecc2 stz $80
02ecc4 stz $80
02ecc6 stz $80
02ecc8 stz $80
02ecca stz $80
02eccc stz $80
02ecce stz $80
02ecd0 stz $80
02ecd2 stz $80
02ecd4 stz $80
02ecd6 stz $80
02ecd8 stz $80
02ecda stz $80
02ecdc stz $80
02ecde stz $80
02ece0 stz $80
02ece2 stz $80
02ece4 stz $80
02ece6 stz $80
02ece8 stz $80
02ecea stz $80
02ecec stz $80
02ecee stz $80
02ecf0 dey
02ecf1 beq $ecf6
02ecf3 brl $ec70
02ecf6 rep #$20			; set A => 16bit
02ecf8 clc
02ecf9 adc #$0200
02ecfc dex
02ecfd beq $ed02
02ecff brl $ec69
02ed02 pld
02ed03 plp
02ed04 rts				; exit routine



02ed05 pha
02ed06 phb				; save databank to stack
02ed07 phd				; save direct page to stack
02ed08 phx
02ed09 phy
02ed0a php				; save processor status to stack
02ed0b rep #$20			; set A => 16bit
02ed0d sep #$10			; set X,Y => 8bit
02ed0f phk
02ed10 plb
02ed11 pea $0a00
02ed14 pld
02ed15 lda $04d1
02ed18 ora $04d3
02ed1b ora $04d5
02ed1e ora $04d7
02ed21 ora $04d9
02ed24 bne $ed28
02ed26 bra $ed80
02ed28 jsr $ee91
02ed2b jsl $0096a0
02ed2f rep #$20			; set A => 16bit
02ed31 sep #$10			; set X,Y => 8bit
02ed33 ldx #$00
02ed35 ldy #$07
02ed37 sty $0add
02ed3a lda $04d1,x
02ed3d beq $ed6b
02ed3f bmi $ed87
02ed41 cmp #$7ffe
02ed44 beq $ed90
02ed46 jsr $ee1f
02ed49 sep #$30			; set A,X,Y => 8bit
02ed4b jsr $edfc
02ed4e phx
02ed4f jsr $ea60
02ed52 lda #$82
02ed54 sta $7ec240,x
02ed58 lda #$3c
02ed5a sta $7ec340,x
02ed5e ldy #$05
02ed60 jsr $ea7f
02ed63 sta $7ec260,x
02ed67 jsr $ed98
02ed6a plx
02ed6b rep #$20			; set A => 16bit
02ed6d sep #$10			; set X,Y => 8bit
02ed6f inx
02ed70 inx
02ed71 cpx #$0a
02ed73 bne $ed35
02ed75 sep #$30			; set A,X,Y => 8bit
02ed77 lda #$3c
02ed79 jsl $0096a0
02ed7d dec
02ed7e bne $ed79
02ed80 plp
02ed81 ply
02ed82 plx
02ed83 pld
02ed84 plb
02ed85 pla
02ed86 rtl				; exit routine



02ed87 eor #$ffff
02ed8a inc
02ed8b dec $0add
02ed8e bra $ed46
02ed90 lda #$0000
02ed93 dec $0add
02ed96 bra $ed46
02ed98 phx
02ed99 phy
02ed9a php				; save processor status to stack
02ed9b rep #$30			; set A,X,Y => 16bit
02ed9d and #$00ff
02eda0 asl a
02eda1 asl a
02eda2 tax
02eda3 sep #$20			; set A => 8bit
02eda5 rep #$10			; set X,Y => 16bit
02eda7 lda $0ad7
02edaa asl a
02edab asl a
02edac adc $db
02edae sta $db
02edb0 ldy #$0004
02edb3 lda $0ad1,y
02edb6 bne $edcc
02edb8 cpy #$0004
02edbb beq $edcc
02edbd pha
02edbe phy
02edbf lda #$05
02edc1 sec
02edc2 sbc $01,s
02edc4 sec
02edc5 cmp $0ad7
02edc8 bpl $edf8
02edca ply
02edcb pla
02edcc clc
02edcd adc #$90
02edcf sta $0c02,x
02edd2 clc
02edd3 lda #$18
02edd5 adc $0add
02edd8 asl a
02edd9 sta $0c03,x
02eddc tya
02eddd asl a
02edde asl a
02eddf asl a
02ede0 adc $db
02ede2 sta $0c00,x
02ede5 lda $dc
02ede7 sta $0c01,x
02edea inx
02edeb inx
02edec inx
02eded inx
02edee dey
02edef cpy #$00ff
02edf2 bne $edb3
02edf4 plp
02edf5 plx
02edf6 ply
02edf7 rts				; exit routine



02edf8 ply
02edf9 pla
02edfa bra $edf4
02edfc phy
02edfd txa
02edfe asl a
02edff tay
02ee00 lda $0a27,y
02ee03 lsr a
02ee04 clc
02ee05 adc $0a25,y
02ee08 asl a
02ee09 asl a
02ee0a asl a
02ee0b sec
02ee0c sbc #$28
02ee0e sta $db
02ee10 lda $0a28,y
02ee13 lsr a
02ee14 clc
02ee15 adc $0a26,y
02ee18 asl a
02ee19 asl a
02ee1a asl a
02ee1b sta $dc
02ee1d ply
02ee1e rts				; exit routine



02ee1f phx
02ee20 phy
02ee21 stz $0ad1
02ee24 stz $0ad3
02ee27 stz $0ad5
02ee2a stz $0ad7
02ee2d ldx #$ff
02ee2f stx $0ad6
02ee32 cmp #$7fff
02ee35 bne $ee53
02ee37 ldx #$05
02ee39 stx $0ad7
02ee3c ldx #$0a
02ee3e stx $0ad1
02ee41 inx
02ee42 stx $0ad2
02ee45 inx
02ee46 stx $0ad3
02ee49 inx
02ee4a stx $0ad4
02ee4d inx
02ee4e stx $0ad5
02ee51 bra $ee84
02ee53 cmp #$0000
02ee56 bne $ee5d
02ee58 inc $0ad7
02ee5b bra $ee84
02ee5d ldx #$00
02ee5f txy
02ee60 phx
02ee61 ldx $0ad7
02ee64 bne $ee6b
02ee66 cmp $ee87,y
02ee69 bmi $ee6e
02ee6b inc $0ad7
02ee6e plx
02ee6f cmp $ee87,y
02ee72 bmi $ee7d
02ee74 inc $0ad1,x
02ee77 sec
02ee78 sbc $ee87,y
02ee7b bra $ee6f
02ee7d iny
02ee7e iny
02ee7f inx
02ee80 cpx #$05
02ee82 bne $ee60
02ee84 ply
02ee85 plx
02ee86 rts				; exit routine



02ee91 phb				; save databank to stack
02ee92 phx
02ee93 phy
02ee94 pha
02ee95 php				; save processor status to stack
02ee96 sep #$20			; set A => 8bit
02ee98 rep #$10			; set X,Y => 16bit
02ee9a inc $e6
02ee9c lda $e6
02ee9e bne $ee9c
02eea0 rep #$30			; set A,X,Y => 16bit
02eea2 ldx #$eec7
02eea5 ldy #$c200
02eea8 lda #$000f
02eeab mvn $02,$7e
02eeae ldy #$c220
02eeb1 lda #$000f
02eeb4 mvn $02,$7e
02eeb7 sep #$20			; set A => 8bit
02eeb9 rep #$10			; set X,Y => 16bit
02eebb inc $e5
02eebd lda $e5
02eebf bne $eebd
02eec1 plp
02eec2 pla
02eec3 ply
02eec4 plx
02eec5 plb
02eec6 rts				; exit routine
02eee7 phk
02eee8 plb
02eee9 pea $0a00
02eeec pld
02eeed sep #$30
02eeef lda $0ae2
02eef2 beq $ef0d



02eef4 jsr $f0c0
02eef7 ldx #$00
02eef9 ldy #$04
02eefb lda $e3,x
02eefd bne $ef05
02eeff inx
02ef00 dey
02ef01 bne $eefb
02ef03 bra $ef0d
02ef05 txa
02ef06 pea $ef0e
02ef09 jsl $0097be
02ef0d rtl
02ef16 phx
02ef17 phy
02ef18 php				; save processor status to stack
02ef19 sep #$20			; set A => 8bit
02ef1b rep #$10			; set X,Y => 16bit
02ef1d ldx #$ef5e
02ef20 ldy #$4300
02ef23 lda #$00
02ef25 xba
02ef26 lda #$04
02ef28 mvn $02,$02
02ef2b ldx #$fffe
02ef2e lda #$00
02ef30 sec
02ef31 inx
02ef32 inx
02ef33 rol a
02ef34 trb $e3
02ef36 beq $ef31
02ef38 rep #$30			; set A,X,Y => 16bit
02ef3a lda $ef63,x
02ef3d sta $2116
02ef40 lda $ef71,x
02ef43 sta $4302
02ef46 lda $ef7f,x
02ef49 sta $4305
02ef4c sep #$20			; set A => 8bit
02ef4e rep #$10			; set X,Y => 16bit
02ef50 lda #$80
02ef52 sta $2115
02ef55 lda #$01
02ef57 sta $420b
02ef5a plp
02ef5b ply
02ef5c plx
02ef5d rts				; exit routine



02ef8d phx
02ef8e phy
02ef8f php				; save processor status to stack
02ef90 sep #$20			; set A => 8bit
02ef92 rep #$10			; set X,Y => 16bit
02ef94 ldx #$efdf
02ef97 ldy #$4300
02ef9a lda #$00
02ef9c xba
02ef9d lda #$04
02ef9f mvn $02,$02
02efa2 ldx #$fffe
02efa5 lda #$00
02efa7 sec
02efa8 inx
02efa9 inx
02efaa rol a
02efab trb $e4
02efad beq $efa8
02efaf rep #$30			; set A,X,Y => 16bit
02efb1 lda $efe4,x
02efb4 sta $2116
02efb7 lda $eff2,x
02efba sta $4302
02efbd lda $f000,x
02efc0 sta $4305
02efc3 sep #$20			; set A => 8bit
02efc5 lda #$80
02efc7 sta $2115
02efca lda #$01
02efcc sta $420b
02efcf rep #$20			; set A => 16bit
02efd1 txa
02efd2 cmp #$0002
02efd5 bne $efdb
02efd7 sep #$20			; set A => 8bit
02efd9 stz $e7
02efdb plp
02efdc ply
02efdd plx
02efde rts				; exit routine



02f03c phx
02f03d phy
02f03e php				; save processor status to stack
02f03f sep #$20			; set A => 8bit
02f041 rep #$10			; set X,Y => 16bit
02f043 ldy #$0000
02f046 lda #$00
02f048 xba
02f049 lda $f077,y
02f04c iny
02f04d cmp #$ff
02f04f beq $f071
02f051 asl a
02f052 asl a
02f053 asl a
02f054 sta $2121
02f057 rep #$30			; set A,X,Y => 16bit
02f059 asl a
02f05a tax
02f05b phy
02f05c ldy #$0010
02f05f sep #$20			; set A => 8bit
02f061 rep #$10			; set X,Y => 16bit
02f063 lda $7ec040,x
02f067 inx
02f068 sta $2122
02f06b dey
02f06c bne $f063
02f06e ply
02f06f bra $f046
02f071 stz $e5
02f073 plp
02f074 ply
02f075 plx
02f076 rts				; exit routine



02f08c phx
02f08d phy
02f08e php				; save processor status to stack
02f08f sep #$20			; set A => 8bit
02f091 rep #$10			; set X,Y => 16bit
02f093 stz $e6
02f095 bra $f0b5
02f0b5 plp
02f0b6 ply
02f0b7 plx
02f0b8 rts				; exit routine



02f0c0 phx
02f0c1 phy
02f0c2 php				; save processor status to stack
02f0c3 rep #$30			; set A,X,Y => 16bit
02f0c5 stz $2102
02f0c8 ldx #$f0ee
02f0cb ldy #$4300
02f0ce lda #$0006
02f0d1 mvn $02,$02
02f0d4 phk
02f0d5 plb
02f0d6 sep #$20			; set A => 8bit
02f0d8 rep #$10			; set X,Y => 16bit
02f0da lda #$01
02f0dc sta $420b
02f0df lda #$80
02f0e1 sta $2103
02f0e4 lda $e9
02f0e6 asl a
02f0e7 sta $2102
02f0ea plp
02f0eb plx
02f0ec ply
02f0ed rts				; exit routine
02f0f5 phk
02f0f6 plb
02f0f7 php
02f0f8 sep #$30
02f0fa pea $0a00
02f0fd pld
02f0fe lda $0ae2
02f101 beq $f11b



02f103 lda $f1
02f105 sta $210f
02f108 stz $210f
02f10b lda $f3
02f10d sta $2110
02f110 stz $2110
02f113 ldx $f0
02f115 lda $f11d,x
02f118 sta $2101
02f11b plp
02f11c rtl
02f120 phk
02f121 plb
02f122 sep #$30
02f124 pea $0a00
02f127 pld
02f128 lda $0ae2
02f12b beq $f196
02f12d inc $ed
02f12f lda $9c
02f131 bne $f155
02f155 sep #$30			; set A,X,Y => 8bit
02f157 jsr $f5c3
02f15a jsl $0b8e91
02f15e ldx #$00
02f160 ldy #$20
02f162 lda $7ec240,x
02f166 bit #$80
02f168 bne $f197
02f16a inx
02f16b dey
02f16c bne $f162
02f16e lda $ec
02f170 clc
02f171 adc #$40
02f173 sta $ec
02f175 bne $f196
02f177 lda $04af
02f17a and #$20
02f17c beq $f196
02f17e lda $eb
02f180 cmp #$04
02f182 bpl $f189
02f184 inc $0b37
02f187 bra $f18c
02f189 dec $0b37
02f18c inc $eb
02f18e lda $eb
02f190 cmp #$08
02f192 bmi $f196
02f194 stz $eb
02f196 rtl
02f197 and #$07
02f199 phx
02f19a phy
02f19b pea $f1a6
02f19e jsl $0097be
02f1a2 ply
02f1a3 plx
02f1a4 bra $f16a
02f1b7 phx
02f1b8 phy
02f1b9 php				; save processor status to stack
02f1ba sep #$30			; set A,X,Y => 8bit
02f1bc jsr $f483
02f1bf lda $7ec380,x
02f1c3 phx
02f1c4 php				; save processor status to stack
02f1c5 pea $f62c
02f1c8 jsl $0097be
02f1cc plp
02f1cd plx
02f1ce lda $e8
02f1d0 beq $f1e1
02f1d2 lda $7ec340,x
02f1d6 beq $f1e5
02f1d8 bmi $f1e1
02f1da dec
02f1db beq $f1e5
02f1dd sta $7ec340,x
02f1e1 plp
02f1e2 ply
02f1e3 plx
02f1e4 rts				; exit routine



02f1e5 lda $7ec400,x
02f1e9 bit #$80
02f1eb bne $f1f9
02f1ed and #$07
02f1ef asl a
02f1f0 asl a
02f1f1 sta $7ec340,x
02f1f5 lda #$03
02f1f7 tsb $e4
02f1f9 jsr $f1fe
02f1fc bra $f1e1
02f1fe phx
02f1ff phy
02f200 php				; save processor status to stack
02f201 sep #$20			; set A => 8bit
02f203 rep #$10			; set X,Y => 16bit
02f205 lda $7ec3e0,x
02f209 xba
02f20a lda $7ec3c0,x
02f20e phx
02f20f rep #$30			; set A,X,Y => 16bit
02f211 tax
02f212 sep #$20			; set A => 8bit
02f214 rep #$10			; set X,Y => 16bit
02f216 lda $0beb4c,x
02f21a inx
02f21b xba
02f21c lda $0beb4c,x
02f220 inx
02f221 txy
02f222 plx
02f223 sta $7ec420,x
02f227 xba
02f228 sta $7ec400,x
02f22c bpl $f24e
02f22e cmp #$ff
02f230 bne $f240
02f232 lda #$00
02f234 sta $7ec360,x
02f238 lda #$0a
02f23a sta $7ec380,x
02f23e bra $f258
02f240 and #$7f
02f242 sta $7ec380,x
02f246 lda #$00
02f248 sta $7ec360,x
02f24c bra $f258
02f24e lda #$00
02f250 sta $7ec380,x
02f254 sta $7ec360,x
02f258 rep #$30			; set A,X,Y => 16bit
02f25a tya
02f25b sep #$20			; set A => 8bit
02f25d rep #$10			; set X,Y => 16bit
02f25f sta $7ec3c0,x
02f263 xba
02f264 sta $7ec3e0,x
02f268 lda $7ec400,x
02f26c plp
02f26d ply
02f26e plx
02f26f rts				; exit routine



02f270 pha
02f271 phx
02f272 phy
02f273 php				; save processor status to stack
02f274 sep #$20			; set A => 8bit
02f276 rep #$10			; set X,Y => 16bit
02f278 lda $7ec340,x
02f27c dec
02f27d sta $7ec340,x
02f281 beq $f2b8
02f283 rep #$30			; set A,X,Y => 16bit
02f285 and #$00ff
02f288 sec
02f289 sbc #$0018
02f28c bmi $f2b3
02f28e tay
02f28f lda $7ec260,x
02f293 and #$00ff
02f296 asl a
02f297 asl a
02f298 tax
02f299 sep #$20			; set A => 8bit
02f29b rep #$10			; set X,Y => 16bit
02f29d lda $0c01,x
02f2a0 clc
02f2a1 adc $f2f7,y
02f2a4 sta $0c01,x
02f2a7 sta $0c05,x
02f2aa sta $0c09,x
02f2ad sta $0c0d,x
02f2b0 sta $0c11,x
02f2b3 plp
02f2b4 ply
02f2b5 plx
02f2b6 pla
02f2b7 rts				; exit routine



02f2b8 lda #$00
02f2ba sta $7ec240,x
02f2be xba
02f2bf lda $7ec260,x
02f2c3 ldy #$0005
02f2c6 jsr $eaca
02f2c9 pha
02f2ca rep #$30			; set A,X,Y => 16bit
02f2cc and #$00ff
02f2cf asl a
02f2d0 asl a
02f2d1 tax
02f2d2 sep #$20			; set A => 8bit
02f2d4 rep #$10			; set X,Y => 16bit
02f2d6 lda #$fe
02f2d8 sta $0c00,x
02f2db sta $0c01,x
02f2de sta $0c02,x
02f2e1 sta $0c03,x
02f2e4 lda $01,s
02f2e6 phd				; save direct page to stack
02f2e7 pea $0b00
02f2ea pld
02f2eb jsl $009754		; call routine "Text - TRB value at direct page with mask from $0097fb[] ($00:9754)"
02f2ef pld
02f2f0 pla
02f2f1 inc
02f2f2 dey
02f2f3 bne $f2c6
02f2f5 bra $f2b3
02f31b phx
02f31c phy
02f31d php				; save processor status to stack
02f31e lda $7ec340,x
02f322 inc
02f323 sta $7ec340,x
02f327 tay
02f328 lda $7ec400,x
02f32c cmp #$05
02f32e bpl $f33b
02f330 pea $f33d
02f333 jsl $0097be
02f337 plp
02f338 ply
02f339 plx
02f33a rts				; exit routine



02f347 lda $7ec440,x
02f34b inc
02f34c sta $7ec440,x
02f350 and #$0f
02f352 bne $f379
02f354 lda $7ec260,x
02f358 asl a
02f359 asl a
02f35a tay
02f35b lda $0c0a,y
02f35e pha
02f35f lda $0c0e,y
02f362 sta $0c0a,y
02f365 pla
02f366 sta $0c0e,y
02f369 lda $0c0b,y
02f36c eor #$40
02f36e sta $0c0b,y
02f371 lda $0c0f,y
02f374 eor #$40
02f376 sta $0c0f,y
02f379 rts				; exit routine



02f37a lda $7ec260,x
02f37e phx
02f37f asl a
02f380 asl a
02f381 tax
02f382 phd				; save direct page to stack
02f383 pea $0c00
02f386 pld
02f387 lda $0a,x
02f389 pha
02f38a lda $0e,x
02f38c sta $0a,x
02f38e pla
02f38f sta $0e,x
02f391 lda $0b,x
02f393 eor #$40
02f395 sta $0b,x
02f397 lda $0f,x
02f399 eor #$40
02f39b sta $0f,x
02f39d lda $01,x
02f39f dec
02f3a0 cmp #$77
02f3a2 bmi $f3b7
02f3a4 dec $01,x
02f3a6 dec $01,x
02f3a8 dec $05,x
02f3aa dec $05,x
02f3ac dec $09,x
02f3ae dec $09,x
02f3b0 dec $0d,x
02f3b2 dec $0d,x
02f3b4 pld
02f3b5 plx
02f3b6 rts				; exit routine



02f3b7 pld
02f3b8 plx
02f3b9 lda $7ec420,x
02f3bd sta $7ec400,x
02f3c1 txa
02f3c2 asl a
02f3c3 asl a
02f3c4 tax
02f3c5 lda #$0f
02f3c7 sta $0a26,x
02f3ca bra $f3b6
02f3cc lda $7ec260,x
02f3d0 phx
02f3d1 asl a
02f3d2 asl a
02f3d3 tax
02f3d4 phd				; save direct page to stack
02f3d5 pea $0c00
02f3d8 pld
02f3d9 lda $0a,x
02f3db pha
02f3dc lda $0e,x
02f3de sta $0a,x
02f3e0 pla
02f3e1 sta $0e,x
02f3e3 lda $0b,x
02f3e5 eor #$40
02f3e7 sta $0b,x
02f3e9 lda $0f,x
02f3eb eor #$40
02f3ed sta $0f,x
02f3ef lda $01,x
02f3f1 inc
02f3f2 cmp #$7f
02f3f4 bpl $f409
02f3f6 inc $01,x
02f3f8 inc $01,x
02f3fa inc $05,x
02f3fc inc $05,x
02f3fe inc $09,x
02f400 inc $09,x
02f402 inc $0d,x
02f404 inc $0d,x
02f406 pld
02f407 plx
02f408 rts				; exit routine



02f409 pld
02f40a plx
02f40b lda $7ec420,x
02f40f sta $7ec400,x
02f413 txa
02f414 asl a
02f415 asl a
02f416 tax
02f417 lda #$10
02f419 sta $0a26,x
02f41c bra $f408
02f41e lda $7ec340,x
02f422 tay
02f423 lda $7ec260,x
02f427 phx
02f428 asl a
02f429 asl a
02f42a tax
02f42b lda $f46b,y
02f42e cmp #$80
02f430 beq $f45a
02f432 pha
02f433 lda $0c01,x
02f436 clc
02f437 adc $01,s
02f439 sta $0c01,x
02f43c lda $0c05,x
02f43f clc
02f440 adc $01,s
02f442 sta $0c05,x
02f445 lda $0c09,x
02f448 clc
02f449 adc $01,s
02f44b sta $0c09,x
02f44e lda $0c0d,x
02f451 clc
02f452 adc $01,s
02f454 sta $0c0d,x
02f457 pla
02f458 plx
02f459 rts				; exit routine



02f45a plx
02f45b lda #$00
02f45d sta $7ec340,x
02f461 lda $7ec420,x
02f465 sta $7ec400,x
02f469 bra $f459
02f481 rts				; exit routine



02f483 pha
02f484 php				; save processor status to stack
02f485 sep #$30			; set A,X,Y => 8bit
02f487 lda $7ec240,x
02f48b bit #$40
02f48d beq $f494
02f48f jsr $f4ab
02f492 bra $f49c
02f494 jsr $f541
02f497 jsr $f5a3
02f49a bra $f4a8
02f49c bit #$20
02f49e beq $f4a5
02f4a5 jsr $f583
02f4a8 plp
02f4a9 pla
02f4aa rts				; exit routine



02f4ab pha
02f4ac phy
02f4ad php				; save processor status to stack
02f4ae lda $7ec260,x
02f4b2 pha
02f4b3 phx
02f4b4 lsr a
02f4b5 lsr a
02f4b6 tax
02f4b7 lda $02,s
02f4b9 and #$03
02f4bb tay
02f4bc lda $f53d,y
02f4bf and $0e00,x
02f4c2 sta $0e00,x
02f4c5 plx
02f4c6 pla
02f4c7 rep #$30			; set A,X,Y => 16bit
02f4c9 and #$00ff
02f4cc asl a
02f4cd asl a
02f4ce tay
02f4cf sep #$20			; set A => 8bit
02f4d1 rep #$10			; set X,Y => 16bit
02f4d3 lda $7ec280,x
02f4d7 sta $0c00,y
02f4da lda $7ec2a0,x
02f4de sta $0c01,y
02f4e1 lda $7ec300,x
02f4e5 asl a
02f4e6 asl a
02f4e7 asl a
02f4e8 ora $7ec320,x
02f4ec sec
02f4ed rol a
02f4ee sta $0c03,y
02f4f1 lda $7ec240,x
02f4f5 bit #$20
02f4f7 bne $f510
02f4f9 lda $0af0
02f4fc beq $f504
02f4fe cmp #$01
02f500 beq $f52c
02f504 clc
02f505 adc $7ec2c0,x
02f509 sta $0c02,y
02f50c plp
02f50d ply
02f50e pla
02f50f rts				; exit routine



02f52c lda $7ec2e0,x
02f530 asl a
02f531 asl a
02f532 asl a
02f533 ora $7ec2e0,x
02f537 and #$11
02f539 asl a
02f53a asl a
02f53b bra $f504
02f541 pha
02f542 phy
02f543 php				; save processor status to stack
02f544 lda $7ec260,x
02f548 pha
02f549 phx
02f54a lsr a
02f54b lsr a
02f54c tax
02f54d lda $02,s
02f54f and #$03
02f551 tay
02f552 lda $f57f,y
02f555 ora $0e00,x
02f558 sta $0e00,x
02f55b plx
02f55c pla
02f55d rep #$30			; set A,X,Y => 16bit
02f55f and #$00ff
02f562 asl a
02f563 asl a
02f564 tay
02f565 sep #$20			; set A => 8bit
02f567 rep #$10			; set X,Y => 16bit
02f569 lda #$80
02f56b sta $0c00,y
02f56e lda #$ff
02f570 sta $0c01,y
02f573 sta $0c02,y
02f576 lda #$00
02f578 sta $0c03,y
02f57b plp
02f57c ply
02f57d pla
02f57e rts				; exit routine



02f583 pha
02f584 phx
02f585 phy
02f586 lda $7ec260,x
02f58a pha
02f58b lsr a
02f58c lsr a
02f58d tax
02f58e pla
02f58f and #$03
02f591 tay
02f592 lda $0e00,x
02f595 ora $f59f,y
02f598 sta $0e00,x
02f59b ply
02f59c plx
02f59d pla
02f59e rts				; exit routine



02f5a3 pha
02f5a4 phx
02f5a5 phy
02f5a6 lda $7ec260,x
02f5aa pha
02f5ab lsr a
02f5ac lsr a
02f5ad tax
02f5ae pla
02f5af and #$03
02f5b1 tay
02f5b2 lda $0e00,x
02f5b5 and $f5bf,y
02f5b8 sta $0e00,x
02f5bb ply
02f5bc plx
02f5bd pla
02f5be rts				; exit routine



02f5c3 php				; save processor status to stack
02f5c4 sep #$30			; set A,X,Y => 8bit
02f5c6 lda $0ae2
02f5c9 beq $f5d9
02f5cb lda $0aee
02f5ce cmp #$03
02f5d0 bpl $f5d9
02f5d2 pea $f5db
02f5d5 jsl $0097be
02f5d9 plp
02f5da rts				; exit routine



02f5e1 rts				; exit routine



02f670 php				; save processor status to stack
02f671 lda $7ec240,x
02f675 bpl $f6c0
02f677 lda #$00
02f679 sta $7ec240,x
02f67d lda #$ff
02f67f sta $7ec340,x
02f683 sta $7ec400,x
02f687 sta $7ec420,x
02f68b sta $7ec3c0,x
02f68f sta $7ec3e0,x
02f693 lda $7ec260,x
02f697 jsr $feab
02f69a pha
02f69b phd				; save direct page to stack
02f69c pea $0b00
02f69f pld
02f6a0 jsl $009754		; call routine "Text - TRB value at direct page with mask from $0097fb[] ($00:9754)"
02f6a4 pld
02f6a5 pla
02f6a6 rep #$30			; set A,X,Y => 16bit
02f6a8 and #$00ff
02f6ab asl a
02f6ac asl a
02f6ad tay
02f6ae sep #$20			; set A => 8bit
02f6b0 rep #$10			; set X,Y => 16bit
02f6b2 lda #$ff
02f6b4 sta $0c00,y
02f6b7 sta $0c01,y
02f6ba sta $0c02,y
02f6bd sta $0c03,y
02f6c0 plp
02f6c1 rts				; exit routine



02f6c2 rts				; exit routine



02f6c3 lda #$a2
02f6c5 sta $2131
02f6c8 lda #$e6
02f6ca sta $2132
02f6cd lda #$00
02f6cf sta $7ec380,x
02f6d3 rts				; exit routine



02f6d4 stz $2131
02f6d7 lda #$e0
02f6d9 sta $2132
02f6dc lda #$00
02f6de sta $7ec380,x
02f6e2 rts				; exit routine



02f6e3 lda #$22
02f6e5 sta $2131
02f6e8 lda #$ed
02f6ea sta $2132
02f6ed lda #$00
02f6ef sta $7ec380,x
02f6f3 rts				; exit routine



02f6f4 clc
02f6f5 lda $7ec420,x
02f6f9 adc $7ec280,x
02f6fd sta $7ec280,x
02f701 lda #$00
02f703 sta $7ec380,x
02f707 rts				; exit routine



02f708 lda #$01
02f70a sta $212d
02f70d stz $2132
02f710 lda #$02
02f712 sta $2130
02f715 lda #$50
02f717 sta $2131
02f71a lda #$00
02f71c sta $7ec380,x
02f720 rts				; exit routine



02f721 stz $212d
02f724 stz $2130
02f727 stz $2131
02f72a lda #$e0
02f72c sta $2132
02f72f lda #$00
02f731 sta $7ec380,x
02f735 rts				; exit routine



02f74a lda $7ec360,x
02f74e bne $f762
02f750 lda #$7f
02f752 sta $7ec340,x
02f756 lda #$00
02f758 sta $7ec440,x
02f75c inc
02f75d sta $7ec360,x
02f761 rts				; exit routine



02f762 lda $7ec340,x
02f766 cmp #$02
02f768 bmi $f79d
02f76a lda $7ec440,x
02f76e inc
02f76f and #$03
02f771 sta $7ec440,x
02f775 bne $f79c
02f777 lda $7ec360,x
02f77b cmp #$01
02f77d bne $f78f
02f77f lda $f749
02f782 sta $0af3
02f785 sta $0af1
02f788 lda #$02
02f78a sta $7ec360,x
02f78e rts				; exit routine



02f78f stz $0af1
02f792 stz $0af3
02f795 lda #$01
02f797 sta $7ec360,x
02f79b rts				; exit routine



02f79c rts				; exit routine



02f79d stz $0af1
02f7a0 stz $0af3
02f7a3 rts				; exit routine



02f7ab lda $7ec360,x
02f7af pea $f7a5
02f7b2 jsl $0097be
02f7b6 rts				; exit routine



02f7b7 lda #$00
02f7b9 sta $7ec380,x
02f7bd inc
02f7be sta $7ec340,x
02f7c2 lda $7ec440,x
02f7c6 tax
02f7c7 jsr $fe83
02f7ca lda #$00
02f7cc sta $7ec240,x
02f7d0 lda $7ec460,x
02f7d4 bpl $f7c6
02f7d6 stz $0af0
02f7d9 rts				; exit routine



02f7da lda #$fe
02f7dc sta $7ec340,x
02f7e0 lda #$01
02f7e2 sta $0af0
02f7e5 sta $7ec360,x
02f7e9 sta $0b22
02f7ec stx $0b21
02f7ef lda #$0c
02f7f1 sta $7ec460,x
02f7f5 phx
02f7f6 lda $f7a4
02f7f9 jsl $02fdcb
02f7fd lda #$00
02f7ff sta $7ec380,x
02f803 jsr $f8d4
02f806 lda #$ff
02f808 sta $7ec460,x
02f80c lda #$05
02f80e sta $7ec4a0,x
02f812 txa
02f813 plx
02f814 sta $7ec440,x
02f818 rts				; exit routine



02f819 lda #$ff
02f81b sta $00a8
02f81e lda $7ec460,x
02f822 beq $f844
02f824 lda $7ec440,x
02f828 tax
02f829 lda $7ec4a0,x
02f82d beq $f83c
02f82f lda $7ec440,x
02f833 beq $f88c
02f835 dec
02f836 sta $7ec440,x
02f83a beq $f84e
02f83c lda $7ec460,x
02f840 tax
02f841 bpl $f829
02f843 rts				; exit routine



02f844 ldx $0b21
02f847 lda #$02
02f849 sta $7ec360,x
02f84d rts				; exit routine



02f84e lda $7ec240,x
02f852 ora #$40
02f854 sta $7ec240,x
02f858 lda $7ec460,x
02f85c cmp #$ff
02f85e bne $f83c
02f860 lda $0b22
02f863 cmp #$0c
02f865 bpl $f83c
02f867 phx
02f868 jsl $02fe38
02f86c lda #$00
02f86e sta $7ec380,x
02f872 jsr $f8d4
02f875 lda #$ff
02f877 sta $7ec460,x
02f87b lda #$05
02f87d sta $7ec4a0,x
02f881 txa
02f882 plx
02f883 sta $7ec460,x
02f887 inc $0b22
02f88a bra $f83c
02f88c lda $7ec280,x
02f890 sbc $7ec480,x
02f894 sta $7ec280,x
02f898 lda $7ec2a0,x
02f89c adc $7ec480,x
02f8a0 sta $7ec2a0,x
02f8a4 cmp #$5a
02f8a6 bmi $f8c0
02f8a8 lda $7ec240,x
02f8ac and #$bf
02f8ae sta $7ec240,x
02f8b2 lda $7ec4a0,x
02f8b6 dec
02f8b7 sta $7ec4a0,x
02f8bb beq $f8c3
02f8bd jsr $f8d4
02f8c0 brl $f83c
02f8c3 phx
02f8c4 ldx $0b21
02f8c7 lda $7ec460,x
02f8cb dec
02f8cc sta $7ec460,x
02f8d0 plx
02f8d1 brl $f83c
02f8d4 lda #$05
02f8d6 sta $7ec440,x
02f8da jsl $009783
02f8de lda $00a9
02f8e1 and #$03
02f8e3 sta $7ec2e0,x
02f8e7 clc
02f8e8 adc #$02
02f8ea sta $7ec480,x
02f8ee lsr a
02f8ef inc
02f8f0 sta $7ec300,x
02f8f4 jsl $009783
02f8f8 lda $00a9
02f8fb sta $7ec280,x
02f8ff lda #$00
02f901 sta $7ec2a0,x
02f905 rts				; exit routine



02f90c lda $7ec360,x
02f910 pea $f906
02f913 jsl $0097be
02f917 rts				; exit routine



02f918 lda #$01
02f91a sta $7ec340,x
02f91e phx
02f91f lda $7ec380,x
02f923 pha
02f924 lda #$00
02f926 sta $7ec380,x
02f92a jsl $02fe38
02f92e pla
02f92f sta $7ec380,x
02f933 lda #$01
02f935 sta $7ec360,x
02f939 pla
02f93a sta $7ec440,x
02f93e lda #$20
02f940 sta $7ec460,x
02f944 lda #$01
02f946 sta $7ec480,x
02f94a lda #$72
02f94c sta $2131
02f94f rts				; exit routine



02f950 jsr $fe83
02f953 lda #$00
02f955 sta $7ec240,x
02f959 stz $2131
02f95c lda #$e0
02f95e sta $2132
02f961 rts				; exit routine



02f962 phx
02f963 lda $7ec440,x
02f967 tax
02f968 lda $7ec240,x
02f96c bne $f976
02f96e plx
02f96f lda #$02
02f971 sta $7ec360,x
02f975 rts				; exit routine



02f976 plx
02f977 lda $7ec460,x
02f97b sta $2132
02f97e lda $7ec460,x
02f982 clc
02f983 adc $7ec480,x
02f987 sta $7ec460,x
02f98b cmp #$3f
02f98d bpl $f994
02f98f cmp #$20
02f991 bmi $f99b
02f993 rts				; exit routine



02f994 lda #$ff
02f996 sta $7ec480,x
02f99a rts				; exit routine



02f99b lda #$01
02f99d sta $7ec480,x
02f9a1 rts				; exit routine



02f9a2 clc
02f9a3 lda $7ec420,x
02f9a7 adc $7ec2a0,x
02f9ab sta $7ec2a0,x
02f9af lda #$00
02f9b1 sta $7ec380,x
02f9b5 rts				; exit routine



02f9b7 lda $7ec360,x
02f9bb bne $f9e3
02f9bd lda #$fe
02f9bf sta $7ec340,x
02f9c3 lda #$01
02f9c5 sta $7ec360,x
02f9c9 lda $7ec3a0,x
02f9cd tax
02f9ce lda #$00
02f9d0 sta $7ec340,x
02f9d4 lda $7ec400,x
02f9d8 sta $7ec420,x
02f9dc lda #$03
02f9de sta $7ec400,x
02f9e2 rts				; exit routine



02f9e3 phx
02f9e4 lda $7ec3a0,x
02f9e8 tax
02f9e9 lda $7ec340,x
02f9ed bne $f9f7
02f9ef plx
02f9f0 lda #$01
02f9f2 sta $7ec340,x
02f9f6 rts				; exit routine



02f9f7 plx
02f9f8 rts				; exit routine



02fa1b lda $0aec
02fa1e bne $fa2f
02fa20 lda $7ec360,x
02fa24 cmp #$11
02fa26 bpl $fa30
02fa28 pea $f9f9
02fa2b jsl $0097be
02fa2f rts				; exit routine



02fa32 php				; save processor status to stack
02fa33 phd				; save direct page to stack
02fa34 pea $0c00
02fa37 pld
02fa38 sep #$30			; set A,X,Y => 8bit
02fa3a lda #$01
02fa3c sta $7ec360,x
02fa40 ldy #$04
02fa42 jsr $ea7f
02fa45 cmp #$ff
02fa47 beq $fa30
02fa49 sta $7ec260,x
02fa4d rep #$30			; set A,X,Y => 16bit
02fa4f and #$00ff
02fa52 asl a
02fa53 asl a
02fa54 pha
02fa55 sep #$20			; set A => 8bit
02fa57 rep #$10			; set X,Y => 16bit
02fa59 lda $7ec3a0,x
02fa5d asl a
02fa5e asl a
02fa5f sep #$30			; set A,X,Y => 8bit
02fa61 tax
02fa62 lda $0a25,x
02fa65 clc
02fa66 adc #$01
02fa68 asl a
02fa69 asl a
02fa6a asl a
02fa6b sep #$20			; set A => 8bit
02fa6d rep #$10			; set X,Y => 16bit
02fa6f plx
02fa70 clc
02fa71 sta $00,x
02fa73 adc #$08
02fa75 sta $04,x
02fa77 adc #$08
02fa79 sta $08,x
02fa7b adc #$08
02fa7d sta $0c,x
02fa7f ldy #$0000
02fa82 lda #$70
02fa84 sta $01,x
02fa86 lda #$d2
02fa88 sta $02,x
02fa8a lda #$28
02fa8c sta $03,x
02fa8e iny
02fa8f inx
02fa90 inx
02fa91 inx
02fa92 inx
02fa93 cpy #$0004
02fa96 bne $fa82
02fa98 pld
02fa99 plp
02fa9a rts				; exit routine



02fa9b php				; save processor status to stack
02fa9c sep #$30			; set A,X,Y => 8bit
02fa9e lda $7ec360,x
02faa2 inc
02faa3 cmp #$11
02faa5 bmi $faa9
02faa7 lda #$01
02faa9 sta $7ec360,x
02faad plp
02faae rts				; exit routine



02faaf php				; save processor status to stack
02fab0 phd				; save direct page to stack
02fab1 sep #$30			; set A,X,Y => 8bit
02fab3 pea $0c00
02fab6 pld
02fab7 lda $7ec360,x
02fabb inc
02fabc sta $7ec360,x
02fac0 sep #$20			; set A => 8bit
02fac2 rep #$10			; set X,Y => 16bit
02fac4 jsr $fb09
02fac7 lda $04af
02faca and #$20
02facc beq $fad6
02face inc $00,x
02fad0 inc $04,x
02fad2 dec $08,x
02fad4 dec $0c,x
02fad6 pld
02fad7 plp
02fad8 rts				; exit routine



02fad9 php				; save processor status to stack
02fada phd				; save direct page to stack
02fadb sep #$30			; set A,X,Y => 8bit
02fadd pea $0c00
02fae0 pld
02fae1 lda $7ec360,x
02fae5 inc
02fae6 cmp #$11
02fae8 bmi $faec
02faec sta $7ec360,x
02faf0 sep #$20			; set A => 8bit
02faf2 rep #$10			; set X,Y => 16bit
02faf4 jsr $fb09
02faf7 lda $04af
02fafa and #$20
02fafc beq $fb06
02fafe dec $00,x
02fb00 dec $04,x
02fb02 inc $08,x
02fb04 inc $0c,x
02fb06 pld
02fb07 plp
02fb08 rts				; exit routine



02fb09 lda #$00
02fb0b xba
02fb0c lda $7ec3a0,x
02fb10 dec
02fb11 dec
02fb12 tay
02fb13 lda $7ec260,x
02fb17 rep #$30			; set A,X,Y => 16bit
02fb19 asl a
02fb1a asl a
02fb1b tax
02fb1c sep #$20			; set A => 8bit
02fb1e rep #$10			; set X,Y => 16bit
02fb20 lda $0a02,y
02fb23 cmp #$ff
02fb25 beq $fb45
02fb27 lda $0a0a,y
02fb2a beq $fb45
02fb2c phx
02fb2d ldy #$0000
02fb30 lda $fb41,y
02fb33 iny
02fb34 sta $02,x
02fb36 inx
02fb37 inx
02fb38 inx
02fb39 inx
02fb3a cpy #$0004
02fb3d bne $fb30
02fb3f plx
02fb40 rts				; exit routine



02fb45 lda #$d2
02fb47 sta $02,x
02fb49 sta $06,x
02fb4b sta $0a,x
02fb4d sta $0e,x
02fb4f rts				; exit routine



02fdaa phx
02fdab php				; save processor status to stack
02fdac lda $7ec380,x
02fdb0 pea $f62c
02fdb3 jsl $0097be
02fdb7 plp
02fdb8 plx
02fdb9 jsr $f483
02fdbc rts				; exit routine



02fdbd phx
02fdbe lda $7ec380,x
02fdc2 pea $f62c
02fdc5 jsl $0097be
02fdc9 plx
02fdca rts				; exit routine



02fdcb phd				; save direct page to stack
02fdcc pea $0a00
02fdcf pld
02fdd0 php				; save processor status to stack
02fdd1 sep #$30			; set A,X,Y => 8bit
02fdd3 sta $ca
02fdd5 stz $cc
02fdd7 rep #$20			; set A => 16bit
02fdd9 sep #$10			; set X,Y => 8bit
02fddb and #$00ff
02fdde cmp #$00c8
02fde1 bmi $fde5
02fde5 sep #$30			; set A,X,Y => 8bit
02fde7 lda $7ec320,x
02fdeb pha
02fdec jsl $02fe38
02fdf0 jsr $eb30
02fdf3 sta $7ec2c0,x
02fdf7 sta $cb
02fdf9 lda #$00
02fdfb sta $7ec2e0,x
02fdff jsr $eb55
02fe02 lda #$03
02fe04 sta $0ae4
02fe07 pla
02fe08 sta $7ec320,x
02fe0c plp
02fe0d pld
02fe0e rtl				; exit routine



02fe38 phd				; save direct page to stack
02fe39 pea $0a00
02fe3c pld
02fe3d phy
02fe3e php				; save processor status to stack
02fe3f sep #$30			; set A,X,Y => 8bit
02fe41 lda $7ec320,x
02fe45 pha
02fe46 lda $7ec2c0,x
02fe4a pha
02fe4b jsr $ea60
02fe4e ldy #$01
02fe50 jsr $ea9f
02fe53 sta $7ec260,x
02fe57 phd				; save direct page to stack
02fe58 pea $0b00
02fe5b pld
02fe5c jsl $00974e		; call routine "Text - TSB value at direct page with mask from $0097fb[] ($00:974e)"
02fe60 pld
02fe61 pla
02fe62 sta $7ec2c0,x
02fe66 pla
02fe67 sta $7ec320,x
02fe6b lda #$00
02fe6d sta $7ec2e0,x
02fe71 sta $7ec360,x
02fe75 sta $7ec380,x
02fe79 lda #$84
02fe7b sta $7ec240,x
02fe7f plp
02fe80 ply
02fe81 pld
02fe82 rtl				; exit routine



02fe83 pha
02fe84 phy
02fe85 php				; save processor status to stack
02fe86 sep #$30			; set A,X,Y => 8bit
02fe88 lda #$00
02fe8a sta $7ec340,x
02fe8e sta $7ec360,x
02fe92 sta $7ec380,x
02fe96 lda $7ec260,x
02fe9a jsr $feab
02fe9d phd				; save direct page to stack
02fe9e pea $0b00
02fea1 pld
02fea2 jsl $009754		; call routine "Text - TRB value at direct page with mask from $0097fb[] ($00:9754)"
02fea6 pld
02fea7 plp
02fea8 ply
02fea9 pla
02feaa rts				; exit routine



02feab pha
02feac phy
02fead phx
02feae php				; save processor status to stack
02feaf sep #$30			; set A,X,Y => 8bit
02feb1 pha
02feb2 lsr a
02feb3 lsr a
02feb4 tax
02feb5 pla
02feb6 and #$03
02feb8 tay
02feb9 lda $0e00,x
02febc and $feca,y
02febf ora $fece,y
02fec2 sta $0e00,x
02fec5 plp
02fec6 plx
02fec7 ply
02fec8 pla
02fec9 rts				; exit routine
079030 phd
079031 php
079032 sep #$20
079034 rep #$10
079036 lda $19ab
079039 cmp #$ff
07903b beq $9050



07903d pea $1953
079040 pld
079041 ldx $19d8
079044 lda $0cd500,x
079048 inx
079049 inx
07904a stx $02
07904c cmp #$ff
07904e bne $9053
079050 plp
079051 pld
079052 rtl
079053 sta $0a
079055 ldx #$0000		; clear X
079058 stx $04
07905a stx $06
07905c sep #$20			; set A => 8bit
07905e rep #$10			; set X,Y => 16bit
079060 ldx $02
079062 lda $0cd500,x
079066 cmp #$ff
079068 beq $9092
07906a phx
07906b ldx $06
07906d lda $7fcec8,x
079071 sta $00
079073 plx
079074 lda $0cd500,x
079078 cmp $00
07907a bcs $9092
07907c lda #$00
07907e phx
07907f ldx $06
079081 sta $7fcec8,x
079085 plx
079086 lda #$00
079088 xba
079089 lda $0cd501,x
07908d asl a
07908e tax
07908f jsr ($90bb,x)
079092 rep #$30			; set A,X,Y => 16bit
079094 lda $06
079096 cmp #$000e
079099 beq $9050
07909b inc
07909c inc
07909d sta $06
07909f lda $04
0790a1 clc
0790a2 adc #$0020
0790a5 sta $04
0790a7 sep #$20			; set A => 8bit
0790a9 rep #$10			; set X,Y => 16bit
0790ab ldx $02
0790ad lda $0cd500,x
0790b1 inx
0790b2 cmp #$ff
0790b4 bne $90ad
0790b6 stx $02
0790b8 jmp $905c
0790c5 sep #$20			; set A => 8bit
0790c7 rep #$10			; set X,Y => 16bit
0790c9 ldx $02
0790cb inx
0790cc inx
0790cd lda $0cd500,x
0790d1 inx
0790d2 sta $00
0790d4 phx
0790d5 lda #$00
0790d7 xba
0790d8 ldx $06
0790da lda $7fcec9,x
0790de inc
0790df cmp $00
0790e1 beq $90e7
0790e3 bcc $90e7
0790e5 lda #$00
0790e7 sta $7fcec9,x
0790eb plx
0790ec rep #$30			; set A,X,Y => 16bit
0790ee stx $00
0790f0 clc
0790f1 adc $00
0790f3 tax
0790f4 lda #$0000
0790f7 php				; save processor status to stack
0790f8 sep #$20			; set A => 8bit
0790fa rep #$10			; set X,Y => 16bit
0790fc lda $0cd500,x
079100 plp
079101 and #$00ff
079104 asl a
079105 asl a
079106 asl a
079107 asl a
079108 asl a
079109 tax
07910a lda $04
07910c clc
07910d adc #$cdc8
079110 tay
079111 pea $007f
079114 plb
079115 lda #$0010
079118 pha
079119 lda $7fd274,x
07911d sta $0000,y
079120 inx
079121 inx
079122 iny
079123 iny
079124 pla
079125 dec
079126 bne $9118
079128 plb
079129 rts				; exit routine



07912a sep #$20			; set A => 8bit
07912c rep #$10			; set X,Y => 16bit
07912e ldx $04
079130 ldy #$0020
079133 lda $7fcdc8,x
079137 beq $914e
079139 cmp #$ff
07913b beq $914e
07913d pha
07913e and #$01
079140 clc
079141 ror a
079142 ror a
079143 sta $00
079145 pla
079146 lsr a
079147 clc
079148 adc $00
07914a sta $7fcdc8,x
07914e inx
07914f dey
079150 bne $9133
079152 rts				; exit routine



0791c9 rep #$30			; set A,X,Y => 16bit
0791cb ldx $04
0791cd ldy #$0002
0791d0 lda $7fcdd6,x
0791d4 sta $00
0791d6 lda $7fcdd4,x
0791da sta $7fcdd6,x
0791de lda $7fcdd2,x
0791e2 sta $7fcdd4,x
0791e6 lda $7fcdd0,x
0791ea sta $7fcdd2,x
0791ee lda $7fcdce,x
0791f2 sta $7fcdd0,x
0791f6 lda $7fcdcc,x
0791fa sta $7fcdce,x
0791fe lda $7fcdca,x
079202 sta $7fcdcc,x
079206 lda $7fcdc8,x
07920a sta $7fcdca,x
07920e lda $00
079210 sta $7fcdc8,x
079214 txa
079215 clc
079216 adc #$0010
079219 tax
07921a dey
07921b bne $91d0
07921d rts				; exit routine



0b0918 phb				; save databank to stack
0b0919 mvn $08,$7f
0b091c plb
0b091d rts				; exit routine



0b091e phb				; save databank to stack
0b091f mvn $7f,$7f
0b0922 plb
0b0923 rts				; exit routine



0b8000 lda $0e8b
0b8003 beq $8017
0b8005 dec
0b8006 beq $8023
0b8008 dec
0b8009 beq $802f
0b8023 lda #$b6
0b8025 sta $0507
0b8028 lda #$1b
0b802a sta $0506
0b802d bra $8039
0b802f lda #$5f
0b8031 sta $0507
0b8034 lda #$1f
0b8036 sta $0506
0b8039 lda #$0a
0b803b sta $0505
0b803e rtl				; exit routine



0b803f php				; save processor status to stack
0b8040 phb				; save databank to stack
0b8041 phx
0b8042 phy
0b8043 sep #$20			; set A => 8bit
0b8045 rep #$10			; set X,Y => 16bit
0b8047 phk
0b8048 plb
0b8049 jsr $80d9
0b804c ldx $192b
0b804f cpx #$ffff
0b8052 beq $80a1
0b8054 lda $1a80,x
0b8057 and #$cf
0b8059 ora #$10
0b805b sta $1a80,x
0b805e lda $1a82,x
0b8061 rep #$30			; set A,X,Y => 16bit
0b8063 and #$00ff
0b8066 asl a
0b8067 phx
0b8068 tax
0b8069 lda $00fdcf,x
0b806d clc
0b806e adc #$0008
0b8071 tay
0b8072 plx
0b8073 jsl $01ae85
0b8077 rep #$30			; set A,X,Y => 16bit
0b8079 lda $192d
0b807c and #$00ff
0b807f asl a
0b8080 asl a
0b8081 phx
0b8082 tax
0b8083 lda $01a639,x
0b8087 tay
0b8088 plx
0b8089 lda $1a73,x
0b808c sta $0c02,y
0b808f lda $1a75,x
0b8092 sta $0c06,y
0b8095 lda $1a77,x
0b8098 sta $0c0a,y
0b809b lda $1a79,x
0b809e sta $0c0e,y
0b80a1 ply
0b80a2 plx
0b80a3 plb
0b80a4 plp
0b80a5 rtl				; exit routine



0b80d9 lda $009e
0b80dc sta $192c
0b80df lda #$02
0b80e1 sta $192b
0b80e4 jsl $018bd0
0b80e8 rts				; exit routine



0b8149 stz $19f6
0b814c lda #$80
0b814e sta $19a5
0b8151 lda #$01
0b8153 sta $1a45
0b8156 ldx $19f1
0b8159 stx $0e89
0b815c lda $19f0
0b815f sta $0e91
0b8162 bne $81a5
0b8164 lda #$f2
0b8166 jsl $00976b
0b816a stz $1a5b
0b816d lda $0e88
0b8170 rep #$20			; set A => 16bit
0b8172 and #$00ff
0b8175 asl a
0b8176 tax
0b8177 lda $07f7c3,x
0b817b sta $0e89
0b817e sep #$20			; set A => 8bit
0b8180 lda #$f3
0b8182 jsl $009776
0b8186 bne $81a5
0b8188 lda #$02
0b818a sta $0e8b
0b818d ldx #$0000		; clear X
0b8190 lda #$20
0b8192 stz $0ec8,x
0b8195 stz $0f28,x
0b8198 inx
0b8199 dec
0b819a bne $8192
0b819c lda #$30
0b819e stz $0ec8,x
0b81a1 inx
0b81a2 dec
0b81a3 bne $819e
0b81a5 lda $0e91
0b81a8 rep #$20			; set A => 16bit
0b81aa and #$00ff
0b81ad asl a
0b81ae tax
0b81af lda $07af3b,x
0b81b3 tax
0b81b4 sep #$20			; set A => 8bit
0b81b6 stx $19b5
0b81b9 ldy #$0000
0b81bc lda $07b013,x
0b81c0 sta $1910,y
0b81c3 inx
0b81c4 iny
0b81c5 cpy #$0007
0b81c8 bne $81bc
0b81ca lda #$0a
0b81cc sta $211b
0b81cf stz $211b
0b81d2 lda $1911
0b81d5 sta $211c
0b81d8 ldx $2134
0b81db stx $19b7
0b81de ldy #$0000
0b81e1 lda $0b8cd9,x
0b81e5 sta $1918,y
0b81e8 inx
0b81e9 iny
0b81ea cpy #$000a
0b81ed bne $81e1
0b81ef ldx #$ffff
0b81f2 lda $1912
0b81f5 cmp #$ff
0b81f7 beq $8207
0b81f9 rep #$20			; set A => 16bit
0b81fb and #$00ff
0b81fe asl a
0b81ff tax
0b8200 lda $0b8892,x
0b8204 tax
0b8205 sep #$20			; set A => 8bit
0b8207 stx $19b9
0b820a lda $1916
0b820d and #$e0
0b820f lsr a
0b8210 lsr a
0b8211 lsr a
0b8212 sta $1a55
0b8215 lda $1915
0b8218 and #$e0
0b821a ora $1a55
0b821d lsr a
0b821e lsr a
0b821f sta $1a55
0b8222 rtl				; exit routine



0b8223 phb				; save databank to stack
0b8224 phk
0b8225 plb
0b8226 ldx #$0000		; clear X
0b8229 txa
0b822a xba
0b822b stx $190c
0b822e stx $190e
0b8231 lda $8296,x
0b8234 sta $1a4a,x
0b8237 inx
0b8238 cpx #$000b
0b823b bne $8231
0b823d lda $1a55
0b8240 beq $8294
0b8242 dec
0b8243 asl a
0b8244 asl a
0b8245 tax
0b8246 lda $8450,x
0b8249 sta $1a55
0b824c lda $8451,x
0b824f sta $1a56
0b8252 lda $8452,x
0b8255 sta $1a57
0b8258 lda $844f,x
0b825b pha
0b825c and #$07
0b825e sta $1a4c
0b8261 pla
0b8262 and #$70
0b8264 lsr a
0b8265 lsr a
0b8266 tax
0b8267 lda $84df,x
0b826a sta $1a50
0b826d lda $84e0,x
0b8270 sta $1a51
0b8273 lda $84e2,x
0b8276 sta $1a4f
0b8279 lda $84e1,x
0b827c tax
0b827d lda $829e,x
0b8280 sta $1a52
0b8283 lda $829f,x
0b8286 sta $1a53
0b8289 lda $82a0,x
0b828c sta $1a54
0b828f lda #$17
0b8291 sta $1a4e
0b8294 plb
0b8295 rtl				; exit routine



0b82aa ldy $0e89
0b82ad jsr $8338
0b82b0 sta $19d3
0b82b3 stx $19cb
0b82b6 lda $19cc
0b82b9 bpl $82cb
0b82bb and #$40
0b82bd beq $82cb
0b82cb lda $19b4
0b82ce and #$f0
0b82d0 sta $19b4
0b82d3 lda $19cb
0b82d6 and #$08
0b82d8 beq $82e3
0b82e3 lda $19cb
0b82e6 and #$07
0b82e8 xba
0b82e9 lda $19d3
0b82ec bpl $82f2
0b82ee xba
0b82ef ora #$08
0b82f1 xba
0b82f2 xba
0b82f3 ora $19b4
0b82f6 sta $19b4
0b82f9 ldx #$0000		; clear X
0b82fc and #$07
0b82fe dec
0b82ff beq $8304
0b8301 ldx #$000a
0b8304 ldy #$0000
0b8307 lda $0b8324,x
0b830b sta $1993,y
0b830e inx
0b830f iny
0b8310 cpy #$000a
0b8313 bne $8307
0b8315 ldx #$0e06
0b8318 lda $1910
0b831b bpl $8320
0b831d ldx #$0e0e
0b8320 stx $19b2
0b8323 rtl				; exit routine



0b8338 rep #$20			; set A => 16bit
0b833a tya
0b833b sep #$20			; set A => 8bit
0b833d xba
0b833e sta $4202
0b8341 lda $1924
0b8344 sta $4203
0b8347 xba
0b8348 rep #$20			; set A => 16bit
0b834a and #$003f
0b834d clc
0b834e adc $4216
0b8351 tax
0b8352 tay
0b8353 sep #$20			; set A => 8bit
0b8355 lda $7f8000,x
0b8359 pha
0b835a rep #$20			; set A => 16bit
0b835c and #$007f
0b835f asl a
0b8360 tax
0b8361 lda $7fd174,x
0b8365 sep #$20			; set A => 8bit
0b8367 tax
0b8368 pla
0b8369 rts				; exit routine



0b836a phb				; save databank to stack
0b836b phk
0b836c plb
0b836d ldx #$0000		; clear X
0b8370 ldy #$cef4
0b8373 lda $1918
0b8376 and #$0f
0b8378 phx
0b8379 pha
0b837a xba
0b837b lda $83ac,x
0b837e sta $211b
0b8381 lda $83ad,x
0b8384 sta $211b
0b8387 xba
0b8388 sta $211c
0b838b rep #$20			; set A => 16bit
0b838d lda $83b2,x
0b8390 clc
0b8391 adc $2134
0b8394 pha
0b8395 lda $83ac,x
0b8398 dec
0b8399 plx
0b839a sep #$20			; set A => 8bit
0b839c phb				; save databank to stack
0b839d mvn $06,$7f
0b83a0 plb
0b83a1 pla
0b83a2 plx
0b83a3 inx
0b83a4 inx
0b83a5 cpx #$0006
0b83a8 bne $8378
0b83aa plb
0b83ab rtl				; exit routine



0b83b8 lda $1919
0b83bb cmp #$19
0b83bd beq $83df
0b83bf sta $4202
0b83c2 lda #$80
0b83c4 sta $4203
0b83c7 rep #$20			; set A => 16bit
0b83c9 lda #$8000
0b83cc clc
0b83cd adc $4216
0b83d0 tax
0b83d1 ldy #$c588
0b83d4 lda #$007f
0b83d7 phb				; save databank to stack
0b83d8 mvn $05,$7f
0b83db plb
0b83dc sep #$20			; set A => 8bit
0b83de rtl				; exit routine



0b83df rep #$20			; set A => 16bit
0b83e1 ldx #$d984
0b83e4 ldy #$c588
0b83e7 lda #$007f
0b83ea phb				; save databank to stack
0b83eb mvn $07,$7f
0b83ee plb
0b83ef sep #$20			; set A => 8bit
0b83f1 rtl				; exit routine



0b83f2 phb				; save databank to stack
0b83f3 rep #$20			; set A => 16bit
0b83f5 ldx #$d824
0b83f8 ldy #$c568
0b83fb lda #$000f
0b83fe mvn $07,$7f
0b8401 ldx #$d824
0b8404 ldy #$c4f8
0b8407 lda #$000f
0b840a mvn $07,$7f
0b840d ldx #$d834
0b8410 ldy #$c548
0b8413 lda #$000f
0b8416 mvn $07,$7f
0b8419 sep #$20			; set A => 8bit
0b841b plb
0b841c rtl				; exit routine



0b841d lda #$41
0b841f sta $2107
0b8422 lda $1a4d
0b8425 sta $2108
0b8428 lda $1a4e
0b842b sta $212c
0b842e lda $1a4f
0b8431 sta $212d
0b8434 lda $1a50
0b8437 sta $2130
0b843a ldy $1a51
0b843d lda $19cb
0b8440 and #$70
0b8442 cmp #$70
0b8444 bne $844a
0b844a tya
0b844b sta $2131
0b844e rtl				; exit routine



0b84fb rep #$20			; set A => 16bit
0b84fd lda $1918
0b8500 and #$00f0
0b8503 lsr a
0b8504 lsr a
0b8505 lsr a
0b8506 tax
0b8507 lda $0b8540,x
0b850b sta $1924
0b850e sep #$20			; set A => 8bit
0b8510 lda $1910
0b8513 and #$3f
0b8515 sta $4202
0b8518 lda #$03
0b851a sta $4203
0b851d ldx #$7f80
0b8520 stx $0904
0b8523 stz $0903
0b8526 ldx $4216
0b8529 rep #$20			; set A => 16bit
0b852b lda $0b8735,x
0b852f sta $0900
0b8532 sep #$20			; set A => 8bit
0b8534 lda $0b8737,x
0b8538 sta $0902
0b853b jsl $0b8669
0b853f rtl				; exit routine



0b8560 lda #$00
0b8562 xba
0b8563 lda $1a4c
0b8566 asl a
0b8567 tax
0b8568 jsr ($856c,x)
0b856b rtl				; exit routine



0b857a lda $1a55
0b857d bpl $85be
0b857f ldx #$1000
0b8582 stx $1a4a
0b8585 ldx #$f6d1
0b8588 lda #$03
0b858a jsl $009776
0b858e bne $85a9
0b8590 ldx #$f538
0b8593 lda #$02
0b8595 jsl $009776
0b8599 bne $85a9
0b859b ldx #$f37c
0b859e lda #$01
0b85a0 jsl $009776
0b85a4 bne $85a9
0b85a6 ldx #$f240
0b85a9 stx $0900
0b85ac lda #$07
0b85ae sta $0902
0b85b1 ldx #$7f90
0b85b4 stx $0904
0b85b7 stz $0903
0b85ba jsl $0b86ea
0b85be rts				; exit routine



0b85bf lda #$08
0b85c1 sta $211b
0b85c4 stz $211b
0b85c7 lda $0e89
0b85ca sec
0b85cb sbc #$08
0b85cd sta $211c
0b85d0 rep #$20			; set A => 16bit
0b85d2 lda $2134
0b85d5 and #$01f8
0b85d8 sta $1904
0b85db sep #$20			; set A => 8bit
0b85dd lda #$08
0b85df sta $211b
0b85e2 stz $211b
0b85e5 lda $0e8a
0b85e8 sec
0b85e9 sbc #$06
0b85eb sta $211c
0b85ee rep #$20			; set A => 16bit
0b85f0 lda $2134
0b85f3 clc
0b85f4 adc $1a56
0b85f7 and #$01f8
0b85fa sta $1906
0b85fd sep #$20			; set A => 8bit
0b85ff lda $1a55
0b8602 and #$3f
0b8604 sta $4202
0b8607 lda #$03
0b8609 sta $4203
0b860c ldx #$7f90
0b860f stx $0904
0b8612 stz $0903
0b8615 ldx $4216
0b8618 rep #$20			; set A => 16bit
0b861a lda $0b8735,x
0b861e sta $0900
0b8621 sep #$20			; set A => 8bit
0b8623 lda $0b8737,x
0b8627 sta $0902
0b862a jsl $0b8669
0b862e lda #$4b
0b8630 sta $1a4d
0b8633 rts				; exit routine



0b8634 lda $1a56
0b8637 sta $1a58
0b863a sta $1a59
0b863d rep #$20			; set A => 16bit
0b863f lda $1a57
0b8642 and #$0003
0b8645 asl a
0b8646 asl a
0b8647 tax
0b8648 lda $0b8659,x
0b864c sta $190c
0b864f lda $0b865b,x
0b8653 sta $190e
0b8656 sep #$20			; set A => 8bit
0b8658 rts				; exit routine



0b8669 php				; save processor status to stack
0b866a phd				; save direct page to stack
0b866b phb				; save databank to stack
0b866c pea $0900
0b866f pld
0b8670 rep #$30			; set A,X,Y => 16bit
0b8672 ldx #$86de
0b8675 ldy #$0918
0b8678 lda #$000b
0b867b mvn $0b,$0b
0b867e ldx $00
0b8680 inx
0b8681 inx
0b8682 txa
0b8683 clc
0b8684 adc [$00]
0b8686 sta $06
0b8688 sep #$20			; set A => 8bit
0b868a lda $02
0b868c sta $1b
0b868e pha
0b868f plb
0b8690 lda $05
0b8692 sta $1a
0b8694 sta $20
0b8696 sta $21
0b8698 ldy $03
0b869a stz $0d
0b869c sep #$20			; set A => 8bit
0b869e lda $0000,x
0b86a1 beq $86da
0b86a3 inx
0b86a4 rep #$20			; set A => 16bit
0b86a6 pha
0b86a7 and #$000f
0b86aa beq $86b6
0b86ac phx
0b86ad ldx $06
0b86af dec
0b86b0 jsr $0918
0b86b3 stx $06
0b86b5 plx
0b86b6 pla
0b86b7 and #$00f0
0b86ba beq $869c
0b86bc lsr a
0b86bd lsr a
0b86be lsr a
0b86bf lsr a
0b86c0 sta $08
0b86c2 lda $0000,x
0b86c5 inx
0b86c6 and #$00ff
0b86c9 sta $0a
0b86cb tya
0b86cc clc
0b86cd sbc $0a
0b86cf phx
0b86d0 tax
0b86d1 lda $08
0b86d3 inc
0b86d4 jsr $091e
0b86d7 plx
0b86d8 bra $869c
0b86da plb
0b86db pld
0b86dc plp
0b86dd rtl				; exit routine



0b86ea php				; save processor status to stack
0b86eb phb				; save databank to stack
0b86ec phd				; save direct page to stack
0b86ed sep #$20			; set A => 8bit
0b86ef rep #$10			; set X,Y => 16bit
0b86f1 pea $0900
0b86f4 pld
0b86f5 lda $02
0b86f7 pha
0b86f8 plb
0b86f9 ldx $00
0b86fb ldy $03
0b86fd sty $2181
0b8700 lda $05
0b8702 pea $2100
0b8705 pld
0b8706 sta $83
0b8708 ldy $0000,x
0b870b inx
0b870c inx
0b870d lda $0000,x
0b8710 bpl $872b
0b8712 inx
0b8713 dey
0b8714 phy
0b8715 pha
0b8716 lda #$00
0b8718 xba
0b8719 lda $0000,x
0b871c tay
0b871d iny
0b871e iny
0b871f iny
0b8720 pla
0b8721 and #$7f
0b8723 sta $80
0b8725 dey
0b8726 bne $8723
0b8728 ply
0b8729 bra $872d
0b872b sta $80
0b872d inx
0b872e dey
0b872f bne $870d
0b8731 pld
0b8732 plb
0b8733 plp
0b8734 rtl				; exit routine



0b87b9 php				; save processor status to stack
0b87ba phb				; save databank to stack
0b87bb rep #$30			; set A,X,Y => 16bit
0b87bd lda #$0001
0b87c0 sta $0c40
0b87c3 ldy #$0c41
0b87c6 ldx #$0c40
0b87c9 lda #$01be
0b87cc mvn $00,$00
0b87cf lda #$5555
0b87d2 sta $0e03
0b87d5 ldy #$0e04
0b87d8 ldx #$0e03
0b87db lda #$001b
0b87de mvn $00,$00
0b87e1 plb
0b87e2 plp
0b87e3 rtl				; exit routine



0b8e91 phb				; save databank to stack
0b8e92 phk
0b8e93 plb
0b8e94 lda $f8
0b8e96 beq $8f01
0b8e98 ldx $de
0b8e9a lda $7ec360,x
0b8e9e inc
0b8e9f sta $7ec360,x
0b8ea3 lda $1021
0b8ea6 bit #$40
0b8ea8 bne $8ec0
0b8eaa rep #$30			; set A,X,Y => 16bit
0b8eac pha
0b8ead phx
0b8eae ldx #$d824
0b8eb1 ldy #$c140
0b8eb4 lda #$000f
0b8eb7 phb				; save databank to stack
0b8eb8 mvn $07,$7e
0b8ebb plb
0b8ebc plx
0b8ebd pla
0b8ebe sep #$30			; set A,X,Y => 8bit
0b8ec0 jsr $8f27
0b8ec3 cmp $f4
0b8ec5 beq $8ed2
0b8ec7 sta $f4
0b8ec9 pea $8f15
0b8ecc jsl $0097be
0b8ed0 bra $8ed9
0b8ed2 pea $8f03
0b8ed5 jsl $0097be
0b8ed9 ldx $0adf
0b8edc lda $7ec360,x
0b8ee0 inc
0b8ee1 sta $7ec360,x
0b8ee5 lda $10a1
0b8ee8 jsr $8f27
0b8eeb cmp $f5
0b8eed beq $8efa
0b8eef sta $f5
0b8ef1 pea $8f15
0b8ef4 jsl $0097be
0b8ef8 bra $8f01
0b8efa pea $8f03
0b8efd jsl $0097be
0b8f01 plb
0b8f02 rtl				; exit routine



0b8f27 phy
0b8f28 ldy #$08
0b8f2a asl a
0b8f2b bcs $8f30
0b8f2d dey
0b8f2e bne $8f2a
0b8f30 tya
0b8f31 ply
0b8f32 rts				; exit routine



0b8f33 lda #$00
0b8f35 sta $7ec400,x
0b8f39 jsr $9304
0b8f3c cpx #$00
0b8f3e beq $8f44
0b8f44 lda #$80
0b8f46 sta $0ae5
0b8f49 rts				; exit routine



0b8f4a rts				; exit routine



0b9093 phx
0b9094 phy
0b9095 php				; save processor status to stack
0b9096 lda #$00
0b9098 xba
0b9099 lda $7ec320,x
0b909d clc
0b909e adc #$09
0b90a0 jsl $0b92d6
0b90a4 jsr $9304
0b90a7 lda $0c00,y
0b90aa sbc #$0d
0b90ac sta $0c10,y
0b90af sta $0c14,y
0b90b2 clc
0b90b3 adc #$08
0b90b5 sta $0c18,y
0b90b8 adc #$0c
0b90ba sta $0c1c,y
0b90bd sta $0c20,y
0b90c0 adc #$09
0b90c2 sta $0c24,y
0b90c5 adc #$08
0b90c7 sta $0c28,y
0b90ca sta $0c2c,y
0b90cd lda $0c01,y
0b90d0 sbc #$0d
0b90d2 sta $0c11,y
0b90d5 sta $0c1d,y
0b90d8 sta $0c29,y
0b90db clc
0b90dc adc #$08
0b90de sta $0c15,y
0b90e1 sta $0c19,y
0b90e4 sta $0c21,y
0b90e7 sta $0c25,y
0b90ea sta $0c2d,y
0b90ed lda $0c13,y
0b90f0 ora #$40
0b90f2 sta $0c27,y
0b90f5 plp
0b90f6 ply
0b90f7 plx
0b90f8 rts				; exit routine



0b90f9 lda $7ec260,x
0b90fd asl a
0b90fe asl a
0b90ff tay
0b9100 lda $7ec360,x
0b9104 lsr a
0b9105 lsr a
0b9106 lsr a
0b9107 lsr a
0b9108 lsr a
0b9109 and #$03
0b910b pea $9113
0b910e jsl $0097be
0b9112 rts				; exit routine



0b911b lda #$ab
0b911d sta $0c12,y
0b9120 inc
0b9121 sta $0c16,y
0b9124 inc
0b9125 sta $0c1a,y
0b9128 rts				; exit routine



0b9129 lda #$d2
0b912b sta $0c12,y
0b912e sta $0c16,y
0b9131 sta $0c1a,y
0b9134 lda #$ae
0b9136 sta $0c1e,y
0b9139 inc
0b913a sta $0c22,y
0b913d rts				; exit routine



0b913e lda #$d2
0b9140 sta $0c1e,y
0b9143 sta $0c22,y
0b9146 lda #$ad
0b9148 sta $0c26,y
0b914b inc
0b914c inc
0b914d inc
0b914e sta $0c2a,y
0b9151 inc
0b9152 sta $0c2e,y
0b9155 rts				; exit routine



0b9156 lda #$d2
0b9158 sta $0c26,y
0b915b sta $0c2a,y
0b915e sta $0c2e,y
0b9161 rts				; exit routine



0b9162 phx
0b9163 phy
0b9164 lda #$00
0b9166 lda $7ec360,x
0b916a lda #$04
0b916c xba
0b916d lda $7ec320,x
0b9171 clc
0b9172 adc #$09
0b9174 jsl $0b92d6
0b9178 jsr $9304
0b917b lda #$04
0b917d sta $7ec400,x
0b9181 lda $7ec480,x
0b9185 clc
0b9186 adc #$08
0b9188 sta $0c02,y
0b918b inc
0b918c sta $0c06,y
0b918f inc
0b9190 sta $0c0a,y
0b9193 inc
0b9194 sta $0c0e,y
0b9197 lda $0c01,y
0b919a sec
0b919b sbc #$08
0b919d sta $0c11,y
0b91a0 sbc #$04
0b91a2 sta $0c15,y
0b91a5 lda $0c00,y
0b91a8 clc
0b91a9 adc #$08
0b91ab sta $0c10,y
0b91ae adc #$08
0b91b0 sta $0c14,y
0b91b3 ply
0b91b4 plx
0b91b5 rts				; exit routine



0b91b6 lda $7ec260,x
0b91ba asl a
0b91bb asl a
0b91bc tay
0b91bd lda $7ec360,x
0b91c1 lsr a
0b91c2 lsr a
0b91c3 lsr a
0b91c4 lsr a
0b91c5 lsr a
0b91c6 and #$03
0b91c8 pea $91d0
0b91cb jsl $0097be
0b91cf rts				; exit routine



0b91d8 lda #$d2
0b91da sta $0c12,y
0b91dd sta $0c16,y
0b91e0 rts				; exit routine



0b91e1 lda #$b4
0b91e3 sta $0c12,y
0b91e6 lda #$d2
0b91e8 sta $0c16,y
0b91eb rts				; exit routine



0b91ec lda #$b4
0b91ee sta $0c12,y
0b91f1 sta $0c16,y
0b91f4 rts				; exit routine



0b91f5 lda #$d2
0b91f7 sta $0c12,y
0b91fa lda #$b4
0b91fc sta $0c16,y
0b91ff rts				; exit routine



0b9296 php				; save processor status to stack
0b9297 jsr $9304
0b929a lda #$04
0b929c sta $7ec400,x
0b92a0 lda #$0f
0b92a2 xba
0b92a3 lda $7ec320,x
0b92a7 clc
0b92a8 adc #$08
0b92aa jsl $0b92d6
0b92ae plp
0b92af rts				; exit routine



0b92b0 rts				; exit routine



0b92b1 phx
0b92b2 phy
0b92b3 jsr $9304
0b92b6 lda #$04
0b92b8 sta $7ec400,x
0b92bc lda $7ec480,x
0b92c0 clc
0b92c1 adc #$08
0b92c3 sta $0c02,y
0b92c6 inc
0b92c7 sta $0c06,y
0b92ca inc
0b92cb sta $0c0a,y
0b92ce inc
0b92cf sta $0c0e,y
0b92d2 ply
0b92d3 plx
0b92d4 rts				; exit routine



0b92d5 rts				; exit routine



0b92d6 phx
0b92d7 phy
0b92d8 php				; save processor status to stack
0b92d9 phb				; save databank to stack
0b92da rep #$30			; set A,X,Y => 16bit
0b92dc pha
0b92dd and #$00ff
0b92e0 asl a
0b92e1 asl a
0b92e2 asl a
0b92e3 asl a
0b92e4 asl a
0b92e5 clc
0b92e6 adc #$c040
0b92e9 tay
0b92ea pla
0b92eb xba
0b92ec and #$00ff
0b92ef asl a
0b92f0 asl a
0b92f1 asl a
0b92f2 asl a
0b92f3 adc #$82c0
0b92f6 tax
0b92f7 lda #$000f
0b92fa mvn $09,$7e
0b92fd inc $e5
0b92ff plb
0b9300 plp
0b9301 ply
0b9302 plx
0b9303 rtl				; exit routine



0b9304 lda $7ec260,x
0b9308 asl a
0b9309 asl a
0b930a tay
0b930b lda $7ec480,x
0b930f sta $0c02,y
0b9312 inc
0b9313 sta $0c06,y
0b9316 inc
0b9317 sta $0c0a,y
0b931a inc
0b931b sta $0c0e,y
0b931e lda #$d2
0b9320 sta $0c12,y
0b9323 sta $0c16,y
0b9326 sta $0c1a,y
0b9329 sta $0c1e,y
0b932c sta $0c22,y
0b932f sta $0c26,y
0b9332 sta $0c2a,y
0b9335 sta $0c2e,y
0b9338 lda $0c03,y
0b933b sta $0c07,y
0b933e sta $0c0b,y
0b9341 sta $0c0f,y
0b9344 inc
0b9345 inc
0b9346 sta $0c13,y
0b9349 sta $0c17,y
0b934c sta $0c1b,y
0b934f sta $0c1f,y
0b9352 sta $0c23,y
0b9355 sta $0c27,y
0b9358 sta $0c2b,y
0b935b sta $0c2f,y
0b935e rts				; exit routine



0b935f pha
0b9360 phx
0b9361 phy
0b9362 php				; save processor status to stack
0b9363 phb				; save databank to stack
0b9364 phk
0b9365 plb
0b9366 rep #$30			; set A,X,Y => 16bit
0b9368 lda $10a0
0b936b and #$000f
0b936e asl a
0b936f tay
0b9370 lda $9385,y
0b9373 tax
0b9374 ldy #$c180
0b9377 lda #$000f
0b937a phb				; save databank to stack
0b937b mvn $07,$7e
0b937e plb
0b937f plb
0b9380 plp
0b9381 ply
0b9382 plx
0b9383 pla
0b9384 rtl				; exit routine
0c8000 php
0c8001 sep #$20
0c8003 pha
0c8004 lda #$40
0c8006 trb $00d8
0c8009 lda #$40
0c800b and $00d8
0c800e beq $8009
0c8010 pla
0c8011 plp
0c8012 rtl



0c8013 php				; save processor status to stack
0c8014 phd				; save direct page to stack
0c8015 pea $0000
0c8018 pld
0c8019 rep #$30			; set A,X,Y => 16bit
0c801b phx
0c801c and #$00ff
0c801f sta $64
0c8021 asl a
0c8022 asl a
0c8023 adc $64
0c8025 tax
0c8026 sep #$20			; set A => 8bit
0c8028 lda $64
0c802a sta $00ef
0c802d lda $07ee84,x
0c8031 sta $015f
0c8034 lda $07ee85,x
0c8038 jsr $8071
0c803b sta $00b5
0c803e lda $07ee86,x
0c8042 jsr $8071
0c8045 sta $00b2
0c8048 lda $07ee87,x
0c804c jsr $8071
0c804f sta $00b4
0c8052 lda $07ee88,x
0c8056 jsr $8071
0c8059 sta $00b3
0c805c ldx #$a433
0c805f stx $17
0c8061 lda #$03
0c8063 sta $19
0c8065 jsl $009d6b
0c8069 rep #$30			; set A,X,Y => 16bit
0c806b lda $15
0c806d plx
0c806e pld
0c806f plp
0c8070 rtl				; exit routine



0c8071 beq $807f
0c8073 jsl $009776
0c8077 beq $807d
0c8079 lda #$02
0c807b bra $807f
0c807d lda #$01
0c807f rts				; exit routine



0c8080 jsl $00825c
0c8084 lda #$0000
0c8087 sta $7e3665
0c808b lda #$2100
0c808e tcd
0c808f sep #$20			; set A => 8bit
0c8091 stz $0111
0c8094 stz $00d2
0c8097 stz $00d4
0c809a lda #$08
0c809c tsb $00d2
0c809f lda #$40
0c80a1 tsb $00d6
0c80a4 lda #$62
0c80a6 sta $01
0c80a8 lda #$07
0c80aa sta $05
0c80ac lda #$80
0c80ae sta $1a
0c80b0 lda #$11
0c80b2 sta $2c
0c80b4 jsr $8d7b
0c80b7 lda $0112
0c80ba sta $4200
0c80bd cli
0c80be lda #$0f
0c80c0 sta $00aa
0c80c3 stz $0110
0c80c6 jsl $00c7b5
0c80ca jsr $8bad
0c80cd jsr $896f
0c80d0 jsl $0c8000
0c80d4 lda #$01
0c80d6 sta $05
0c80d8 lda #$62
0c80da sta $07
0c80dc lda #$69
0c80de sta $08
0c80e0 lda #$44
0c80e2 sta $0b
0c80e4 lda #$13
0c80e6 sta $2c
0c80e8 jsr $9037
0c80eb jsr $8103
0c80ee rep #$30			; set A,X,Y => 16bit
0c80f0 lda #$0001
0c80f3 sta $7e3665
0c80f7 jsl $00c7d8
0c80fb sei
0c80fc lda #$0008
0c80ff trb $00d2
0c8102 rtl				; exit routine



0c8103 lda #$0c
0c8105 sta $005a
0c8108 ldx #$90d7
0c810b stx $0058
0c810e lda #$40
0c8110 tsb $00e2
0c8113 jsl $0c8000
0c8117 lda #$07
0c8119 sta $05
0c811b jsr $87ed
0c811e jsr $81da
0c8121 jsr $88be
0c8124 jsr $8872
0c8127 jsr $87e9
0c812a lda #$40
0c812c trb $00d6
0c812f jsl $0c8000
0c8133 lda #$01
0c8135 sta $05
0c8137 stz $0e
0c8139 stz $0e
0c813b jsr $8767
0c813e jsr $8241
0c8141 rts				; exit routine



0c8142 ldx #$4156
0c8145 stx $0e08
0c8148 ldx #$5555
0c814b stx $0e0a
0c814e ldx #$5500
0c8151 stx $0e0c
0c8154 jmp $8910
0c8157 clc
0c8158 rep #$30			; set A,X,Y => 16bit
0c815a lda $0c84
0c815d adc #$0804
0c8160 sta $0cc0
0c8163 lda $0c88
0c8166 adc #$0804
0c8169 sta $0cc4
0c816c lda $0c8c
0c816f adc #$0804
0c8172 sta $0cc8
0c8175 lda $0c90
0c8178 adc #$0804
0c817b sta $0ccc
0c817e sep #$20			; set A => 8bit
0c8180 lda #$80
0c8182 jsl $0c8000
0c8186 sta $15
0c8188 lda #$08
0c818a ldx #$6225
0c818d jsr $81a5
0c8190 lda #$0c
0c8192 ldx #$622a
0c8195 jsr $81a5
0c8198 lda #$14
0c819a ldx #$6234
0c819d jsr $81a5
0c81a0 lda #$10
0c81a2 ldx #$6239
0c81a5 xba
0c81a6 lda #$00
0c81a8 rep #$30			; set A,X,Y => 16bit
0c81aa stx $16
0c81ac sta $18
0c81ae inc
0c81af sta $18
0c81b1 inc
0c81b2 sta $18
0c81b4 tay
0c81b5 txa
0c81b6 adc #$0020
0c81b9 tax
0c81ba tya
0c81bb adc #$000e
0c81be bit #$0040
0c81c1 beq $81aa
0c81c3 sep #$20			; set A => 8bit
0c81c5 rts				; exit routine



0c81c6 stz $30
0c81c8 stz $31
0c81ca rts				; exit routine



0c81cb ldx #$7002
0c81ce stx $30
0c81d0 lda #$e0
0c81d2 sta $32
0c81d4 ldx #$0110
0c81d7 stx $2c
0c81d9 rts				; exit routine



0c81da lda #$0c
0c81dc sta $005a
0c81df ldx #$81ef
0c81e2 stx $0058
0c81e5 lda #$40
0c81e7 tsb $00e2
0c81ea jsl $0c8000
0c81ee rts				; exit routine



0c81ef ldx #$2200
0c81f2 stx $00
0c81f4 lda #$07
0c81f6 sta $04
0c81f8 lda #$10
0c81fa ldy #$d974
0c81fd jsr $8224
0c8200 ldy #$d934
0c8203 jsr $8224
0c8206 jsr $8224
0c8209 jsr $8224
0c820c jsr $8224
0c820f lda #$b0
0c8211 jsr $8224
0c8214 ldy #$d934
0c8217 jsr $8224
0c821a jsr $8224
0c821d jsr $8224
0c8220 jsr $8224
0c8223 rtl				; exit routine



0c8224 pha
0c8225 sta $2121
0c8228 sty $02
0c822a ldx #$0010
0c822d stx $05
0c822f lda #$01
0c8231 sta $420b
0c8234 rep #$30			; set A,X,Y => 16bit
0c8236 tya
0c8237 adc #$0010
0c823a tay
0c823b sep #$20			; set A => 8bit
0c823d pla
0c823e adc #$10
0c8240 rts				; exit routine



0c8241 rep #$30			; set A,X,Y => 16bit
0c8243 ldx #$8667
0c8246 ldy #$0202
0c8249 lda #$0009
0c824c mvn $0c,$0c
0c824f sep #$20			; set A => 8bit
0c8251 stz $0160
0c8254 stz $0201
0c8257 ldx #$8671
0c825a lda $0000,x
0c825d inx
0c825e cmp #$01
0c8260 bcc $8297
0c8262 beq $8292
0c8264 cmp #$03
0c8266 bcc $8288
0c8268 beq $82a0
0c826a cmp #$05
0c826c beq $82a3
0c826e bcs $82a6
0c8270 ldy #$0004
0c8273 phy
0c8274 lda #$3f
0c8276 sta $32
0c8278 jsr $85db
0c827b lda #$e0
0c827d sta $32
0c827f jsr $85db
0c8282 ply
0c8283 dey
0c8284 bne $8273
0c8286 bra $825a
0c8288 lda #$3b
0c828a pha
0c828b jsr $85db
0c828e pla
0c828f dec
0c8290 bne $828a
0c8292 jsr $85db
0c8295 bra $825a
0c8297 jsr $85db
0c829a lda $0c82
0c829d bne $8297
0c829f rts				; exit routine



0c82a0 jmp $8460
0c82a3 jmp $8421
0c82a6 pha
0c82a7 and #$07
0c82a9 sta $015f
0c82ac pla
0c82ad and #$f8
0c82af cmp #$40
0c82b1 bcc $8302
0c82b3 cmp #$80
0c82b5 bcc $82f7
0c82b7 cmp #$c0
0c82b9 bcc $82cf
0c82bb sbc #$40
0c82bd sta $0161
0c82c0 rep #$30			; set A,X,Y => 16bit
0c82c2 lda $015f
0c82c5 asl a
0c82c6 asl a
0c82c7 adc #$0cbc
0c82ca jsr $83cb
0c82cd bra $825a
0c82cf sta $0161
0c82d2 rep #$30			; set A,X,Y => 16bit
0c82d4 lda $015f
0c82d7 asl a
0c82d8 asl a
0c82d9 pha
0c82da adc #$0c80
0c82dd jsr $83cb
0c82e0 rep #$30			; set A,X,Y => 16bit
0c82e2 pla
0c82e3 asl a
0c82e4 adc #$0c94
0c82e7 jsr $83cb
0c82ea rep #$30			; set A,X,Y => 16bit
0c82ec tya
0c82ed clc
0c82ee adc #$0004
0c82f1 jsr $83cb
0c82f4 jmp $825a
0c82f7 sbc #$30
0c82f9 lsr a
0c82fa lsr a
0c82fb lsr a
0c82fc sta $0200
0c82ff jmp $825a
0c8302 cmp #$08
0c8304 bne $837d
0c8306 lda $015f
0c8309 bne $831e
0c830b rep #$30			; set A,X,Y => 16bit
0c830d lda #$3c03
0c8310 trb $0e08
0c8313 lda #$0002
0c8316 tsb $0e08
0c8319 sep #$20			; set A => 8bit
0c831b jmp $825a
0c831e rep #$30			; set A,X,Y => 16bit
0c8320 lda $015f
0c8323 asl a
0c8324 asl a
0c8325 pha
0c8326 adc #$0c80
0c8329 tay
0c832a lda $0c80
0c832d sta $0000,y
0c8330 pla
0c8331 asl a
0c8332 adc #$0c94
0c8335 tay
0c8336 lda $0c94
0c8339 sta $0000,y
0c833c lda $0c98
0c833f sta $0004,y
0c8342 ldy $015f
0c8345 lda #$0003
0c8348 asl a
0c8349 asl a
0c834a dey
0c834b bne $8348
0c834d pha
0c834e trb $0e08
0c8351 and #$aaaa
0c8354 tsb $0e08
0c8357 pla
0c8358 ldy $015f
0c835b lsr a
0c835c lsr a
0c835d asl a
0c835e asl a
0c835f dey
0c8360 bne $835d
0c8362 lsr a
0c8363 lsr a
0c8364 pha
0c8365 lsr a
0c8366 lsr a
0c8367 ora $01,s
0c8369 trb $0e0a
0c836c cmp #$0003
0c836f bne $8377
0c8371 lda #$c000
0c8374 trb $0e08
0c8377 pla
0c8378 sep #$20			; set A => 8bit
0c837a jmp $825a
0c837d phx
0c837e jsr $8157
0c8381 jsr $8142
0c8384 jsr $83b1
0c8387 jsr $83b1
0c838a jsr $83b1
0c838d lda #$10
0c838f pha
0c8390 jsr $81cb
0c8393 jsr $85db
0c8396 jsr $85db
0c8399 lda #$11
0c839b sta $2c
0c839d jsr $81c6
0c83a0 jsr $85db
0c83a3 jsr $85db
0c83a6 pla
0c83a7 dec
0c83a8 bne $838f
0c83aa jsr $81cb
0c83ad plx
0c83ae jmp $825a
0c83b1 jsr $81cb
0c83b4 lda #$11
0c83b6 sta $2c
0c83b8 lda #$3f
0c83ba sta $32
0c83bc jsr $85db
0c83bf jsr $81c6
0c83c2 jsr $85db
0c83c5 jsr $85db
0c83c8 jmp $85db
0c83cb phx
0c83cc tax
0c83cd sep #$20			; set A => 8bit
0c83cf ldy $0161
0c83d2 cpy #$00b8
0c83d5 beq $83dd
0c83d7 cpy #$0089
0c83da bcs $83e8
0c83dc sec
0c83dd lda $0001,x
0c83e0 sbc $0200
0c83e3 sta $0001,x
0c83e6 bra $83fb
0c83fb cpy #$0088
0c83fe bcc $8410
0c8410 cpy #$00a8
0c8413 bcc $841e
0c841e txy
0c841f plx
0c8420 rts				; exit routine



0c8421 lda #$20
0c8423 pha
0c8424 sec
0c8425 lda $0cc1
0c8428 sbc #$04
0c842a sta $0cc1
0c842d sta $0cc5
0c8430 sta $0cc9
0c8433 sta $0ccd
0c8436 lda $0ccc
0c8439 sbc #$04
0c843b sta $0ccc
0c843e lda $0cc0
0c8441 adc #$03
0c8443 sta $0cc0
0c8446 jsr $85db
0c8449 pla
0c844a dec
0c844b bne $8423
0c844d lda #$3c
0c844f pha
0c8450 jsr $85db
0c8453 pla
0c8454 dec
0c8455 bne $844f
0c8457 stz $0e0d
0c845a stz $0e0e
0c845d jmp $825a
0c8460 phx
0c8461 ldy #$8575
0c8464 sty $0212
0c8467 ldx #$0000		; clear X
0c846a ldy #$84cb
0c846d jsr $849e
0c8470 ldy #$84cb
0c8473 jsr $849e
0c8476 ldy #$8520
0c8479 jsr $849e
0c847c ldy #$84cc
0c847f jsr $849e
0c8482 ldy #$84f6
0c8485 jsr $849e
0c8488 stz $0214
0c848b ldy #$854a
0c848e sty $0212
0c8491 ldy #$84cb
0c8494 jsr $849e
0c8497 jsr $85db
0c849a plx
0c849b jmp $825a
0c849e sty $0210
0c84a1 ldy #$85b3
0c84a4 jsr ($0210,x)
0c84a7 sec
0c84a8 lda $0c81
0c84ab sbc $0000,y
0c84ae jsr ($0212,x)
0c84b1 iny
0c84b2 cpy #$85db
0c84b5 bne $84a4
0c84b7 dey
0c84b8 dey
0c84b9 jsr ($0210,x)
0c84bc clc
0c84bd lda $0c81
0c84c0 adc $0000,y
0c84c3 jsr ($0212,x)
0c84c6 cpy #$85b2
0c84c9 bne $84b8
0c84cb rts				; exit routine



0c84cc tya
0c84cd bit #$01
0c84cf beq $84f5
0c84d1 dec $0c88
0c84d4 dec $0ca4
0c84d7 dec $0ca8
0c84da inc $0c90
0c84dd inc $0cb4
0c84e0 inc $0cb8
0c84e3 inc $0c84
0c84e6 inc $0c9c
0c84e9 inc $0ca0
0c84ec dec $0c8c
0c84ef dec $0cac
0c84f2 dec $0cb0
0c84f5 rts				; exit routine



0c84f6 tya
0c84f7 bit #$01
0c84f9 beq $851f
0c84fb inc $0c88
0c84fe inc $0ca4
0c8501 inc $0ca8
0c8504 dec $0c90
0c8507 dec $0cb4
0c850a dec $0cb8
0c850d dec $0c84
0c8510 dec $0c9c
0c8513 dec $0ca0
0c8516 inc $0c8c
0c8519 inc $0cac
0c851c inc $0cb0
0c851f rts				; exit routine



0c8520 tya
0c8521 bit #$01
0c8523 beq $8537
0c8525 dec $0c88
0c8528 dec $0ca4
0c852b dec $0ca8
0c852e inc $0c90
0c8531 inc $0cb4
0c8534 inc $0cb8
0c8537 dec $0c84
0c853a dec $0c9c
0c853d dec $0ca0
0c8540 inc $0c8c
0c8543 inc $0cac
0c8546 inc $0cb0
0c8549 rts				; exit routine



0c854a lda $0c81
0c854d pha
0c854e lda $0214
0c8551 bcs $8559
0c8553 sec
0c8554 sbc $0000,y
0c8557 bra $855d
0c8559 clc
0c855a adc $0000,y
0c855d sta $0214
0c8560 lsr a
0c8561 pha
0c8562 lda $02,s
0c8564 sec
0c8565 sbc $01,s
0c8567 jsr $8575
0c856a pla
0c856b pla
0c856c phy
0c856d ldy #$0000
0c8570 jsr $8575
0c8573 ply
0c8574 rts				; exit routine



0c8575 sec
0c8576 sta $0c81
0c8579 sta $0c85
0c857c sta $0c89
0c857f sta $0c8d
0c8582 sta $0c91
0c8585 sbc #$10
0c8587 sta $0c95
0c858a sta $0c9d
0c858d sta $0ca5
0c8590 sta $0cad
0c8593 sta $0cb5
0c8596 adc #$2f
0c8598 sta $0c99
0c859b sta $0ca1
0c859e sta $0ca9
0c85a1 sta $0cb1
0c85a4 sta $0cb9
0c85a7 tya
0c85a8 bit #$01
0c85aa beq $85b1
0c85ac phy
0c85ad jsr $85db
0c85b0 ply
0c85b1 rts				; exit routine



0c85db phk
0c85dc plb
0c85dd phx
0c85de lda $0e97
0c85e1 and #$04
0c85e3 lsr a
0c85e4 adc #$4c
0c85e6 sta $0cc2
0c85e9 sta $0cca
0c85ec eor #$02
0c85ee sta $0cc6
0c85f1 sta $0cce
0c85f4 rep #$30			; set A,X,Y => 16bit
0c85f6 lda #$0005
0c85f9 sta $020c
0c85fc stz $020e
0c85ff lda $020e
0c8602 asl a
0c8603 adc #$0c80
0c8606 tay
0c8607 ldx $020e
0c860a lda $0202,x
0c860d inc
0c860e cmp #$000e
0c8611 bne $8616
0c8613 lda #$0000
0c8616 sta $0202,x
0c8619 tax
0c861a sep #$20			; set A => 8bit
0c861c lda $8659,x
0c861f sta $0002,y
0c8622 cmp #$44
0c8624 php				; save processor status to stack
0c8625 rep #$30			; set A,X,Y => 16bit
0c8627 lda $020e
0c862a asl a
0c862b asl a
0c862c adc #$0c94
0c862f tay
0c8630 plp
0c8631 beq $863d
0c8633 lda #$48
0c8635 sta $0002,y
0c8638 sta $0006,y
0c863b bra $8647
0c863d lda #$6c
0c863f sta $0002,y
0c8642 lda #$6e
0c8644 sta $0006,y
0c8647 rep #$30			; set A,X,Y => 16bit
0c8649 inc $020e
0c864c inc $020e
0c864f dec $020c
0c8652 bne $85ff
0c8654 jsr $8910
0c8657 plx
0c8658 rts				; exit routine



0c8767 rep #$30			; set A,X,Y => 16bit
0c8769 ldx #$8779
0c876c ldy #$0c80
0c876f lda #$006f
0c8772 mvn $0c,$00
0c8775 jsr $8910
0c8778 rts				; exit routine



0c87e9 stz $0111
0c87ec rts				; exit routine



0c87ed rep #$30			; set A,X,Y => 16bit
0c87ef pea $0c7f
0c87f2 plb
0c87f3 ldx #$4000
0c87f6 ldy #$001e
0c87f9 lda #$00c0
0c87fc jsl $009994
0c8800 plb
0c8801 sep #$20			; set A => 8bit
0c8803 stz $4204
0c8806 ldx #$00ce
0c8809 ldy #$0082
0c880c tya
0c880d asl a
0c880e sta $4205
0c8811 lda #$20
0c8813 jsl $009726
0c8817 rep #$30			; set A,X,Y => 16bit
0c8819 lda $4214
0c881c sta $7f0010,x
0c8820 sep #$20			; set A => 8bit
0c8822 iny
0c8823 inx
0c8824 inx
0c8825 cpy #$00e8
0c8828 bne $880c
0c882a rep #$30			; set A,X,Y => 16bit
0c882c ldx #$886b
0c882f ldy #$0000
0c8832 lda #$0009
0c8835 mvn $0c,$7f
0c8838 phk
0c8839 plb
0c883a sep #$20			; set A => 8bit
0c883c lda #$42
0c883e sta $4310
0c8841 sta $4320
0c8844 lda #$1b
0c8846 sta $4311
0c8849 lda #$1e
0c884b sta $4321
0c884e ldx #$0000		; clear X
0c8851 stx $4312
0c8854 stx $4322
0c8857 lda #$7f
0c8859 sta $4314
0c885c sta $4324
0c885f sta $4317
0c8862 sta $4327
0c8865 lda #$06
0c8867 sta $0111
0c886a rts				; exit routine



0c8872 lda #$f7
0c8874 ldx #$0000		; clear X
0c8877 phk
0c8878 plb
0c8879 pha
0c887a jsl $0c8000
0c887e sta $0e
0c8880 stz $0e
0c8882 lda $88b0,x
0c8885 inx
0c8886 phx
0c8887 jsr $88eb
0c888a plx
0c888b cpx #$000e
0c888e bne $8893
0c8890 ldx #$0000		; clear X
0c8893 pla
0c8894 cmp #$39
0c8896 bcc $88ab
0c8898 cmp #$59
0c889a bcc $88a7
0c889c cmp #$79
0c889e bcc $88a3
0c88a0 dec
0c88a1 bra $8877
0c88a3 sbc #$01
0c88a5 bra $8877
0c88a7 sbc #$03
0c88a9 bra $8877
0c88ab sbc #$05
0c88ad bcs $8877
0c88af rts				; exit routine



0c88be phk
0c88bf plb
0c88c0 clc
0c88c1 lda #$84
0c88c3 jsl $0c8000
0c88c7 stz $15
0c88c9 sta $1f
0c88cb stz $1f
0c88cd lda #$18
0c88cf sta $20
0c88d1 lda #$01
0c88d3 sta $20
0c88d5 stz $1c
0c88d7 stz $1c
0c88d9 stz $1d
0c88db stz $1d
0c88dd lda #$04
0c88df sta $0d
0c88e1 stz $0d
0c88e3 lda #$f8
0c88e5 sta $0e
0c88e7 stz $0e
0c88e9 lda #$11
0c88eb clc
0c88ec ldx #$0f8f
0c88ef jsr $88f8
0c88f2 jsr $88f8
0c88f5 jsr $88f8
0c88f8 stx $16
0c88fa sta $18
0c88fc inc
0c88fd sta $18
0c88ff inc
0c8900 sta $18
0c8902 adc #$0e
0c8904 pha
0c8905 rep #$30			; set A,X,Y => 16bit
0c8907 txa
0c8908 adc #$0080
0c890b tax
0c890c sep #$20			; set A => 8bit
0c890e pla
0c890f rts				; exit routine



0c8910 phk
0c8911 plb
0c8912 sep #$20			; set A => 8bit
0c8914 lda #$0c
0c8916 sta $005a
0c8919 ldx #$8929
0c891c stx $0058
0c891f lda #$40
0c8921 tsb $00e2
0c8924 jsl $0c8000
0c8928 rts				; exit routine



0c8929 ldx #$0000		; clear X
0c892c stx $2102
0c892f ldx #$0400
0c8932 stx $50
0c8934 ldx #$0c00
0c8937 stx $52
0c8939 lda #$00
0c893b sta $54
0c893d ldx #$0220
0c8940 stx $55
0c8942 lda #$20
0c8944 sta $420b
0c8947 rtl				; exit routine



; ROUTINE: Clear OAM ($0c:8948)
;		fills all $220 bytes of OAM from $00:0c00+ on DMA channel 5
;		sets data bank to $0c
;		A becomes 8bit
; known uses:
;		fill OAM with $55 - moves all sprites small and to the left of the screen (can't see any sprites)
; XY are 16 bit
0c8948 sep #$20			; set A => 8bit
0c894a ldx #$0000		; destination address is $0000 (start of OAM)
0c894d stx $2102		; set the OAM address register [OAMADDL/OAMADDH]
0c8950 ldx #$0400		; $00 means cpu=>ppu, auto increment, absolute, write same address twice LH
						; $04 means destination is $2104 OAM data register [OAMDATA]
0c8953 stx $4350		; write dma control and destination registers
						; setup source => $00:0c00
0c8956 ldx #$0c00			; lower 16 bits of source address
0c8959 stx $4352			; set source offset to $0c00
0c895c lda #$00				; upper 8 bits of source address
0c895e sta $4354			; set source bank to $00
0c8961 ldx #$0220		; copying $0220 bytes, so all of OAM will be written
0c8964 stx $4355		; set DMA transfer size to $0220
0c8967 lda #$20			; bitmask for DMA channel 5
0c8969 sta $420b		; start DMA transfer on channel 5
0c896c phk				; copy program bank $0c
0c896d plb					; into databank
0c896e rts				; exit routine















0c896f lda #$d4
0c8971 sta $0e
0c8973 lda #$ff
0c8975 sta $0e
0c8977 ldx #$8b86
0c897a ldy #$8b96
0c897d lda $0000,y
0c8980 beq $899b
0c8982 phy
0c8983 jsl $0c8000
0c8987 jsr $8a78
0c898a ply
0c898b tya
0c898c sec
0c898d sbc #$ab
0c898f asl a
0c8990 sta $0e
0c8992 beq $8996
0c8994 lda #$ff
0c8996 sta $0e
0c8998 iny
0c8999 bra $897d
0c899b lda #$1e
0c899d jsl $0c8000
0c89a1 pha
0c89a2 jsr $8a76
0c89a5 pla
0c89a6 dec
0c89a7 bne $899d
0c89a9 ldy #$0101
0c89ac sty $0062
0c89af ldy $0062
0c89b2 phy
0c89b3 jsr $8a3f
0c89b6 ply
0c89b7 sty $0062
0c89ba inc $0062
0c89bd inc $0063
0c89c0 ldy $0062
0c89c3 phy
0c89c4 jsr $8a3f
0c89c7 ply
0c89c8 sty $0062
0c89cb inc $0062
0c89ce inc $0063
0c89d1 lda $0062
0c89d4 cmp #$0c
0c89d6 beq $89e8
0c89d8 ldy $0062
0c89db phy
0c89dc jsr $8a3f
0c89df ply
0c89e0 sty $0062
0c89e3 inc $0062
0c89e6 bra $89af
0c89e8 jsl $0c8000
0c89ec jsr $8a76
0c89ef cpx #$8b66
0c89f2 bne $89e8
0c89f4 jsl $0c8000
0c89f8 jsr $8a76
0c89fb cpx #$8b66
0c89fe bne $89f4
0c8a00 jsr $8910
0c8a03 lda #$30
0c8a05 sta $0505
0c8a08 ldx #$2100
0c8a0b stx $30
0c8a0d lda #$ff
0c8a0f sta $32
0c8a11 lda #$08
0c8a13 ldy #$000c
0c8a16 ldx #$0c04
0c8a19 pha
0c8a1a phy
0c8a1b phx
0c8a1c dec $0000,x
0c8a1f inx
0c8a20 inx
0c8a21 inx
0c8a22 inx
0c8a23 dey
0c8a24 bne $8a1c
0c8a26 jsr $8910
0c8a29 jsl $0c8000
0c8a2d plx
0c8a2e ply
0c8a2f lda $01,s
0c8a31 dec
0c8a32 asl a
0c8a33 asl a
0c8a34 ora #$e0
0c8a36 sta $32
0c8a38 pla
0c8a39 dec
0c8a3a bne $8a19
0c8a3c stz $31
0c8a3e rts				; exit routine



0c8a3f rep #$30			; set A,X,Y => 16bit
0c8a41 sec
0c8a42 lda $0062
0c8a45 and #$00ff
0c8a48 eor #$ffff
0c8a4b adc #$040f
0c8a4e sta $0400
0c8a51 lda $0063
0c8a54 and #$00ff
0c8a57 eor #$ffff
0c8a5a adc #$603f
0c8a5d sta $0402
0c8a60 sep #$20			; set A => 8bit
0c8a62 lda #$0c
0c8a64 sta $005a
0c8a67 ldy #$8b0c
0c8a6a sty $0058
0c8a6d lda #$40
0c8a6f tsb $00e2
0c8a72 jsl $0c8000
0c8a76 lda #$30
0c8a78 sta $4202
0c8a7b sta $0064
0c8a7e jsr $8ac8
0c8a81 sty $0062
0c8a84 inx
0c8a85 inx
0c8a86 jsr $8ac8
0c8a89 sty $0064
0c8a8c inx
0c8a8d inx
0c8a8e cpx #$8b96
0c8a91 bne $8a96
0c8a93 ldx #$8b66
0c8a96 jsl $0c8000
0c8a9a lda $0062
0c8a9d sta $1b
0c8a9f lda $0063
0c8aa2 sta $1b
0c8aa4 lda $0062
0c8aa7 sta $1e
0c8aa9 lda $0063
0c8aac sta $1e
0c8aae lda $0064
0c8ab1 sta $1c
0c8ab3 xba
0c8ab4 lda $0065
0c8ab7 sta $1c
0c8ab9 xba
0c8aba rep #$30			; set A,X,Y => 16bit
0c8abc eor #$ffff
0c8abf inc
0c8ac0 sep #$20			; set A => 8bit
0c8ac2 sta $1d
0c8ac4 xba
0c8ac5 sta $1d
0c8ac7 rts				; exit routine



0c8ac8 lda $0001,x
0c8acb bmi $8af1
0c8acd bne $8ae6
0c8acf lda $0000,x
0c8ad2 jsl $00971e
0c8ad6 ldy $4216
0c8ad9 sty $4204
0c8adc lda #$30
0c8ade jsl $009726
0c8ae2 ldy $4214
0c8ae5 rts				; exit routine



0c8ae6 stz $4204
0c8ae9 lda $0064
0c8aec sta $4205
0c8aef bra $8adc
0c8af1 lda $0000,x
0c8af4 beq $8b07
0c8af6 eor #$ff
0c8af8 inc
0c8af9 jsr $8ad2
0c8afc rep #$30			; set A,X,Y => 16bit
0c8afe tya
0c8aff eor #$ffff
0c8b02 inc
0c8b03 tay
0c8b04 sep #$20			; set A => 8bit
0c8b06 rts				; exit routine



0c8b07 jsr $8ae6
0c8b0a bra $8afc
0c8b0c ldy #$1800
0c8b0f sty $00
0c8b11 stz $15
0c8b13 lda #$7f
0c8b15 sta $04
0c8b17 ldy $0402
0c8b1a ldx #$0008
0c8b1d stx $0064
0c8b20 ldx #$0414
0c8b23 lda $0063
0c8b26 jsr $8b3c
0c8b29 ldx #$000b
0c8b2c stx $0064
0c8b2f ldy #$6000
0c8b32 ldx $0400
0c8b35 lda $0062
0c8b38 jsr $8b3c
0c8b3b rtl				; exit routine



0c8b3c clc
0c8b3d xba
0c8b3e lda #$05
0c8b40 stx $2116
0c8b43 xba
0c8b44 sta $05
0c8b46 stz $06
0c8b48 sty $02
0c8b4a pha
0c8b4b lda #$01
0c8b4d sta $420b
0c8b50 pla
0c8b51 rep #$30			; set A,X,Y => 16bit
0c8b53 pha
0c8b54 txa
0c8b55 adc #$0080
0c8b58 tax
0c8b59 tya
0c8b5a adc $0064
0c8b5d tay
0c8b5e pla
0c8b5f sep #$20			; set A => 8bit
0c8b61 xba
0c8b62 dec
0c8b63 bne $8b40
0c8b65 rts				; exit routine



0c8bad lda #$18
0c8baf sta $0500
0c8bb2 rep #$30			; set A,X,Y => 16bit
0c8bb4 ldx #$8ce2
0c8bb7 ldy #$0d00
0c8bba lda #$0037
0c8bbd mvn $0c,$00
0c8bc0 ldy #$0e10
0c8bc3 lda #$0003
0c8bc6 mvn $0c,$00
0c8bc9 ldx #$8c5e
0c8bcc ldy #$0c04
0c8bcf lda #$007b
0c8bd2 mvn $0c,$00
0c8bd5 ldy #$0e00
0c8bd8 lda #$0007
0c8bdb mvn $0c,$00
0c8bde sep #$20			; set A => 8bit
0c8be0 pea $0c7f
0c8be3 plb
0c8be4 ldy #$6000
0c8be7 lda #$40
0c8be9 clc
0c8bea ldx #$000b
0c8bed sta $0000,y
0c8bf0 inc
0c8bf1 iny
0c8bf2 dex
0c8bf3 bne $8bed
0c8bf5 adc #$05
0c8bf7 cmp #$90
0c8bf9 bne $8bea
0c8bfb ldy #$6037
0c8bfe lda #$a0
0c8c00 clc
0c8c01 ldx #$0008
0c8c04 sta $0000,y
0c8c07 inc
0c8c08 iny
0c8c09 dex
0c8c0a bne $8c04
0c8c0c adc #$08
0c8c0e cmp #$f0
0c8c10 bne $8c01
0c8c12 plb
0c8c13 clc
0c8c14 jsl $0c8000
0c8c18 stz $15
0c8c1a lda #$8c
0c8c1c sta $1f
0c8c1e stz $1f
0c8c20 lda #$50
0c8c22 sta $20
0c8c24 stz $20
0c8c26 lda #$01
0c8c28 sta $1b
0c8c2a stz $1b
0c8c2c sta $1e
0c8c2e stz $1e
0c8c30 ldx #$0285
0c8c33 ldy #$8d1e
0c8c36 phx
0c8c37 stx $16
0c8c39 lda #$00
0c8c3b xba
0c8c3c lda $0000,y
0c8c3f tax
0c8c40 lda $0001,y
0c8c43 sta $18
0c8c45 inc
0c8c46 dex
0c8c47 bne $8c43
0c8c49 lda $0002,y
0c8c4c beq $8c5c
0c8c4e iny
0c8c4f iny
0c8c50 iny
0c8c51 rep #$30			; set A,X,Y => 16bit
0c8c53 adc $01,s
0c8c55 sta $01,s
0c8c57 tax
0c8c58 sep #$20			; set A => 8bit
0c8c5a bra $8c37
0c8c5c plx
0c8c5d rts				; exit routine



0c8d7b php				; save processor status to stack
0c8d7c phd				; save direct page to stack
0c8d7d rep #$30			; set A,X,Y => 16bit
0c8d7f lda #$4300
0c8d82 tcd				; set direct page to $4300
0c8d83 stz $2116		; 
0c8d86 sep #$20			; set A => 8bit
0c8d88 lda #$80
0c8d8a sta $2115
0c8d8d lda #$00
0c8d8f jsr $8f98
0c8d92 lda #$80
0c8d94 jsr $8f98
0c8d97 lda #$c0
0c8d99 jsr $8f98

; make $220 bytes of $55, and use it to clear OAM
; data bank should be $00
0c8d9c rep #$30			; set A,X,Y => 16bit
0c8d9e lda #$5555		; using $5555 as the filler
0c8da1 sta $0c00		; set first two bytes
0c8da4 ldx #$0c00		; start copying from $0c02
0c8da7 ldy #$0c02		; destination address is source address + $02
0c8daa lda #$021d		; only need $21d more bytes
0c8dad mvn $00,$00		; copy until all $220 bytes filled
0c8db0 jsr $8948		; call routine "Clear OAM ($0c:8948)"
						; A is now 8bit, databank is now $0c

0c8db3 ldx #$1809
0c8db6 stx $00
0c8db8 ldx #$8f12
0c8dbb stx $02
0c8dbd lda #$0c
0c8dbf sta $04
0c8dc1 ldx #$0000		; clear X
0c8dc4 stx $05
0c8dc6 lda #$01
0c8dc8 sta $420b
0c8dcb jsr $90f9
0c8dce jsr $9142
0c8dd1 ldx #$1801
0c8dd4 stx $00
0c8dd6 ldx #$4000
0c8dd9 stx $2116
0c8ddc ldx #$2000
0c8ddf stx $02
0c8de1 lda #$7f
0c8de3 sta $04
0c8de5 ldx #$1000
0c8de8 stx $05
0c8dea lda #$01
0c8dec sta $420b
0c8def lda #$0c
0c8df1 sta $04
0c8df3 ldy #$5100
0c8df6 ldx #$8f14
0c8df9 rep #$30			; set A,X,Y => 16bit
0c8dfb sty $2116
0c8dfe lda $0000,x
0c8e01 and #$00ff
0c8e04 asl a
0c8e05 asl a
0c8e06 asl a
0c8e07 asl a
0c8e08 asl a
0c8e09 sta $05
0c8e0b lda $0001,x
0c8e0e and #$00ff
0c8e11 asl a
0c8e12 asl a
0c8e13 asl a
0c8e14 asl a
0c8e15 asl a
0c8e16 adc #$aa4c
0c8e19 sta $02
0c8e1b lda $0002,x
0c8e1e and #$00ff
0c8e21 asl a
0c8e22 asl a
0c8e23 asl a
0c8e24 asl a
0c8e25 phy
0c8e26 adc $01,s
0c8e28 tay
0c8e29 pla
0c8e2a sep #$20			; set A => 8bit
0c8e2c lda #$01
0c8e2e sta $420b
0c8e31 lda $0002,x
0c8e34 php				; save processor status to stack
0c8e35 inx
0c8e36 inx
0c8e37 inx
0c8e38 plp
0c8e39 bne $8df9
0c8e3b rep #$30			; set A,X,Y => 16bit
0c8e3d lda #$0000
0c8e40 tcd
0c8e41 ldx #$aa4c
0c8e44 ldy #$0000
0c8e47 lda #$0d5f
0c8e4a mvn $0c,$7f
0c8e4d ldx #$0000		; clear X
0c8e50 lda #$0400
0c8e53 pha
0c8e54 sta $002116
0c8e58 lda $0c8f14,x
0c8e5c and #$00ff
0c8e5f tay
0c8e60 lda $0c8f14,x
0c8e64 and #$ff00
0c8e67 lsr a
0c8e68 lsr a
0c8e69 lsr a
0c8e6a adc #$0000
0c8e6d phx
0c8e6e tax
0c8e6f phy
0c8e70 jsr $8fb4
0c8e73 ply
0c8e74 dey
0c8e75 bne $8e6f
0c8e77 plx
0c8e78 lda $0c8f15,x
0c8e7c and #$ff00
0c8e7f beq $8e8c
0c8e81 inx
0c8e82 inx
0c8e83 inx
0c8e84 lsr a
0c8e85 lsr a
0c8e86 adc $01,s
0c8e88 sta $01,s
0c8e8a bra $8e54
0c8e8c pla
0c8e8d phk
0c8e8e plb
0c8e8f jsr $8ea8
0c8e92 sep #$20			; set A => 8bit
0c8e94 ldx #$3fc0
0c8e97 stx $2116
0c8e9a ldx #$0040
0c8e9d lda #$10
0c8e9f sta $2119
0c8ea2 dex
0c8ea3 bne $8e9f
0c8ea5 pld
0c8ea6 plp
0c8ea7 rts				; exit routine



0c8ea8 ldy #$4800
0c8eab sty $2116
0c8eae ldx #$8edb
0c8eb1 ldy #$0008
0c8eb4 jsr $8fe9
0c8eb7 ldy #$4a00
0c8eba sty $2116
0c8ebd ldy #$0010
0c8ec0 jsr $8fe9
0c8ec3 ldy #$4c00
0c8ec6 sty $2116
0c8ec9 ldy #$0010
0c8ecc jsr $8fe9
0c8ecf ldy #$4e10
0c8ed2 sty $2116
0c8ed5 ldy #$000f
0c8ed8 jmp $8fe9



; ROUTINE: Load title screen colors to CGRAM ($0c:8f98)
; parameters:
;		A => the starting color index
;		$0cb6ec to $0cb70d => color data to be loaded, $22 bytes
; called with:
;		A => $00, $80, and $c0
; known uses:
;		load palettes $0, $8, and $c with the same colors for the title screen sprites
; A is 8bit, XY are 16 bit
; D is $4300 so the writes are to dma registers
0c8f98 sta $2121		; set CGRAM address 
0c8f9b ldx #$2200		; $00 means cpu=>ppu, auto increment, absolute, write same address twice LH
						; $22 means destination is $2122 CGRAM (color palette)
0c8f9e stx $00			; address is $4300, write dma control and destination registers
						; setup source => $0c:b6ec
0c8fa0 ldx #$b6ec			; lower 16 bits of source address
0c8fa3 stx $02				; address is $4302, set source offset to $b6ec
0c8fa5 lda #$0c				; lower 16 bits of source address
0c8fa7 sta $04				; address is $4304, set source bank to $0c
0c8fa9 ldx #$0022		; we're going to copy $0022 bytes
0c8fac stx $05			; address is $4305, set DMA transfer size to $0022
0c8fae lda #$01			; bitmask for DMA channel 0
0c8fb0 sta $420b		; start DMA transfer on channel 0
0c8fb3 rts				; exit routine



; {{ NO GAP }}



0c8fb4 sep #$20			; set A => 8bit
0c8fb6 lda #$08
0c8fb8 pha
0c8fb9 ldy $0010,x
0c8fbc sty $64
0c8fbe ldy $0000,x
0c8fc1 sty $62
0c8fc3 ldy #$0008
0c8fc6 asl $65
0c8fc8 rol a
0c8fc9 asl $64
0c8fcb rol a
0c8fcc asl $63
0c8fce rol a
0c8fcf asl $62
0c8fd1 rol a
0c8fd2 and #$0f
0c8fd4 sta $002119
0c8fd8 dey
0c8fd9 bne $8fc6
0c8fdb inx
0c8fdc inx
0c8fdd pla
0c8fde dec
0c8fdf bne $8fb8
0c8fe1 rep #$30			; set A,X,Y => 16bit
0c8fe3 txa
0c8fe4 adc #$0010
0c8fe7 tax
0c8fe8 rts				; exit routine



0c8fe9 lda $0000,x
0c8fec jsr $8ff4
0c8fef inx
0c8ff0 dey
0c8ff1 bne $8fe9
0c8ff3 rts				; exit routine



0c8ff4 phy
0c8ff5 phx
0c8ff6 pha
0c8ff7 and #$00e0
0c8ffa asl a
0c8ffb asl a
0c8ffc asl a
0c8ffd asl a
0c8ffe sta $64
0c9000 pla
0c9001 and #$001f
0c9004 asl a
0c9005 ora $64
0c9007 ldy #$0008
0c900a tax
0c900b lda $078031,x
0c900f and #$00ff
0c9012 sta $2118
0c9015 txa
0c9016 adc #$0040
0c9019 dey
0c901a bne $900a
0c901c stz $2118
0c901f stz $2118
0c9022 stz $2118
0c9025 stz $2118
0c9028 stz $2118
0c902b stz $2118
0c902e stz $2118
0c9031 stz $2118
0c9034 plx
0c9035 ply
0c9036 rts				; exit routine



0c9037 php				; save processor status to stack
0c9038 phd				; save direct page to stack
0c9039 rep #$30			; set A,X,Y => 16bit
0c903b lda #$0000
0c903e tcd
0c903f ldx #$4000
0c9042 stx $5f
0c9044 ldx #$7f40
0c9047 stx $60
0c9049 ldx #$2000
0c904c lda #$0080
0c904f pea $007f
0c9052 plb
0c9053 pha
0c9054 jsr $9099
0c9057 pla
0c9058 dec
0c9059 bne $9053
0c905b plb
0c905c sep #$20			; set A => 8bit
0c905e lda #$0c
0c9060 sta $005a
0c9063 ldx #$9075
0c9066 stx $0058
0c9069 lda #$40
0c906b tsb $00e2
0c906e jsl $0c8000
0c9072 pld
0c9073 plp
0c9074 rts				; exit routine



0c9075 lda #$80
0c9077 sta $2115
0c907a ldx #$0440
0c907d stx $2116
0c9080 ldx #$1900
0c9083 stx $00
0c9085 ldx #$4000
0c9088 stx $02
0c908a lda #$7f
0c908c sta $04
0c908e ldx #$2000
0c9091 stx $05
0c9093 lda #$01
0c9095 sta $420b
0c9098 rtl				; exit routine



0c9099 sep #$20			; set A => 8bit
0c909b lda #$08
0c909d pha
0c909e ldy $0010,x
0c90a1 sty $64
0c90a3 ldy $0000,x
0c90a6 sty $62
0c90a8 ldy #$0008
0c90ab asl $65
0c90ad rol a
0c90ae asl $64
0c90b0 rol a
0c90b1 asl $63
0c90b3 rol a
0c90b4 asl $62
0c90b6 rol a
0c90b7 and #$0f
0c90b9 beq $90bd
0c90bb ora #$10
0c90bd sta [$5f]
0c90bf rep #$30			; set A,X,Y => 16bit
0c90c1 inc $5f
0c90c3 sep #$20			; set A => 8bit
0c90c5 dey
0c90c6 bne $90ab
0c90c8 inx
0c90c9 inx
0c90ca pla
0c90cb dec
0c90cc bne $909d
0c90ce rep #$30			; set A,X,Y => 16bit
0c90d0 clc
0c90d1 txa
0c90d2 adc #$0010
0c90d5 tax
0c90d6 rts				; exit routine



0c90d7 stz $2115
0c90da ldx #$0000		; clear X
0c90dd stx $2116
0c90e0 ldx #$1808
0c90e3 stx $00
0c90e5 ldx #$8252
0c90e8 stx $02
0c90ea lda #$00
0c90ec sta $04
0c90ee ldx #$2000
0c90f1 stx $05
0c90f3 lda #$01
0c90f5 sta $420b
0c90f8 rtl				; exit routine



0c90f9 stz $2115
0c90fc ldx #$6000
0c90ff stx $2116
0c9102 ldx #$1808
0c9105 stx $4300
0c9108 ldx #$9140
0c910b stx $4302
0c910e lda #$0c
0c9110 sta $4304
0c9113 ldx #$1000
0c9116 stx $4305
0c9119 lda #$01
0c911b sta $420b
0c911e lda #$80
0c9120 sta $2115
0c9123 ldx #$6000
0c9126 stx $2116
0c9129 lda #$19
0c912b sta $4301
0c912e ldx #$9141
0c9131 stx $4302
0c9134 ldx #$1000
0c9137 stx $4305
0c913a lda #$01
0c913c sta $420b
0c913f rts				; exit routine



0c9142 php				; save processor status to stack
0c9143 phd				; save direct page to stack
0c9144 rep #$30			; set A,X,Y => 16bit
0c9146 lda #$0000
0c9149 tcd
0c914a jsr $9318
0c914d jsr $92eb
0c9150 jsr $9161
0c9153 lda #$0010
0c9156 sta $7f2f9c
0c915a sta $7f2dd2
0c915e pld
0c915f plp
0c9160 rts				; exit routine



0c9161 ldx #$0000		; clear X
0c9164 ldy #$2000
0c9167 lda #$2000
0c916a jsl $009994
0c916e jsr $91af
0c9171 jsr $9197
0c9174 jsr $9247
0c9177 jsr $91b7
0c917a jsr $919f
0c917d jsr $929e
0c9180 jsr $91bf
0c9183 jsr $9247
0c9186 jsr $91c7
0c9189 jsr $91a7
0c918c jsr $9247
0c918f ldy #$24c0
0c9192 ldx #$9400
0c9195 bra $91cd
0c9197 ldy #$2080
0c919a ldx #$93ca
0c919d bra $91cd
0c919f ldy #$2480
0c91a2 ldx #$93eb
0c91a5 bra $91cd
0c91a7 ldy #$20c0
0c91aa ldx #$9410
0c91ad bra $91cd
0c91af ldy #$2000
0c91b2 ldx #$9346
0c91b5 bra $91cd
0c91b7 ldy #$2b80
0c91ba ldx #$9392
0c91bd bra $91cd
0c91bf ldy #$2ba0
0c91c2 ldx #$9392
0c91c5 bra $91cd
0c91c7 ldy #$2040
0c91ca ldx #$9396
0c91cd phk
0c91ce plb
0c91cf lda $0000,x
0c91d2 and #$00ff
0c91d5 cmp #$0080
0c91d8 bcs $91e8
0c91da asl a
0c91db asl a
0c91dc asl a
0c91dd asl a
0c91de asl a
0c91df phx
0c91e0 tax
0c91e1 jsr $91ff
0c91e4 plx
0c91e5 inx
0c91e6 bra $91cd
0c91e8 cmp #$00ff
0c91eb beq $91fe
0c91ed and #$007f
0c91f0 asl a
0c91f1 asl a
0c91f2 asl a
0c91f3 asl a
0c91f4 asl a
0c91f5 sta $64
0c91f7 tya
0c91f8 adc $64
0c91fa tay
0c91fb inx
0c91fc bra $91cd
0c91fe rts				; exit routine



0c91ff sep #$20			; set A => 8bit
0c9201 lda #$08
0c9203 sta $62
0c9205 pea $7f00
0c9208 plb
0c9209 plb
0c920a lda $0000,x
0c920d ora $0001,x
0c9210 ora $0010,x
0c9213 eor #$ff
0c9215 sta $64
0c9217 and $0000,y
0c921a ora $0000,x
0c921d sta $0000,y
0c9220 lda $64
0c9222 and $0001,y
0c9225 ora $0001,x
0c9228 sta $0001,y
0c922b lda $64
0c922d and $0010,y
0c9230 ora $0010,x
0c9233 sta $0010,y
0c9236 inx
0c9237 inx
0c9238 iny
0c9239 iny
0c923a dec $62
0c923c bne $920a
0c923e rep #$30			; set A,X,Y => 16bit
0c9240 clc
0c9241 tya
0c9242 adc #$0010
0c9245 tay
0c9246 rts				; exit routine



0c9247 pea $7f00
0c924a plb
0c924b plb
0c924c clc
0c924d lda #$001e
0c9250 sta $62
0c9252 ldx #$0000		; clear X
0c9255 jsr $9260
0c9258 jsr $9260
0c925b dec $62
0c925d bne $9255
0c925f rts				; exit routine



0c9260 lda $0000,x
0c9263 tay
0c9264 lda $000e,x
0c9267 sta $0000,x
0c926a tya
0c926b sta $000e,x
0c926e lda $0002,x
0c9271 tay
0c9272 lda $000c,x
0c9275 sta $0002,x
0c9278 tya
0c9279 sta $000c,x
0c927c lda $0004,x
0c927f tay
0c9280 lda $000a,x
0c9283 sta $0004,x
0c9286 tya
0c9287 sta $000a,x
0c928a lda $0006,x
0c928d tay
0c928e lda $0008,x
0c9291 sta $0006,x
0c9294 tya
0c9295 sta $0008,x
0c9298 txa
0c9299 adc #$0010
0c929c tax
0c929d rts				; exit routine



0c929e pea $7f00
0c92a1 plb
0c92a2 plb
0c92a3 ldy #$001e
0c92a6 ldx #$0000		; clear X
0c92a9 phy
0c92aa ldy #$0010
0c92ad jsr $92c2
0c92b0 dey
0c92b1 bne $92ad
0c92b3 ldy #$0008
0c92b6 jsr $92c2
0c92b9 inx
0c92ba dey
0c92bb bne $92b6
0c92bd ply
0c92be dey
0c92bf bne $92a9
0c92c1 rts				; exit routine



0c92c2 sep #$20			; set A => 8bit
0c92c4 lda $0000,x
0c92c7 lsr a
0c92c8 lsr a
0c92c9 rol $0000,x
0c92cc lsr a
0c92cd rol $0000,x
0c92d0 lsr a
0c92d1 rol $0000,x
0c92d4 lsr a
0c92d5 rol $0000,x
0c92d8 lsr a
0c92d9 rol $0000,x
0c92dc lsr a
0c92dd rol $0000,x
0c92e0 lsr a
0c92e1 rol $0000,x
0c92e4 asl $0000,x
0c92e7 inx
0c92e8 rep #$30			; set A,X,Y => 16bit
0c92ea rts				; exit routine



0c92eb clc
0c92ec lda #$001e
0c92ef sta $62
0c92f1 lda #$0000
0c92f4 adc #$0018
0c92f7 tax
0c92f8 adc #$0008
0c92fb tay
0c92fc pha
0c92fd lda #$0008
0c9300 sta $64
0c9302 dex
0c9303 dey
0c9304 dey
0c9305 lda $0000,x
0c9308 and #$00ff
0c930b sta $0000,y
0c930e dec $64
0c9310 bne $9302
0c9312 pla
0c9313 dec $62
0c9315 bne $92f4
0c9317 rts				; exit routine



0c9318 clc
0c9319 ldx #$e220
0c931c ldy #$0000
0c931f lda #$0004
0c9322 jsr $9334
0c9325 ldx #$e490
0c9328 lda #$0006
0c932b jsr $9334
0c932e ldx #$fcc0
0c9331 lda #$0014
0c9334 sta $62
0c9336 lda #$0017
0c9339 mvn $04,$7f
0c933c tya
0c933d adc #$0008
0c9340 tay
0c9341 dec $62
0c9343 bne $9336
0c9345 rts				; exit routine



; MISSING: $0c9346-$0cffff  ($6CB9 bytes)



; END OF BANK 0c



; START OF BANK 0d


0d8000 jmp $802c

0d8004 jmp $8147


0d802c phb				; save databank to stack
0d802d phd				; save direct page to stack
0d802e php				; save processor status to stack
0d802f rep #$20			; set A => 16bit
0d8031 rep #$10			; set X,Y => 16bit
0d8033 pha
0d8034 phx
0d8035 phy
0d8036 sep #$20			; set A => 8bit
0d8038 lda #$00
0d803a pha
0d803b plb
0d803c ldx #$0600
0d803f phx
0d8040 pld
0d8041 ldx #$bbaa
0d8044 cpx $2140
0d8047 beq $8077
0d8049 ldy $f8
0d804b beq $8077
0d804d cpy $48
0d804f bne $8077
0d8051 lda #$f0
0d8053 cmp $00
0d8055 bne $8077
0d8077 cpx $2140
0d807a bne $8077
0d807c ldx #$0000		; clear X
0d807f lda $0d8014
0d8083 sta $2142
0d8086 lda $0d8015
0d808a sta $2143
0d808d lda #$01
0d808f sta $2141
0d8092 lda #$cc
0d8094 sta $2140
0d8097 cmp $2140
0d809a bne $8097
0d809c lda #$00
0d809e xba
0d809f lda $0d8008,x
0d80a3 sta $14
0d80a5 lda $0d8009,x
0d80a9 sta $15
0d80ab lda #$0d
0d80ad sta $16
0d80af ldy #$0000
0d80b2 lda [$14],y
0d80b4 clc
0d80b5 adc #$02
0d80b7 sta $10
0d80b9 iny
0d80ba lda [$14],y
0d80bc adc #$00
0d80be sta $11
0d80c0 iny
0d80c1 lda [$14],y
0d80c3 sta $2141
0d80c6 xba
0d80c7 sta $2140
0d80ca cmp $2140
0d80cd bne $80ca
0d80cf inc
0d80d0 xba
0d80d1 iny
0d80d2 cpy $10
0d80d4 bne $80c1
0d80d6 xba
0d80d7 inc
0d80d8 inc
0d80d9 inc
0d80da bne $80dd
0d80dd inx
0d80de inx
0d80df cpx #$000c
0d80e2 beq $8101
0d80e4 xba
0d80e5 lda $0d8014,x
0d80e9 sta $2142
0d80ec lda $0d8015,x
0d80f0 sta $2143
0d80f3 xba
0d80f4 sta $2141
0d80f7 sta $2140
0d80fa cmp $2140
0d80fd bne $80fa
0d80ff bra $809c
0d8101 ldy #$0200
0d8104 sty $2142
0d8107 xba
0d8108 lda #$00
0d810a sta $2141
0d810d xba
0d810e sta $2140
0d8111 cmp $2140
0d8114 bne $8111
0d8116 xba
0d8117 sta $2140
0d811a ldx #$0100
0d811d sta $05ff,x
0d8120 dex
0d8121 bne $811d
0d8123 lda #$ff
0d8125 sta $05
0d8127 rep #$20			; set A => 16bit
0d8129 lda $0d9d78
0d812d clc
0d812e adc #$4800
0d8131 sta $f8
0d8133 sta $48
0d8135 ldx #$0800
0d8138 dex
0d8139 bne $8138
0d813b sep #$20			; set A => 8bit
0d813d lda #$80
0d813f sta $fa
0d8141 lda #$0d
0d8143 sta $fb
0d8145 bra $8178




0d8147 phb				; save databank to stack
0d8148 phd				; save direct page to stack
0d8149 php				; save processor status to stack
0d814a rep #$20			; set A => 16bit
0d814c rep #$10			; set X,Y => 16bit
0d814e pha
0d814f phx
0d8150 phy
0d8151 sep #$20			; set A => 8bit
0d8153 lda #$00
0d8155 pha
0d8156 plb
0d8157 ldx #$0600
0d815a phx
0d815b pld
0d815c sep #$20			; set A => 8bit
0d815e lda $00
0d8160 stz $00
0d8162 beq $8178
0d8164 bmi $8172
0d8166 cmp #$01
0d8168 beq $8183
0d816a cmp #$03
0d816c beq $8183
0d816e cmp #$70
0d8170 bcs $8175
0d8172 jmp $85ba
0d8178 rep #$20			; set A => 16bit
0d817a rep #$10			; set X,Y => 16bit
0d817c ply
0d817d plx
0d817e pla
0d817f plp
0d8180 pld
0d8181 plb
0d8182 rtl				; exit routine



0d8183 sep #$20			; set A => 8bit
0d8185 xba
0d8186 lda $01
0d8188 cmp $05
0d818a bne $81ed
0d818c ldx $02
0d818e stx $06
0d8190 txa
0d8191 and #$0f
0d8193 sta $2141
0d8196 lda #$84
0d8198 cmp $2140
0d819b beq $8198
0d819d sta $2140
0d81a0 cmp $2140
0d81a3 bne $81a0
0d81a5 lda #$00
0d81a7 sta $2140
0d81aa xba
0d81ab lda $03
0d81ad lsr a
0d81ae lsr a
0d81af lsr a
0d81b0 lsr a
0d81b1 sta $2141
0d81b4 lda #$81
0d81b6 cmp $2140
0d81b9 beq $81b6
0d81bb sta $2140
0d81be cmp $2140
0d81c1 bne $81be
0d81c3 xba
0d81c4 sta $2140
0d81c7 xba
0d81c8 lda $02
0d81ca and #$f0
0d81cc sta $02
0d81ce lda $03
0d81d0 and #$0f
0d81d2 ora $02
0d81d4 sta $2141
0d81d7 lda #$81
0d81d9 cmp $2140
0d81dc beq $81d9
0d81de sta $2140
0d81e1 cmp $2140
0d81e4 bne $81e1
0d81e6 xba
0d81e7 sta $2140
0d81ea jmp $8178
0d81ed jsr $8625
0d81f0 lda $05
0d81f2 bmi $81fa
0d81f4 sta $09
0d81f6 ldx $06
0d81f8 stx $0a
0d81fa lda $01
0d81fc sta $2141
0d81ff sta $05
0d8201 sta $4202
0d8204 lda #$03
0d8206 sta $4203
0d8209 ldx $02
0d820b stx $2142
0d820e stx $06
0d8210 xba
0d8211 cmp $2140
0d8214 beq $8211
0d8216 sta $2140
0d8219 cmp $2140
0d821c bne $8219
0d821e lda #$02
0d8220 sta $2141
0d8223 ldx #$1c00
0d8226 stx $2142
0d8229 sta $2140
0d822c cmp $2140
0d822f bne $822c
0d8231 ldx $4216
0d8234 lda $0dbdae,x
0d8238 sta $14
0d823a lda $0dbdaf,x
0d823e sta $15
0d8240 lda $0dbdb0,x
0d8244 sta $16
0d8246 jsr $85fa
0d8249 ldy $14
0d824b stz $14
0d824d stz $15
0d824f lda [$14],y
0d8251 xba
0d8252 iny
0d8253 bne $825a
0d825a lda [$14],y
0d825c pha
0d825d iny
0d825e bne $8265
0d8265 xba
0d8266 pha
0d8267 plx
0d8268 lda #$05
0d826a xba
0d826b lda [$14],y
0d826d sta $2142
0d8270 iny
0d8271 bne $8278
0d8278 lda [$14],y
0d827a sta $2143
0d827d iny
0d827e bne $8285
0d8285 xba
0d8286 sta $2140
0d8289 cmp $2140
0d828c bne $8289
0d828e inc
0d828f bne $8292
0d8291 inc
0d8292 xba
0d8293 dex
0d8294 dex
0d8295 bpl $826b
0d8297 lda #$20
0d8299 sta $4203
0d829c rep #$20			; set A => 16bit
0d829e ldx #$0000		; clear X
0d82a1 stz $88,x
0d82a3 stz $c8,x
0d82a5 inx
0d82a6 inx
0d82a7 cpx #$0020
0d82aa bne $82a1
0d82ac lda $4216
0d82af tax
0d82b0 clc
0d82b1 adc #$0020
0d82b4 sta $12
0d82b6 lda #$06a8
0d82b9 sta $14
0d82bb lda #$06c8
0d82be sta $16
0d82c0 lda $0dbea1,x
0d82c4 sta ($14)
0d82c6 inc $14
0d82c8 inc $14
0d82ca ldy #$0000
0d82cd cmp $0628,y
0d82d0 beq $82e1
0d82d2 iny
0d82d3 iny
0d82d4 cpy #$0020
0d82d7 bne $82cd
0d82d9 sta ($16)
0d82db inc $16
0d82dd inc $16
0d82df bra $82e4
0d82e1 sta $0688,y
0d82e4 inx
0d82e5 inx
0d82e6 cpx $12
0d82e8 bne $82c0
0d82ea lda $c8
0d82ec bne $82f1
0d82ee jmp $84dd
0d82f1 stz $17
0d82f3 sep #$20			; set A => 8bit
0d82f5 lda #$03
0d82f7 sta $4202
0d82fa ldx #$0000		; clear X
0d82fd lda $c8,x
0d82ff beq $8340
0d8301 dec
0d8302 sta $4203
0d8305 nop
0d8306 nop
0d8307 phx
0d8308 ldx $4216
0d830b lda $0dbdff,x
0d830f sta $14
0d8311 lda $0dbe00,x
0d8315 sta $15
0d8317 lda $0dbe01,x
0d831b sta $16
0d831d jsr $85fa
0d8320 ldy $14
0d8322 stz $14
0d8324 stz $15
0d8326 lda [$14],y
0d8328 clc
0d8329 adc $17
0d832b sta $17
0d832d iny
0d832e bne $8335
0d8335 lda [$14],y
0d8337 adc $18
0d8339 sta $18
0d833b plx
0d833c inx
0d833d inx
0d833e bra $82fd
0d8340 ldx #$0000		; clear X
0d8343 rep #$20			; set A => 16bit
0d8345 lda $28,x
0d8347 beq $834d
0d8349 inx
0d834a inx
0d834b bra $8345
0d834d lda $48,x
0d834f clc
0d8350 adc $17
0d8352 bcs $835c
0d8354 cmp #$d200
0d8357 bcs $835c
0d8359 jmp $840e
0d835c ldx #$001e
0d835f lda $86,x
0d8361 bne $8367
0d8363 dex
0d8364 dex
0d8365 bne $835f
0d8367 stx $24
0d8369 ldx #$0000		; clear X
0d836c lda $88,x
0d836e beq $8377
0d8370 inx
0d8371 inx
0d8372 cpx #$0020
0d8375 bne $836c
0d8377 cpx $24
0d8379 bne $8387
0d837b stz $28,x
0d837d inx
0d837e inx
0d837f cpx #$0020
0d8382 bne $837b
0d8384 jmp $840e
0d8387 sep #$20			; set A => 8bit
0d8389 lda #$07
0d838b sta $2141
0d838e stz $10
0d8390 ldy #$0000
0d8393 rep #$20			; set A => 16bit
0d8395 lda $0688,y
0d8398 beq $83a2
0d839a iny
0d839b iny
0d839c cpy $24
0d839e bne $8395
0d83a2 tyx
0d83a3 bra $83a9
0d83a5 lda $88,x
0d83a7 bne $83b1
0d83a9 inx
0d83aa inx
0d83ab cpx $24
0d83ad bne $83a5
0d83af bra $8404
0d83b1 stz $28,x
0d83b3 stz $88,x
0d83b5 sta $0628,y
0d83b8 lda $48,x
0d83ba sta $2142
0d83bd sep #$20			; set A => 8bit
0d83bf lda $10
0d83c1 sta $2140
0d83c4 cmp $2140
0d83c7 bne $83c4
0d83c9 inc $10
0d83cb rep #$20			; set A => 16bit
0d83cd lda $0648,y
0d83d0 sta $2142
0d83d3 sep #$20			; set A => 8bit
0d83d5 lda $10
0d83d7 sta $2140
0d83da cmp $2140
0d83dd bne $83da
0d83df inc $10
0d83e1 rep #$20			; set A => 16bit
0d83e3 lda $68,x
0d83e5 sta $2142
0d83e8 sta $0668,y
0d83eb clc
0d83ec adc $0648,y
0d83ef sta $064a,y
0d83f2 sep #$20			; set A => 8bit
0d83f4 lda $10
0d83f6 sta $2140
0d83f9 cmp $2140
0d83fc bne $83f9
0d83fe inc $10
0d8400 rep #$20			; set A => 16bit
0d8402 bra $839a
0d8404 tyx
0d8405 stz $28,x
0d8407 inx
0d8408 inx
0d8409 cpx #$0020
0d840c bne $8405
0d840e sep #$20			; set A => 8bit
0d8410 lda #$03
0d8412 sta $4202
0d8415 sta $2141
0d8418 ldx #$0000		; clear X
0d841b lda $28,x
0d841d beq $8423
0d841f inx
0d8420 inx
0d8421 bra $841b
0d8423 stx $24
0d8425 lda $48,x
0d8427 sta $2142
0d842a lda $49,x
0d842c sta $2143
0d842f lda #$00
0d8431 sta $2140
0d8434 cmp $2140
0d8437 bne $8434
0d8439 inc
0d843a sta $10
0d843c ldx #$0000		; clear X
0d843f sep #$20			; set A => 8bit
0d8441 lda $c8,x
0d8443 bne $8448
0d8445 jmp $84dd
0d8448 ldy $24
0d844a sta $0628,y
0d844d dec
0d844e sta $4203
0d8451 nop
0d8452 nop
0d8453 phx
0d8454 ldx $4216
0d8457 lda $0dbdff,x
0d845b sta $14
0d845d lda $0dbe00,x
0d8461 sta $15
0d8463 lda $0dbe01,x
0d8467 sta $16
0d8469 jsr $85fa
0d846c ldy $14
0d846e stz $14
0d8470 stz $15
0d8472 lda [$14],y
0d8474 xba
0d8475 iny
0d8476 bne $847d
0d847d lda [$14],y
0d847f iny
0d8480 bne $8487
0d8487 xba
0d8488 rep #$20			; set A => 16bit
0d848a pha
0d848b ldx $24
0d848d sta $68,x
0d848f clc
0d8490 adc $48,x
0d8492 sta $4a,x
0d8494 inx
0d8495 inx
0d8496 stx $24
0d8498 plx
0d8499 sep #$20			; set A => 8bit
0d849b lda [$14],y
0d849d sta $2141
0d84a0 iny
0d84a1 bne $84a8
0d84a3 inc $16
0d84a5 ldy #$8000
0d84a8 lda [$14],y
0d84aa sta $2142
0d84ad iny
0d84ae bne $84b5
0d84b0 inc $16
0d84b2 ldy #$8000
0d84b5 lda [$14],y
0d84b7 sta $2143
0d84ba iny
0d84bb bne $84c2
0d84c2 lda $10
0d84c4 sta $2140
0d84c7 cmp $2140
0d84ca bne $84c7
0d84cc inc $10
0d84ce bne $84d2
0d84d0 inc $10
0d84d2 dex
0d84d3 dex
0d84d4 dex
0d84d5 bne $849b
0d84d7 plx
0d84d8 inx
0d84d9 inx
0d84da brl $843f
0d84dd rep #$20			; set A => 16bit
0d84df lda $a8
0d84e1 bne $84e6
0d84e6 lda #$06a8
0d84e9 sta $14
0d84eb lda #$0700
0d84ee sta $16
0d84f0 lda #$0740
0d84f3 sta $18
0d84f5 lda #$07c0
0d84f8 sta $1a
0d84fa lda ($14)
0d84fc beq $853b
0d84fe inc $14
0d8500 inc $14
0d8502 ldy #$0000
0d8505 cmp $0628,y
0d8508 beq $850e
0d850a iny
0d850b iny
0d850c bra $8505
0d850e dec
0d850f asl a
0d8510 tax
0d8511 lda $0dbe59,x
0d8515 sta ($16)
0d8517 inc $16
0d8519 inc $16
0d851b lda $0648,y
0d851e sta ($18)
0d8520 inc $18
0d8522 inc $18
0d8524 clc
0d8525 adc $0dbe35,x
0d8529 sta ($18)
0d852b inc $18
0d852d inc $18
0d852f lda $0dbe7d,x
0d8533 sta ($1a)
0d8535 inc $1a
0d8537 inc $1a
0d8539 bra $84fa
0d853b sep #$20			; set A => 8bit
0d853d lda #$02
0d853f sta $2141
0d8542 ldx #$0700
0d8545 phx
0d8546 pld
0d8547 ldx #$1a40
0d854a stx $2142
0d854d lda #$00
0d854f ldx #$fffe
0d8552 bra $8559
0d8554 ldy $00,x
0d8556 sty $2142
0d8559 sta $2140
0d855c cmp $2140
0d855f bne $855c
0d8561 inc
0d8562 inx
0d8563 inx
0d8564 cpx #$0040
0d8567 bne $8554
0d8569 ldx #$1b80
0d856c stx $2142
0d856f lda #$00
0d8571 ldx #$fffe
0d8574 bra $857b
0d8576 ldy $40,x
0d8578 sty $2142
0d857b sta $2140
0d857e cmp $2140
0d8581 bne $857e
0d8583 inc
0d8584 inx
0d8585 inx
0d8586 cpx #$0080
0d8589 bne $8576
0d858b ldx #$1ac0
0d858e stx $2142
0d8591 lda #$00
0d8593 ldx #$fffe
0d8596 bra $859d
0d8598 ldy $c0,x
0d859a sty $2142
0d859d sta $2140
0d85a0 cmp $2140
0d85a3 bne $85a0
0d85a5 inc
0d85a6 inx
0d85a7 inx
0d85a8 cpx #$0040
0d85ab bne $8598
0d85ad sep #$20			; set A => 8bit
0d85af lda #$00
0d85b1 sta $2141
0d85b4 sta $2140
0d85b7 jmp $8178
0d85ba sep #$20			; set A => 8bit
0d85bc xba
0d85bd lda $03
0d85bf sta $2143
0d85c2 lda $02
0d85c4 sta $2142
0d85c7 lda $01
0d85c9 sta $2141
0d85cc xba
0d85cd cmp $2140
0d85d0 beq $85cd
0d85d2 sta $2140
0d85d5 cmp #$f0
0d85d7 bcc $85ed
0d85d9 cmp #$f2
0d85db bcs $85ed
0d85dd xba
0d85de lda $05
0d85e0 bmi $85e8
0d85e2 sta $09
0d85e4 ldx $06
0d85e6 stx $0a
0d85e8 lda #$ff
0d85ea sta $05
0d85ec xba
0d85ed cmp $2140
0d85f0 bne $85ed
0d85f2 lda #$00
0d85f4 sta $2140
0d85f7 jmp $8178
0d85fa php				; save processor status to stack
0d85fb rep #$20			; set A => 16bit
0d85fd pha
0d85fe lda $15
0d8600 and #$ff80
0d8603 sec
0d8604 sbc $fa
0d8606 clc
0d8607 adc $15
0d8609 sta $15
0d860b pla
0d860c plp
0d860d rts				; exit routine



0d8625 php				; save processor status to stack
0d8626 sep #$20			; set A => 8bit
0d8628 xba
0d8629 cmp #$03
0d862b beq $8643
0d862d ldx #$0000		; clear X
0d8630 lda $0d8686,x
0d8634 bmi $8641
0d8641 lda #$01
0d8643 xba
0d8644 plp
0d8645 rts
